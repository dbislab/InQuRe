Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\aan_1
CREATE TABLE aan_1_Paper( "paper_id" VARCHAR NOT NULL, "title" VARCHAR , "venue" VARCHAR , "year" INTEGER , PRIMARY KEY ("paper_id") ) ;
CREATE TABLE aan_1_Affiliation( "affiliation_id" INTEGER NOT NULL, "name" VARCHAR , "address" VARCHAR , PRIMARY KEY ("affiliation_id") );
CREATE TABLE aan_1_Author( "author_id" INTEGER NOT NULL, "name" VARCHAR , "email" VARCHAR , PRIMARY KEY ("author_id") ) ;
CREATE TABLE aan_1_Author_list( "paper_id" VARCHAR NOT NULL, "author_id" INTEGER NOT NULL, "affiliation_id" INTEGER , PRIMARY KEY ("paper_id","author_id"), CONSTRAINT "Author_list_ibfk_1" FOREIGN KEY ("paper_id") REFERENCES aan_1_Paper ("paper_id"), CONSTRAINT "Author_list_ibfk_2" FOREIGN KEY ("author_id") REFERENCES aan_1_Author ("author_id"), CONSTRAINT "Author_list_ibfk_3" FOREIGN KEY ("affiliation_id") REFERENCES aan_1_Affiliation ("affiliation_id") ) ;
CREATE TABLE aan_1_Citation( "paper_id" VARCHAR NOT NULL, "cited_paper_id" VARCHAR NOT NULL, PRIMARY KEY ("paper_id","cited_paper_id"), CONSTRAINT "Citation_ibfk_1" FOREIGN KEY ("paper_id") REFERENCES aan_1_Paper ("paper_id"), CONSTRAINT "Citation_ibfk_2" FOREIGN KEY ("cited_paper_id") REFERENCES aan_1_Paper ("paper_id") ) ;

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\academic
CREATE TABLE academic_author( "aid" int, "homepage" text, "name" text, "oid" int, primary key("aid") );
CREATE TABLE academic_conference( "cid" int, "homepage" text, "name" text, primary key ("cid") );
CREATE TABLE academic_domain( "did" int, "name" text, primary key ("did") );
CREATE TABLE academic_domain_author( "aid" int, "did" int, primary key ("did", "aid"), foreign key("aid") references academic_author ("aid"), foreign key("did") references academic_domain ("did") );
CREATE TABLE academic_domain_conference( "cid" int, "did" int, primary key ("did", "cid"), foreign key("cid") references academic_conference ("cid"), foreign key("did") references academic_domain ("did") );
CREATE TABLE academic_journal( "homepage" text, "jid" int, "name" text, primary key("jid") );
CREATE TABLE academic_domain_journal( "did" int, "jid" int, primary key ("did", "jid"), foreign key("jid") references academic_journal ("jid"), foreign key("did") references academic_domain ("did") );
CREATE TABLE academic_keyword( "keyword" text, "kid" int, primary key("kid") );
CREATE TABLE academic_domain_keyword( "did" int, "kid" int, primary key ("did", "kid"), foreign key("kid") references academic_keyword ("kid"), foreign key("did") references academic_domain ("did") );
CREATE TABLE academic_publication( "abstract" text, "cid" int, "citation_num" int, "jid" int, "pid" int, "reference_num" int, "title" text, "year" int, primary key("pid"), foreign key("jid") references academic_journal ("jid"), foreign key("cid") references academic_conference ("cid") );
CREATE TABLE academic_domain_publication( "did" int, "pid" int, primary key ("did", "pid"), foreign key("pid") references academic_publication ("pid"), foreign key("did") references academic_domain ("did") );
CREATE TABLE academic_organization( "continent" text, "homepage" text, "name" text, "oid" int, primary key("oid") );
CREATE TABLE academic_publication_keyword( "pid" int, "kid" int, primary key ("kid", "pid"), foreign key("pid") references academic_publication ("pid"), foreign key("kid") references academic_keyword ("kid") );
CREATE TABLE academic_writes( "aid" int, "pid" int, primary key ("aid", "pid"), foreign key("pid") references academic_publication ("pid"), foreign key("aid") references academic_author ("aid") );
CREATE TABLE academic_cite( "cited" int, "citing" int, foreign key("cited") references academic_publication ("pid"), foreign key("citing") references academic_publication ("pid") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\activity_1
create table activity_1_Activity( actid INTEGER PRIMARY KEY, activity_name VARCHAR );
create table activity_1_Student( StuID INTEGER PRIMARY KEY, LName VARCHAR, Fname VARCHAR, Age INTEGER, Sex VARCHAR, Major INTEGER, Advisor INTEGER, city_code VARCHAR );
create table activity_1_Participates_in( stuid INTEGER, actid INTEGER, FOREIGN KEY(stuid) REFERENCES activity_1_Student (StuID), FOREIGN KEY(actid) REFERENCES activity_1_Activity (actid) );
create table activity_1_Faculty( FacID INTEGER PRIMARY KEY, Lname VARCHAR, Fname VARCHAR, Rank VARCHAR, Sex VARCHAR, Phone INTEGER, Room VARCHAR, Building VARCHAR );
create table activity_1_Faculty_Participates_in( FacID INTEGER, actid INTEGER, FOREIGN KEY(FacID) REFERENCES activity_1_Faculty (FacID), FOREIGN KEY(actid) REFERENCES activity_1_Activity (actid) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\address_1
create table address_1_City( city_code VARCHAR PRIMARY KEY, city_name VARCHAR, state VARCHAR, country VARCHAR, latitude FLOAT, longitude FLOAT );
create table address_1_Student( StuID INTEGER PRIMARY KEY, LName VARCHAR, Fname VARCHAR, Age INTEGER, Sex VARCHAR, Major INTEGER, Advisor INTEGER, city_code VARCHAR, FOREIGN KEY(city_code) REFERENCES address_1_City (city_code) );
create table address_1_Direct_distance( city1_code VARCHAR , city2_code VARCHAR , distance INTEGER, FOREIGN KEY(city1_code) REFERENCES address_1_City (city_code), FOREIGN KEY(city2_code) REFERENCES address_1_City (city_code) ) ;

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\advertising_agencies
CREATE TABLE advertising_agencies_Agencies( "agency_id" INTEGER PRIMARY KEY, "agency_details" VARCHAR NOT NULL );
CREATE TABLE advertising_agencies_Staff( "staff_id" INTEGER PRIMARY KEY, "agency_id" INTEGER NOT NULL, "staff_details" VARCHAR NOT NULL );
CREATE TABLE advertising_agencies_Clients( "client_id" INTEGER PRIMARY KEY, "agency_id" INTEGER NOT NULL, "sic_code" VARCHAR NOT NULL, "client_details" VARCHAR NOT NULL, FOREIGN KEY ("agency_id" ) REFERENCES advertising_agencies_Agencies ("agency_id" ) );
CREATE TABLE advertising_agencies_Invoices( "invoice_id" INTEGER PRIMARY KEY, "client_id" INTEGER NOT NULL, "invoice_status" VARCHAR NOT NULL, "invoice_details" VARCHAR NOT NULL, FOREIGN KEY ("client_id" ) REFERENCES advertising_agencies_Clients ("client_id" ) );
CREATE TABLE advertising_agencies_Meetings( "meeting_id" INTEGER PRIMARY KEY, "client_id" INTEGER NOT NULL, "meeting_outcome" VARCHAR NOT NULL, "meeting_type" VARCHAR NOT NULL, "billable_yn" VARCHAR, "start_date_time" DATETIME, "end_date_time" DATETIME, "purpose_of_meeting" VARCHAR, "other_details" VARCHAR NOT NULL, FOREIGN KEY ("client_id" ) REFERENCES advertising_agencies_Clients ("client_id" ) );
CREATE TABLE advertising_agencies_Payments( "payment_id" INTEGER NOT NULL , "invoice_id" INTEGER NOT NULL, "payment_details" VARCHAR NOT NULL, FOREIGN KEY ("invoice_id" ) REFERENCES advertising_agencies_Invoices ("invoice_id" ) );
CREATE TABLE advertising_agencies_Staff_in_Meetings( "meeting_id" INTEGER NOT NULL, "staff_id" INTEGER NOT NULL, FOREIGN KEY ("meeting_id" ) REFERENCES advertising_agencies_Meetings ("meeting_id" ), FOREIGN KEY ("staff_id" ) REFERENCES advertising_agencies_Staff ("staff_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\aircraft
CREATE TABLE aircraft_pilot( "Pilot_Id" INTEGER NOT NULL, "Name" VARCHAR NOT NULL, "Age" INTEGER NOT NULL, PRIMARY KEY ("Pilot_Id") );
CREATE TABLE aircraft_aircraft( "Aircraft_ID" INTEGER NOT NULL, "Aircraft" VARCHAR NOT NULL, "Description" VARCHAR NOT NULL, "Max_Gross_Weight" VARCHAR NOT NULL, "Total_disk_area" VARCHAR NOT NULL, "Max_disk_Loading" VARCHAR NOT NULL, PRIMARY KEY ("Aircraft_ID") );
CREATE TABLE aircraft_match( "Round" real, "Location" text, "Country" text, "Date" text, "Fastest_Qualifying" text, "Winning_Pilot" int, "Winning_Aircraft" int, PRIMARY KEY ("Round"), FOREIGN KEY ("Winning_Aircraft") REFERENCES aircraft_aircraft ("Aircraft_ID"), FOREIGN KEY ("Winning_Pilot") REFERENCES aircraft_pilot ("Pilot_Id") );
CREATE TABLE aircraft_airport( "Airport_ID" int, "Airport_Name" text, "Total_Passengers" real, "%_Change_2007" text, "International_Passengers" real, "Domestic_Passengers" real, "Transit_Passengers" real, "Aircraft_Movements" real, "Freight_Metric_Tonnes" real, PRIMARY KEY ("Airport_ID") );
CREATE TABLE aircraft_airport_aircraft( "ID" int, "Airport_ID" int, "Aircraft_ID" int, PRIMARY KEY ("Airport_ID","Aircraft_ID"), FOREIGN KEY ("Airport_ID") REFERENCES aircraft_airport ("Airport_ID"), FOREIGN KEY ("Aircraft_ID") REFERENCES aircraft_aircraft ("Aircraft_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\allergy_1
create table allergy_1_Allergy_Type( Allergy VARCHAR PRIMARY KEY, AllergyType VARCHAR );
create table allergy_1_Student( StuID INTEGER PRIMARY KEY, LName VARCHAR, Fname VARCHAR, Age INTEGER, Sex VARCHAR, Major INTEGER, Advisor INTEGER, city_code VARCHAR );
create table allergy_1_Has_Allergy( StuID INTEGER, Allergy VARCHAR, FOREIGN KEY(StuID) REFERENCES allergy_1_Student (StuID), FOREIGN KEY(Allergy) REFERENCES allergy_1_Allergy_Type (Allergy) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\apartment_rentals
CREATE TABLE apartment_rentals_Apartment_Buildings( building_id INTEGER NOT NULL, building_short_name VARCHAR, building_full_name VARCHAR, building_description VARCHAR, building_address VARCHAR, building_manager VARCHAR, building_phone VARCHAR, PRIMARY KEY (building_id), UNIQUE (building_id) );
CREATE TABLE apartment_rentals_Apartments( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code VARCHAR, apt_number VARCHAR, bathroom_count INTEGER, bedroom_count INTEGER, room_count VARCHAR, PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES apartment_rentals_Apartment_Buildings (building_id) );
CREATE TABLE apartment_rentals_Apartment_Facilities( apt_id INTEGER NOT NULL, facility_code VARCHAR NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES apartment_rentals_Apartments (apt_id) );
CREATE TABLE apartment_rentals_Guests( guest_id INTEGER NOT NULL , gender_code VARCHAR, guest_first_name VARCHAR, guest_last_name VARCHAR, date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) );
CREATE TABLE apartment_rentals_Apartment_Bookings( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code VARCHAR NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES apartment_rentals_Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES apartment_rentals_Guests (guest_id) );
CREATE TABLE apartment_rentals_View_Unit_Status( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES apartment_rentals_Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES apartment_rentals_Apartment_Bookings (apt_booking_id) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\architecture
CREATE TABLE architecture_architect( "id" int, "name" text, "nationality" text, "gender" text, primary key("id") );
CREATE TABLE architecture_bridge( "architect_id" int, "id" int, "name" text, "location" text, "length_meters" real, "length_feet" real, primary key("id"), foreign key ("architect_id" ) references architecture_architect ("id") );
CREATE TABLE architecture_mill( "architect_id" int, "id" int, "location" text, "name" text, "type" text, "built_year" int, "notes" text, primary key ("id"), foreign key ("architect_id" ) references architecture_architect ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\assets_maintenance
CREATE TABLE assets_maintenance_Third_Party_Companies( "company_id" INTEGER PRIMARY KEY , "company_type" VARCHAR NOT NULL, "company_name" VARCHAR, "company_address" VARCHAR, "other_company_details" VARCHAR );
CREATE TABLE assets_maintenance_Maintenance_Contracts( "maintenance_contract_id" INTEGER PRIMARY KEY, "maintenance_contract_company_id" INTEGER NOT NULL, "contract_start_date" DATETIME, "contract_end_date" DATETIME, "other_contract_details" VARCHAR, FOREIGN KEY ("maintenance_contract_company_id" ) REFERENCES assets_maintenance_Third_Party_Companies ("company_id" ) );
CREATE TABLE assets_maintenance_Parts( "part_id" INTEGER PRIMARY KEY, "part_name" VARCHAR, "chargeable_yn" VARCHAR, "chargeable_amount" VARCHAR, "other_part_details" VARCHAR );
CREATE TABLE assets_maintenance_Skills( "skill_id" INTEGER PRIMARY KEY, "skill_code" VARCHAR, "skill_description" VARCHAR );
CREATE TABLE assets_maintenance_Staff( "staff_id" INTEGER PRIMARY KEY, "staff_name" VARCHAR, "gender" VARCHAR, "other_staff_details" VARCHAR );
CREATE TABLE assets_maintenance_Assets( "asset_id" INTEGER PRIMARY KEY, "maintenance_contract_id" INTEGER NOT NULL, "supplier_company_id" INTEGER NOT NULL, "asset_details" VARCHAR, "asset_make" VARCHAR, "asset_model" VARCHAR, "asset_acquired_date" DATETIME, "asset_disposed_date" DATETIME, "other_asset_details" VARCHAR, FOREIGN KEY ("maintenance_contract_id" ) REFERENCES assets_maintenance_Maintenance_Contracts ("maintenance_contract_id" ), FOREIGN KEY ("supplier_company_id" ) REFERENCES assets_maintenance_Third_Party_Companies ("company_id" ) );
CREATE TABLE assets_maintenance_Asset_Parts( "asset_id" INTEGER NOT NULL, "part_id" INTEGER NOT NULL, FOREIGN KEY ("part_id" ) REFERENCES assets_maintenance_Parts ("part_id" ), FOREIGN KEY ("asset_id" ) REFERENCES assets_maintenance_Assets ("asset_id" ) );
CREATE TABLE assets_maintenance_Maintenance_Engineers( "engineer_id" INTEGER PRIMARY KEY, "company_id" INTEGER NOT NULL, "first_name" VARCHAR, "last_name" VARCHAR, "other_details" VARCHAR, FOREIGN KEY ("company_id" ) REFERENCES assets_maintenance_Third_Party_Companies ("company_id" ) );
CREATE TABLE assets_maintenance_Engineer_Skills( "engineer_id" INTEGER NOT NULL, "skill_id" INTEGER NOT NULL, FOREIGN KEY ("engineer_id" ) REFERENCES assets_maintenance_Maintenance_Engineers ("engineer_id" ), FOREIGN KEY ("skill_id" ) REFERENCES assets_maintenance_Skills ("skill_id" ) );
CREATE TABLE assets_maintenance_Fault_Log( "fault_log_entry_id" INTEGER PRIMARY KEY, "asset_id" INTEGER NOT NULL, "recorded_by_staff_id" INTEGER NOT NULL, "fault_log_entry_datetime" DATETIME, "fault_description" VARCHAR, "other_fault_details" VARCHAR, FOREIGN KEY ("asset_id" ) REFERENCES assets_maintenance_Assets ("asset_id" ), FOREIGN KEY ("recorded_by_staff_id" ) REFERENCES assets_maintenance_Staff ("staff_id" ) );
CREATE TABLE assets_maintenance_Engineer_Visits( "engineer_visit_id" INTEGER PRIMARY KEY, "contact_staff_id" INTEGER, "engineer_id" INTEGER NOT NULL, "fault_log_entry_id" INTEGER NOT NULL, "fault_status" VARCHAR NOT NULL, "visit_start_datetime" DATETIME, "visit_end_datetime" DATETIME, "other_visit_details" VARCHAR, FOREIGN KEY ("fault_log_entry_id" ) REFERENCES assets_maintenance_Fault_Log ("fault_log_entry_id" ), FOREIGN KEY ("engineer_id" ) REFERENCES assets_maintenance_Maintenance_Engineers ("engineer_id" ), FOREIGN KEY ("contact_staff_id" ) REFERENCES assets_maintenance_Staff ("staff_id" ) );
CREATE TABLE assets_maintenance_Part_Faults( "part_fault_id" INTEGER PRIMARY KEY, "part_id" INTEGER NOT NULL, "fault_short_name" VARCHAR, "fault_description" VARCHAR, "other_fault_details" VARCHAR, FOREIGN KEY ("part_id" ) REFERENCES assets_maintenance_Parts ("part_id" ) );
CREATE TABLE assets_maintenance_Fault_Log_Parts( "fault_log_entry_id" INTEGER NOT NULL, "part_fault_id" INTEGER NOT NULL, "fault_status" VARCHAR NOT NULL, FOREIGN KEY ("part_fault_id" ) REFERENCES assets_maintenance_Part_Faults ("part_fault_id" ), FOREIGN KEY ("fault_log_entry_id" ) REFERENCES assets_maintenance_Fault_Log ("fault_log_entry_id" ) );
CREATE TABLE assets_maintenance_Skills_Required_To_Fix( "part_fault_id" INTEGER NOT NULL, "skill_id" INTEGER NOT NULL, FOREIGN KEY ("part_fault_id" ) REFERENCES assets_maintenance_Part_Faults ("part_fault_id" ), FOREIGN KEY ("skill_id" ) REFERENCES assets_maintenance_Skills ("skill_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\baseball_1
CREATE TABLE baseball_1_player( player_id TEXT UNIQUE, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT);
CREATE TABLE baseball_1_park( park_id TEXT UNIQUE, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT);
CREATE TABLE baseball_1_college( college_id TEXT UNIQUE, name_full TEXT, city TEXT, state TEXT, country TEXT);
CREATE TABLE baseball_1_team( year INTEGER, league_id TEXT, team_id TEXT UNIQUE, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, baseball_1_park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT);
CREATE TABLE baseball_1_all_star( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references baseball_1_player (player_id) );
CREATE TABLE baseball_1_appearances( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references baseball_1_team (team_id), foreign key (player_id) references baseball_1_player (player_id) );
CREATE TABLE baseball_1_manager_award( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references baseball_1_player (player_id) );
CREATE TABLE baseball_1_player_award( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references baseball_1_player (player_id) );
CREATE TABLE baseball_1_manager_award_vote( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER);
CREATE TABLE baseball_1_player_award_vote( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references baseball_1_player (player_id) );
CREATE TABLE baseball_1_batting( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references baseball_1_player (player_id) );
CREATE TABLE baseball_1_batting_postseason( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references baseball_1_player (player_id), foreign key (team_id) references baseball_1_team (team_id) );
CREATE TABLE baseball_1_player_college( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references baseball_1_player (player_id), foreign key (college_id) references baseball_1_college (college_id) );
CREATE TABLE baseball_1_fielding( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references baseball_1_player (player_id) );
CREATE TABLE baseball_1_fielding_outfield( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references baseball_1_player (player_id) );
CREATE TABLE baseball_1_fielding_postseason( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references baseball_1_player (player_id), foreign key (team_id) references baseball_1_team (team_id) );
CREATE TABLE baseball_1_hall_of_fame( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references baseball_1_player (player_id) );
CREATE TABLE baseball_1_home_game( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references baseball_1_team (team_id), foreign key (park_id) references baseball_1_park (park_id) );
CREATE TABLE baseball_1_manager( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references baseball_1_team (team_id) );
CREATE TABLE baseball_1_manager_half( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references baseball_1_team (team_id) );
CREATE TABLE baseball_1_pitching( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC);
CREATE TABLE baseball_1_pitching_postseason( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC);
CREATE TABLE baseball_1_salary( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER);
CREATE TABLE baseball_1_postseason( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER);
CREATE TABLE baseball_1_team_franchise( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT);
CREATE TABLE baseball_1_team_half( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER);

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\battle_death
CREATE TABLE battle_death_battle( "id" int, "name" text, "date" text, "bulgarian_commander" text, "latin_commander" text, "result" text, primary key("id") );
CREATE TABLE battle_death_ship( "lost_in_battle" int, "id" int, "name" text, "tonnage" text, "ship_type" text, "location" text, "disposition_of_ship" text, primary key("id"), foreign key ("lost_in_battle") references battle_death_battle ("id") );
CREATE TABLE battle_death_death( "caused_by_ship_id" int, "id" int, "note" text, "killed" int, "injured" int, primary key("id"), foreign key ("caused_by_ship_id") references battle_death_ship ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\bbc_channels
CREATE TABLE bbc_channels_channel( "Channel_ID" int, "Name" text, "Analogue_terrestrial_channel" text, "Digital_terrestrial_channel" text, "Internet" text, PRIMARY KEY ("Channel_ID") );
CREATE TABLE bbc_channels_director( "Director_ID" int, "Name" text, "Age" int, PRIMARY KEY ("Director_ID") );
CREATE TABLE bbc_channels_program( "Program_ID" int, "Start_Year" real, "Title" text, "Director_ID" int, "Channel_ID" int, PRIMARY KEY ("Program_ID"), FOREIGN KEY ("Director_ID") REFERENCES bbc_channels_director ("Director_ID"), FOREIGN KEY ("Channel_ID") REFERENCES bbc_channels_channel ("Channel_ID") );
CREATE TABLE bbc_channels_director_admin( "Director_ID" int, "Channel_ID" int, "Is_first_director" bool, PRIMARY KEY ("Director_ID","Channel_ID"), FOREIGN KEY ("Director_ID") REFERENCES bbc_channels_director ("Director_ID"), FOREIGN KEY ("Channel_ID") REFERENCES bbc_channels_channel ("Channel_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\behavior_monitoring
CREATE TABLE behavior_monitoring_Ref_Address_Types( "address_type_code" VARCHAR PRIMARY KEY, "address_type_description" VARCHAR );
CREATE TABLE behavior_monitoring_Ref_Detention_Type( "detention_type_code" VARCHAR PRIMARY KEY, "detention_type_description" VARCHAR );
CREATE TABLE behavior_monitoring_Ref_Incident_Type( "incident_type_code" VARCHAR PRIMARY KEY, "incident_type_description" VARCHAR );
CREATE TABLE behavior_monitoring_Addresses( "address_id" INTEGER PRIMARY KEY, "line_1" VARCHAR, "line_2" VARCHAR, "line_3" VARCHAR, "city" VARCHAR, "zip_postcode" VARCHAR, "state_province_county" VARCHAR, "country" VARCHAR, "other_address_details" VARCHAR );
CREATE TABLE behavior_monitoring_Students( "student_id" INTEGER PRIMARY KEY, "address_id" INTEGER NOT NULL, "first_name" VARCHAR, "middle_name" VARCHAR, "last_name" VARCHAR, "cell_mobile_number" VARCHAR, "email_address" VARCHAR, "date_first_rental" DATETIME, "date_left_university" DATETIME, "other_student_details" VARCHAR, FOREIGN KEY ("address_id" ) REFERENCES behavior_monitoring_Addresses ("address_id" ) );
CREATE TABLE behavior_monitoring_Teachers( "teacher_id" INTEGER PRIMARY KEY, "address_id" INTEGER NOT NULL, "first_name" VARCHAR, "middle_name" VARCHAR, "last_name" VARCHAR, "gender" VARCHAR, "cell_mobile_number" VARCHAR, "email_address" VARCHAR, "other_details" VARCHAR, FOREIGN KEY ("address_id" ) REFERENCES behavior_monitoring_Addresses ("address_id" ) );
CREATE TABLE behavior_monitoring_Assessment_Notes( "notes_id" INTEGER NOT NULL , "student_id" INTEGER, "teacher_id" INTEGER NOT NULL, "date_of_notes" DATETIME, "text_of_notes" VARCHAR, "other_details" VARCHAR, FOREIGN KEY ("student_id" ) REFERENCES behavior_monitoring_Students ("student_id" ), FOREIGN KEY ("teacher_id" ) REFERENCES behavior_monitoring_Teachers ("teacher_id" ) );
CREATE TABLE behavior_monitoring_Behavior_Incident( "incident_id" INTEGER PRIMARY KEY, "incident_type_code" VARCHAR NOT NULL, "student_id" INTEGER NOT NULL, "date_incident_start" DATETIME, "date_incident_end" DATETIME, "incident_summary" VARCHAR, "recommendations" VARCHAR, "other_details" VARCHAR, FOREIGN KEY ("incident_type_code" ) REFERENCES behavior_monitoring_Ref_Incident_Type ("incident_type_code" ), FOREIGN KEY ("student_id" ) REFERENCES behavior_monitoring_Students ("student_id" ) );
CREATE TABLE behavior_monitoring_Detention( "detention_id" INTEGER PRIMARY KEY, "detention_type_code" VARCHAR NOT NULL, "teacher_id" INTEGER, "datetime_detention_start" DATETIME, "datetime_detention_end" DATETIME, "detention_summary" VARCHAR, "other_details" VARCHAR, FOREIGN KEY ("detention_type_code" ) REFERENCES behavior_monitoring_Ref_Detention_Type ("detention_type_code" ), FOREIGN KEY ("teacher_id" ) REFERENCES behavior_monitoring_Teachers ("teacher_id" ) );
CREATE TABLE behavior_monitoring_Student_Addresses( "student_id" INTEGER NOT NULL, "address_id" INTEGER NOT NULL, "date_address_from" DATETIME NOT NULL, "date_address_to" DATETIME, "monthly_rental" DECIMAL(19,4), "other_details" VARCHAR, FOREIGN KEY ("address_id" ) REFERENCES behavior_monitoring_Addresses ("address_id" ), FOREIGN KEY ("student_id" ) REFERENCES behavior_monitoring_Students ("student_id" ) );
CREATE TABLE behavior_monitoring_Students_in_Detention( "student_id" INTEGER NOT NULL, "detention_id" INTEGER NOT NULL, "incident_id" INTEGER NOT NULL, FOREIGN KEY ("incident_id" ) REFERENCES behavior_monitoring_Behavior_Incident ("incident_id" ), FOREIGN KEY ("detention_id" ) REFERENCES behavior_monitoring_Detention ("detention_id" ), FOREIGN KEY ("student_id" ) REFERENCES behavior_monitoring_Students ("student_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\bike_1
CREATE TABLE bike_1_station( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT);
CREATE TABLE bike_1_status( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES bike_1_station (id) );
CREATE TABLE bike_1_trip( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);
CREATE TABLE bike_1_weather( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER);

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\bike_racing
CREATE TABLE bike_racing_bike( "id" int, "product_name" text, "weight" int, "price" real, "material" text, primary key("id") );
CREATE TABLE bike_racing_cyclist( "id" int, "heat" int, "name" text, "nation" text, "result" real, primary key("id") );
CREATE TABLE bike_racing_cyclists_own_bikes( "cyclist_id" int, "bike_id" int, "purchase_year" int, primary key("cyclist_id", "bike_id"), foreign key("cyclist_id") references bike_racing_cyclist ("id"), foreign key("bike_id") references bike_racing_bike ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\boat_1
create table boat_1_Sailors( sid INTEGER primary key, name TEXT, rating INTEGER, age INTEGER );
CREATE TABLE boat_1_Boats( bid INTEGER primary key, name TEXT, color TEXT );
CREATE TABLE boat_1_Reserves( sid INTEGER, bid INTEGER, day TEXT, foreign key (sid) references boat_1_Sailors (sid), foreign key (bid) references boat_1_Boats (bid) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\body_builder
CREATE TABLE body_builder_people( "People_ID" int, "Name" text, "Height" real, "Weight" real, "Birth_Date" text, "Birth_Place" text, PRIMARY KEY ("People_ID") );
CREATE TABLE body_builder_body_builder( "Body_Builder_ID" int, "People_ID" int, "Snatch" real, "Clean_Jerk" real, "Total" real, PRIMARY KEY ("Body_Builder_ID"), FOREIGN KEY ("People_ID") REFERENCES body_builder_people ("People_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\book_1
create table book_1_Client(IdClient VARCHAR PRIMARY KEY, Name VARCHAR NOT NULL, Address VARCHAR NOT NULL, NumCC VARCHAR NOT NULL);
create table book_1_Orders(IdOrder VARCHAR PRIMARY KEY, IdClient VARCHAR NOT NULL REFERENCES book_1_Client , DateOrder DATE, DateExped DATE);
create table book_1_Author( idAuthor INTEGER PRIMARY KEY, Name VARCHAR);
create table book_1_Book(ISBN VARCHAR PRIMARY KEY, Title VARCHAR NOT NULL, Author VARCHAR NOT NULL, PurchasePrice INTEGER DEFAULT 0, SalePrice INTEGER DEFAULT 0);
create table book_1_Author_Book(ISBN VARCHAR, Author INTEGER, CONSTRAINT al_PK PRIMARY KEY (ISBN, Author), CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES book_1_Book (ISBN) , CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES book_1_Author (idAuthor));
create table book_1_Books_Order(ISBN VARCHAR, IdOrder VARCHAR, amount INTEGER CHECK (amount >0), CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder), CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES book_1_Book (ISBN) , CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES book_1_Orders (IdOrder) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\book_2
CREATE TABLE book_2_book( "Book_ID" int, "Title" text, "Issues" real, "Writer" text, PRIMARY KEY ("Book_ID") );
CREATE TABLE book_2_publication( "Publication_ID" int, "Book_ID" int, "Publisher" text, "Publication_Date" text, "Price" real, PRIMARY KEY ("Publication_ID"), FOREIGN KEY ("Book_ID") REFERENCES book_2_book ("Book_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\book_press
CREATE TABLE book_press_author( "Author_ID" int, "Name" text, "Age" int, "Gender" text, PRIMARY KEY ("Author_ID") );
CREATE TABLE book_press_press( "Press_ID" int, "Name" text, "Month_Profits_billion" real, "Year_Profits_billion" real, PRIMARY KEY ("Press_ID") );
CREATE TABLE book_press_book( "Book_ID" int, "Title" text, "Book_Series" text, "Author_ID" int, "Press_ID" int, "Sale_Amount" text, "Release_date" text, PRIMARY KEY ("Book_ID"), FOREIGN KEY ("Author_ID") REFERENCES book_press_author ("Author_ID"), FOREIGN KEY ("Press_ID") REFERENCES book_press_press ("Press_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\book_review
CREATE TABLE book_review_book( "Book_ID" int, "Title" text, "Type" text, "Pages" int, "Chapters" int, "Audio" text, "Release" text, PRIMARY KEY ("Book_ID") );
CREATE TABLE book_review_review( "Review_ID" int, "Book_ID" int, "Rating" real, "Readers_in_Million" real, "Rank" int, PRIMARY KEY ("Review_ID"), FOREIGN KEY ("Book_ID") REFERENCES book_review_book ("Book_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\browser_web
CREATE TABLE browser_web_Web_client_accelerator( "id" int, "name" text, "Operating_system" text, "Client" text, "Connection" text, primary key("id") );
CREATE TABLE browser_web_browser( "id" int, "name" text, "market_share" real, primary key("id") );
CREATE TABLE browser_web_accelerator_compatible_browser( "accelerator_id" int, "browser_id" int, "compatible_since_year" int, primary key("accelerator_id", "browser_id"), foreign key ("accelerator_id") references browser_web_Web_client_accelerator ("id"), foreign key ("browser_id") references browser_web_browser ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\candidate_poll
CREATE TABLE candidate_poll_people( "People_ID" int, "Sex" text, "Name" text, "Date_of_Birth" text, "Height" real, "Weight" real, PRIMARY KEY ("People_ID") );
CREATE TABLE candidate_poll_candidate( "Candidate_ID" int, "People_ID" int, "Poll_Source" text, "Date" text, "Support_rate" real, "Consider_rate" real, "Oppose_rate" real, "Unsure_rate" real, PRIMARY KEY ("Candidate_ID"), FOREIGN KEY ("People_ID") REFERENCES candidate_poll_people ("People_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\car_racing
CREATE TABLE car_racing_country( "Country_Id" int, "Country" text, "Capital" text, "Official_native_language" text, "Regoin" text, PRIMARY KEY ("Country_Id") );
CREATE TABLE car_racing_team( "Team_ID" int, "Team" text, "Make" text, "Manager" text, "Sponsor" text, "Car_Owner" text, PRIMARY KEY ("Team_ID") );
CREATE TABLE car_racing_driver( "Driver_ID" int, "Driver" text, "Country" int, "Age" int, "Car_#" real, "Make" text, "Points" text, "Laps" real, "Winnings" text, PRIMARY KEY ("Driver_ID"), FOREIGN KEY ("Country") REFERENCES car_racing_country ("Country_ID") );
CREATE TABLE car_racing_team_driver( "Team_ID" int, "Driver_ID" int, PRIMARY KEY ("Team_ID","Driver_ID"), FOREIGN KEY ("Team_ID") REFERENCES car_racing_team ("Team_ID"), FOREIGN KEY ("Driver_ID") REFERENCES car_racing_driver ("Driver_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\car_road_race
CREATE TABLE car_road_race_driver( "Driver_ID" int, "Driver_Name" text, "Entrant" text, "Constructor" text, "Chassis" text, "Engine" text, "Age" int, PRIMARY KEY ("Driver_ID") );
CREATE TABLE car_road_race_race( "Road" int, "Driver_ID" int, "Race_Name" text, "Pole_Position" text, "Fastest_Lap" text, "Winning_driver" text, "Winning_team" text, "Report" text, PRIMARY KEY ("Road"), FOREIGN KEY ("Driver_ID") REFERENCES car_road_race_driver ("Driver_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\cinema
CREATE TABLE cinema_film( "Film_ID" int, "Rank_in_series" int, "Number_in_season" int, "Title" text, "Directed_by" text, "Original_air_date" text, "Production_code" text, PRIMARY KEY ("Film_ID") );
CREATE TABLE cinema_cinema( "Cinema_ID" int, "Name" text, "Openning_year" int, "Capacity" int, "Location" text, PRIMARY KEY ("Cinema_ID"));
CREATE TABLE cinema_schedule( "Cinema_ID" int, "Film_ID" int, "Date" text, "Show_times_per_day" int, "Price" float, PRIMARY KEY ("Cinema_ID","Film_ID"), FOREIGN KEY ("Film_ID") REFERENCES cinema_film ("Film_ID"), FOREIGN KEY ("Cinema_ID") REFERENCES cinema_cinema ("Cinema_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\city_record
CREATE TABLE city_record_city( "City_ID" int, "City" text, "Hanzi" text, "Hanyu_Pinyin" text, "Regional_Population" int, "GDP" real, PRIMARY KEY ("City_ID") );
CREATE TABLE city_record_match( "Match_ID" int, "Date" text, "Venue" text, "Score" text, "Result" text, "Competition" text, PRIMARY KEY ("Match_ID") );
CREATE TABLE city_record_temperature( "City_ID" int, "Jan" real, "Feb" real, "Mar" real, "Apr" real, "Jun" real, "Jul" real, "Aug" real, "Sep" real, "Oct" real, "Nov" real, "Dec" real, PRIMARY KEY ("City_ID"), FOREIGN KEY ("City_ID") REFERENCES city_record_city ("City_ID") );
CREATE TABLE city_record_hosting_city( "Year" int, "Match_ID" int, "Host_City" int, PRIMARY KEY ("Year"), FOREIGN KEY ("Host_City") REFERENCES city_record_city ("City_ID"), FOREIGN KEY ("Match_ID") REFERENCES city_record_match ("Match_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\climbing
CREATE TABLE climbing_mountain( "Mountain_ID" int, "Name" text, "Height" real, "Prominence" real, "Range" text, "Country" text, PRIMARY KEY ("Mountain_ID") );
CREATE TABLE climbing_climber( "Climber_ID" int, "Name" text, "Country" text, "Time" text, "Points" real, "Mountain_ID" int, PRIMARY KEY ("Climber_ID"), FOREIGN KEY ("Mountain_ID") REFERENCES climbing_mountain ("Mountain_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\club_1
create table club_1_Student( StuID INTEGER PRIMARY KEY, LName VARCHAR, Fname VARCHAR, Age INTEGER, Sex VARCHAR, Major INTEGER, Advisor INTEGER, city_code VARCHAR );
create table club_1_Club( ClubID INTEGER PRIMARY KEY, ClubName VARCHAR, ClubDesc VARCHAR, ClubLocation VARCHAR );
create table club_1_Member_of_club( StuID INTEGER, ClubID INTEGER, Position VARCHAR, FOREIGN KEY(StuID) REFERENCES club_1_Student (StuID), FOREIGN KEY(ClubID) REFERENCES club_1_Club (ClubID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\club_leader
CREATE TABLE club_leader_member( "Member_ID" int, "Name" text, "Nationality" text, "Age" int, PRIMARY KEY ("Member_ID") );
CREATE TABLE club_leader_club( "Club_ID" int, "Overall_Ranking" int, "Team_Leader" text, "Club_Name" text, PRIMARY KEY ("Club_ID") );
CREATE TABLE club_leader_club_leader( "Club_ID" int, "Member_ID" int, "Year_Join" text, PRIMARY KEY ("Club_ID","Member_ID"), FOREIGN KEY ("Club_ID") REFERENCES club_leader_club ("Club_ID"), FOREIGN KEY ("Member_ID") REFERENCES club_leader_member ("Member_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\coffee_shop
CREATE TABLE coffee_shop_shop( "Shop_ID" int, "Address" text, "Num_of_staff" text, "Score" real, "Open_Year" text, PRIMARY KEY ("Shop_ID") );
CREATE TABLE coffee_shop_member( "Member_ID" int, "Name" text, "Membership_card" text, "Age" int, "Time_of_purchase" int, "Level_of_membership" int, "Address" text, PRIMARY KEY ("Member_ID") );
CREATE TABLE coffee_shop_happy_hour( "HH_ID" int, "Shop_ID" int, "Month" text, "Num_of_shaff_in_charge" int, PRIMARY KEY ("HH_ID","Shop_ID","Month"), FOREIGN KEY ("Shop_ID") REFERENCES coffee_shop_shop ("Shop_ID") );
CREATE TABLE coffee_shop_happy_hour_member( "HH_ID" int, "Member_ID" int, "Total_amount" real, PRIMARY KEY ("HH_ID","Member_ID"), FOREIGN KEY ("Member_ID") REFERENCES coffee_shop_member ("Member_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\college_3
create table college_3_Student( StuID INTEGER PRIMARY KEY, LName VARCHAR, Fname VARCHAR, Age INTEGER, Sex VARCHAR, Major INTEGER, Advisor INTEGER, city_code VARCHAR );
create table college_3_Faculty( FacID INTEGER PRIMARY KEY, Lname VARCHAR, Fname VARCHAR, Rank VARCHAR, Sex VARCHAR, Phone INTEGER, Room VARCHAR, Building VARCHAR );
create table college_3_Department( DNO INTEGER PRIMARY KEY, Division VARCHAR, DName VARCHAR, Room VARCHAR, Building VARCHAR, DPhone INTEGER );
create table college_3_Member_of( FacID INTEGER, DNO INTEGER, Appt_Type VARCHAR, FOREIGN KEY(FacID) REFERENCES college_3_Faculty (FacID), FOREIGN KEY(DNO) REFERENCES college_3_Department (DNO) );
create table college_3_Course( CID VARCHAR PRIMARY KEY, CName VARCHAR, Credits INTEGER, Instructor INTEGER, Days VARCHAR, Hours VARCHAR, DNO INTEGER, FOREIGN KEY(Instructor) REFERENCES college_3_Faculty (FacID), FOREIGN KEY(DNO) REFERENCES college_3_Department (DNO) );
create table college_3_Minor_in( StuID INTEGER, DNO INTEGER, FOREIGN KEY(StuID) REFERENCES college_3_Student (StuID), FOREIGN KEY(DNO) REFERENCES college_3_Department (DNO) );
create table college_3_Gradeconversion( lettergrade VARCHAR PRIMARY KEY, gradepoint FLOAT );
create table college_3_Enrolled_in( StuID INTEGER, CID VARCHAR, Grade VARCHAR, FOREIGN KEY(StuID) REFERENCES college_3_Student (StuID), FOREIGN KEY(CID) REFERENCES college_3_Course (CID), FOREIGN KEY(Grade) REFERENCES college_3_Gradeconversion (lettergrade) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\company_employee
CREATE TABLE company_employee_people( "People_ID" int, "Age" int, "Name" text, "Nationality" text, "Graduation_College" text, PRIMARY KEY ("People_ID") );
CREATE TABLE company_employee_company( "Company_ID" int, "Name" text, "Headquarters" text, "Industry" text, "Sales_in_Billion" real, "Profits_in_Billion" real, "Assets_in_Billion" real, "Market_Value_in_Billion" real, PRIMARY KEY ("Company_ID") );
CREATE TABLE company_employee_employment( "Company_ID" int, "People_ID" int, "Year_working" int, PRIMARY KEY ("Company_ID","People_ID"), FOREIGN KEY ("Company_ID") REFERENCES company_employee_company ("Company_ID"), FOREIGN KEY ("People_ID") REFERENCES company_employee_people ("People_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\company_office
CREATE TABLE company_office_buildings( "id" int, "name" text, "City" text, "Height" int, "Stories" int, "Status" text, PRIMARY KEY("id") );
CREATE TABLE company_office_Companies( "id" int, "name" text, "Headquarters" text, "Industry" text, "Sales_billion" real, "Profits_billion" real, "Assets_billion" real, "Market_Value_billion" text, PRIMARY KEY ("id") );
CREATE TABLE company_office_Office_locations( "building_id" int, "company_id" int, "move_in_year" int, PRIMARY KEY ("building_id", "company_id"), FOREIGN KEY ("building_id") REFERENCES company_office_buildings ("id"), FOREIGN KEY ("company_id") REFERENCES company_office_Companies ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\concert_singer
CREATE TABLE concert_singer_stadium( "Stadium_ID" int, "Location" text, "Name" text, "Capacity" int, "Highest" int, "Lowest" int, "Average" int, PRIMARY KEY ("Stadium_ID") );
CREATE TABLE concert_singer_singer( "Singer_ID" int, "Name" text, "Country" text, "Song_Name" text, "Song_release_year" text, "Age" int, "Is_male" bool, PRIMARY KEY ("Singer_ID") );
CREATE TABLE concert_singer_concert( "concert_ID" int, "concert_Name" text, "Theme" text, "Stadium_ID" int, "Year" text, PRIMARY KEY ("concert_ID"), FOREIGN KEY ("Stadium_ID") REFERENCES concert_singer_stadium ("Stadium_ID") );
CREATE TABLE concert_singer_singer_in_concert( "concert_ID" int, "Singer_ID" int, PRIMARY KEY ("concert_ID","Singer_ID"), FOREIGN KEY ("concert_ID") REFERENCES concert_singer_concert ("concert_ID"), FOREIGN KEY ("Singer_ID") REFERENCES concert_singer_singer ("Singer_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\conference
CREATE TABLE conference_conference( "Conference_ID" int, "Conference_Name" text, "Year" int, "Location" text, PRIMARY KEY ("Conference_ID") );
CREATE TABLE conference_institution( "Institution_ID" int, "Institution_Name" text, "Location" text, "Founded" int, PRIMARY KEY ("Institution_ID") );
CREATE TABLE conference_staff( "staff_ID" int, "name" text, "Age" int, "Nationality" text, "Institution_ID" int, PRIMARY KEY ("staff_ID"), FOREIGN KEY ("Institution_ID") REFERENCES conference_institution ("Institution_ID") );
CREATE TABLE conference_conference_participation( "Conference_ID" int, "staff_ID" int, "role" text, PRIMARY KEY ("staff_ID","Conference_ID"), FOREIGN KEY ("staff_ID") REFERENCES conference_staff ("staff_ID"), FOREIGN KEY ("Conference_ID") REFERENCES conference_conference ("Conference_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\country_language
CREATE TABLE country_language_languages( "id" integer, "name" text, PRIMARY KEY ("id") );
CREATE TABLE country_language_countries( "id" integer, "name" text, "overall_score" real, "justice_score" real, "health_score" real, "education_score" real, "economics_score" real, "politics_score" real, PRIMARY KEY ("id") );
CREATE TABLE country_language_official_languages( "language_id" integer, "country_id" integer, PRIMARY KEY ("language_id", "country_id"), FOREIGN KEY ("language_id") REFERENCES country_language_languages ("id"), FOREIGN KEY ("country_id") REFERENCES country_language_countries ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\county_public_safety
CREATE TABLE county_public_safety_county_public_safety( "County_ID" int, "Name" text, "Population" int, "Police_officers" int, "Residents_per_officer" int, "Case_burden" int, "Crime_rate" real, "Police_force" text, "Location" text, PRIMARY KEY ("County_ID") );
CREATE TABLE county_public_safety_city( "City_ID" int, "County_ID" int, "Name" text, "White" real, "Black" real, "Amerindian" real, "Asian" real, "Multiracial" real, "Hispanic" real, PRIMARY KEY ("City_ID"), FOREIGN KEY ("County_ID") REFERENCES county_public_safety_county_public_safety ("County_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\course_teach
CREATE TABLE course_teach_course( "Course_ID" int, "Staring_Date" text, "Course" text, PRIMARY KEY ("Course_ID") );
CREATE TABLE course_teach_teacher( "Teacher_ID" int, "Name" text, "Age" text, "Hometown" text, PRIMARY KEY ("Teacher_ID") );
CREATE TABLE course_teach_course_arrange( "Course_ID" int, "Teacher_ID" int, "Grade" int, PRIMARY KEY ("Course_ID","Teacher_ID","Grade"), FOREIGN KEY ("Course_ID") REFERENCES course_teach_course ("Course_ID"), FOREIGN KEY ("Teacher_ID") REFERENCES course_teach_teacher ("Teacher_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\cre_Docs_and_Epenses
CREATE TABLE cre_Docs_and_Epenses_Ref_Document_Types( Document_Type_Code VARCHAR NOT NULL, Document_Type_Name VARCHAR NOT NULL, Document_Type_Description VARCHAR NOT NULL, PRIMARY KEY (Document_Type_Code) );
CREATE TABLE cre_Docs_and_Epenses_Ref_Budget_Codes( Budget_Type_Code VARCHAR NOT NULL, Budget_Type_Description VARCHAR NOT NULL, PRIMARY KEY (Budget_Type_Code) );
CREATE TABLE cre_Docs_and_Epenses_Projects( Project_ID INTEGER NOT NULL, Project_Details VARCHAR, PRIMARY KEY (Project_ID) );
CREATE TABLE cre_Docs_and_Epenses_Documents( Document_ID INTEGER NOT NULL, Document_Type_Code VARCHAR NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR, Document_Description VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES cre_Docs_and_Epenses_Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES cre_Docs_and_Epenses_Projects (Project_ID) );
CREATE TABLE cre_Docs_and_Epenses_Statements( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR, PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES cre_Docs_and_Epenses_Documents (Document_ID) );
CREATE TABLE cre_Docs_and_Epenses_Documents_with_Expenses( Document_ID INTEGER NOT NULL, Budget_Type_Code VARCHAR NOT NULL, Document_Details VARCHAR, PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES cre_Docs_and_Epenses_Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES cre_Docs_and_Epenses_Documents (Document_ID) );
CREATE TABLE cre_Docs_and_Epenses_Accounts( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR, PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES cre_Docs_and_Epenses_Statements (Statement_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\cre_Doc_and_collections
CREATE TABLE cre_Doc_and_collections_Document_Subsets( Document_Subset_ID INTEGER NOT NULL, Document_Subset_Name VARCHAR NOT NULL, Document_Subset_Details VARCHAR NOT NULL, PRIMARY KEY (Document_Subset_ID) );
CREATE TABLE cre_Doc_and_collections_Collection_Subsets( Collection_Subset_ID INTEGER NOT NULL, Collection_Subset_Name VARCHAR NOT NULL, Collecrtion_Subset_Details VARCHAR NOT NULL, PRIMARY KEY (Collection_Subset_ID) );
CREATE TABLE cre_Doc_and_collections_Document_Objects( Document_Object_ID INTEGER NOT NULL, Parent_Document_Object_ID INTEGER, Owner VARCHAR, Description VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Document_Object_ID) );
CREATE TABLE cre_Doc_and_collections_Collections( Collection_ID INTEGER NOT NULL, Parent_Collection_ID INTEGER, Collection_Name VARCHAR, Collection_Description VARCHAR, PRIMARY KEY (Collection_ID) );
CREATE TABLE cre_Doc_and_collections_Documents_in_Collections( Document_Object_ID INTEGER NOT NULL, Collection_ID INTEGER NOT NULL, PRIMARY KEY (Document_Object_ID, Collection_ID), FOREIGN KEY (Document_Object_ID) REFERENCES cre_Doc_and_collections_Document_Objects (Document_Object_ID), FOREIGN KEY (Collection_ID) REFERENCES cre_Doc_and_collections_Collections (Collection_ID) );
CREATE TABLE cre_Doc_and_collections_Document_Subset_Members( Document_Object_ID INTEGER NOT NULL, Related_Document_Object_ID INTEGER NOT NULL, Document_Subset_ID INTEGER NOT NULL, PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID), FOREIGN KEY (Document_Object_ID) REFERENCES cre_Doc_and_collections_Document_Objects (Document_Object_ID), FOREIGN KEY (Related_Document_Object_ID) REFERENCES cre_Doc_and_collections_Document_Objects (Document_Object_ID), FOREIGN KEY (Document_Subset_ID) REFERENCES cre_Doc_and_collections_Document_Subsets (Document_Subset_ID) );
CREATE TABLE cre_Doc_and_collections_Collection_Subset_Members( Collection_ID INTEGER NOT NULL, Related_Collection_ID INTEGER NOT NULL, Collection_Subset_ID INTEGER NOT NULL, PRIMARY KEY (Collection_ID, Related_Collection_ID), FOREIGN KEY (Collection_ID) REFERENCES cre_Doc_and_collections_Collections (Collection_ID), FOREIGN KEY (Related_Collection_ID) REFERENCES cre_Doc_and_collections_Collections (Collection_ID), FOREIGN KEY (Collection_Subset_ID) REFERENCES cre_Doc_and_collections_Collection_Subsets (Collection_Subset_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\cre_Doc_Control_Systems
CREATE TABLE cre_Doc_Control_Systems_Ref_Document_Types( document_type_code VARCHAR NOT NULL, document_type_description VARCHAR NOT NULL, PRIMARY KEY (document_type_code) );
CREATE TABLE cre_Doc_Control_Systems_Roles( role_code VARCHAR NOT NULL, role_description VARCHAR, PRIMARY KEY (role_code) );
CREATE TABLE cre_Doc_Control_Systems_Addresses( address_id INTEGER NOT NULL, address_details VARCHAR, PRIMARY KEY (address_id) );
CREATE TABLE cre_Doc_Control_Systems_Ref_Document_Status( document_status_code VARCHAR NOT NULL, document_status_description VARCHAR NOT NULL, PRIMARY KEY (document_status_code) );
CREATE TABLE cre_Doc_Control_Systems_Ref_Shipping_Agents( shipping_agent_code VARCHAR NOT NULL, shipping_agent_name VARCHAR NOT NULL, shipping_agent_description VARCHAR NOT NULL, PRIMARY KEY (shipping_agent_code) );
CREATE TABLE cre_Doc_Control_Systems_Documents( document_id INTEGER NOT NULL, document_status_code VARCHAR NOT NULL, document_type_code VARCHAR NOT NULL, shipping_agent_code VARCHAR, receipt_date DATETIME, receipt_number VARCHAR, other_details VARCHAR, PRIMARY KEY (document_id), FOREIGN KEY (document_type_code) REFERENCES cre_Doc_Control_Systems_Ref_Document_Types (document_type_code), FOREIGN KEY (document_status_code) REFERENCES cre_Doc_Control_Systems_Ref_Document_Status (document_status_code), FOREIGN KEY (shipping_agent_code) REFERENCES cre_Doc_Control_Systems_Ref_Shipping_Agents (shipping_agent_code) );
CREATE TABLE cre_Doc_Control_Systems_Employees( employee_id INTEGER NOT NULL, role_code VARCHAR NOT NULL, employee_name VARCHAR, other_details VARCHAR, PRIMARY KEY (employee_id), FOREIGN KEY (role_code) REFERENCES cre_Doc_Control_Systems_Roles (role_code) );
CREATE TABLE cre_Doc_Control_Systems_Document_Drafts( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, draft_details VARCHAR, PRIMARY KEY (document_id, draft_number), FOREIGN KEY (document_id) REFERENCES cre_Doc_Control_Systems_Documents (document_id) );
CREATE TABLE cre_Doc_Control_Systems_Draft_Copies( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number), FOREIGN KEY (document_id, draft_number) REFERENCES cre_Doc_Control_Systems_Document_Drafts (document_id,draft_number) );
CREATE TABLE cre_Doc_Control_Systems_Circulation_History( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, employee_id INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number, employee_id), FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES cre_Doc_Control_Systems_Draft_Copies (document_id,draft_number,copy_number), FOREIGN KEY (employee_id) REFERENCES cre_Doc_Control_Systems_Employees (employee_id) );
CREATE TABLE cre_Doc_Control_Systems_Documents_Mailed( document_id INTEGER NOT NULL, mailed_to_address_id INTEGER NOT NULL, mailing_date DATETIME, PRIMARY KEY (document_id, mailed_to_address_id), FOREIGN KEY (document_id) REFERENCES cre_Doc_Control_Systems_Documents (document_id), FOREIGN KEY (mailed_to_address_id) REFERENCES cre_Doc_Control_Systems_Addresses (address_id) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\cre_Doc_Template_Mgt
CREATE TABLE cre_Doc_Template_Mgt_Ref_Template_Types( Template_Type_Code VARCHAR NOT NULL, Template_Type_Description VARCHAR NOT NULL, PRIMARY KEY (Template_Type_Code) );
CREATE TABLE cre_Doc_Template_Mgt_Templates( Template_ID INTEGER NOT NULL, Version_Number INTEGER NOT NULL, Template_Type_Code VARCHAR NOT NULL, Date_Effective_From DATETIME, Date_Effective_To DATETIME, Template_Details VARCHAR NOT NULL, PRIMARY KEY (Template_ID), FOREIGN KEY (Template_Type_Code) REFERENCES cre_Doc_Template_Mgt_Ref_Template_Types (Template_Type_Code) );
CREATE TABLE cre_Doc_Template_Mgt_Documents( Document_ID INTEGER NOT NULL, Template_ID INTEGER, Document_Name VARCHAR, Document_Description VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Document_ID), FOREIGN KEY (Template_ID) REFERENCES cre_Doc_Template_Mgt_Templates (Template_ID) );
CREATE TABLE cre_Doc_Template_Mgt_Paragraphs( Paragraph_ID INTEGER NOT NULL, Document_ID INTEGER NOT NULL, Paragraph_Text VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Paragraph_ID), FOREIGN KEY (Document_ID) REFERENCES cre_Doc_Template_Mgt_Documents (Document_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\cre_Doc_Tracking_DB
CREATE TABLE cre_Doc_Tracking_DB_Ref_Document_Types( Document_Type_Code VARCHAR NOT NULL, Document_Type_Name VARCHAR NOT NULL, Document_Type_Description VARCHAR NOT NULL, PRIMARY KEY (Document_Type_Code) );
CREATE TABLE cre_Doc_Tracking_DB_Ref_Calendar( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) );
CREATE TABLE cre_Doc_Tracking_DB_Ref_Locations( Location_Code VARCHAR NOT NULL, Location_Name VARCHAR NOT NULL, Location_Description VARCHAR NOT NULL, PRIMARY KEY (Location_Code) );
CREATE TABLE cre_Doc_Tracking_DB_Roles( Role_Code VARCHAR NOT NULL, Role_Name VARCHAR, Role_Description VARCHAR, PRIMARY KEY (Role_Code) );
CREATE TABLE cre_Doc_Tracking_DB_All_Documents( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code VARCHAR NOT NULL, Document_Name VARCHAR, Document_Description VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES cre_Doc_Tracking_DB_Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES cre_Doc_Tracking_DB_Ref_Calendar (Calendar_Date) );
CREATE TABLE cre_Doc_Tracking_DB_Employees( Employee_ID INTEGER NOT NULL, Role_Code VARCHAR NOT NULL, Employee_Name VARCHAR, Gender_MFU VARCHAR NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR, PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES cre_Doc_Tracking_DB_Roles (Role_Code) );
CREATE TABLE cre_Doc_Tracking_DB_Document_Locations( Document_ID INTEGER NOT NULL, Location_Code VARCHAR NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES cre_Doc_Tracking_DB_Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES cre_Doc_Tracking_DB_Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES cre_Doc_Tracking_DB_Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES cre_Doc_Tracking_DB_All_Documents (Document_ID) );
CREATE TABLE cre_Doc_Tracking_DB_Documents_to_be_Destroyed( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR, PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES cre_Doc_Tracking_DB_Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES cre_Doc_Tracking_DB_Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES cre_Doc_Tracking_DB_Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES cre_Doc_Tracking_DB_Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES cre_Doc_Tracking_DB_All_Documents (Document_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\cre_Doc_Workflow
CREATE TABLE cre_Doc_Workflow_Staff( staff_id INTEGER NOT NULL, staff_details VARCHAR NOT NULL, PRIMARY KEY (staff_id) );
CREATE TABLE cre_Doc_Workflow_Ref_Staff_Roles( staff_role_code VARCHAR NOT NULL, staff_role_description VARCHAR NOT NULL, PRIMARY KEY (staff_role_code) );
CREATE TABLE cre_Doc_Workflow_Process_Outcomes( process_outcome_code VARCHAR NOT NULL, process_outcome_description VARCHAR NOT NULL, PRIMARY KEY (process_outcome_code) );
CREATE TABLE cre_Doc_Workflow_Process_Status( process_status_code VARCHAR NOT NULL, process_status_description VARCHAR NOT NULL, PRIMARY KEY (process_status_code) );
CREATE TABLE cre_Doc_Workflow_Authors( author_name VARCHAR NOT NULL, other_details VARCHAR NOT NULL, PRIMARY KEY (author_name) );
CREATE TABLE cre_Doc_Workflow_Documents( document_id INTEGER NOT NULL, author_name VARCHAR NOT NULL, document_name VARCHAR NOT NULL, document_description VARCHAR NOT NULL, other_details VARCHAR, PRIMARY KEY (document_id), FOREIGN KEY (author_name) REFERENCES cre_Doc_Workflow_Authors (author_name) );
CREATE TABLE cre_Doc_Workflow_Business_Processes( process_id INTEGER NOT NULL, next_process_id INTEGER, process_name VARCHAR NOT NULL, process_description VARCHAR NOT NULL, other_details VARCHAR, PRIMARY KEY (process_id) );
CREATE TABLE cre_Doc_Workflow_Documents_Processes( document_id INTEGER NOT NULL, process_id INTEGER NOT NULL, process_outcome_code VARCHAR NOT NULL, process_status_code VARCHAR NOT NULL, PRIMARY KEY (document_id, process_id), FOREIGN KEY (document_id) REFERENCES cre_Doc_Workflow_Documents (document_id), FOREIGN KEY (process_id) REFERENCES cre_Doc_Workflow_Business_Processes (process_id), FOREIGN KEY (process_outcome_code) REFERENCES cre_Doc_Workflow_Process_Outcomes (process_outcome_code), FOREIGN KEY (process_status_code) REFERENCES cre_Doc_Workflow_Process_Status (process_status_code) );
CREATE TABLE cre_Doc_Workflow_Staff_in_Processes( document_id INTEGER NOT NULL, process_id INTEGER NOT NULL, staff_id INTEGER NOT NULL, staff_role_code VARCHAR NOT NULL, date_from DATETIME, date_to DATETIME, other_details VARCHAR, PRIMARY KEY (document_id, process_id, staff_id), FOREIGN KEY (staff_id) REFERENCES cre_Doc_Workflow_Staff (staff_id), FOREIGN KEY (document_id, process_id) REFERENCES cre_Doc_Workflow_Documents_Processes (document_id,process_id), FOREIGN KEY (staff_role_code) REFERENCES cre_Doc_Workflow_Ref_Staff_Roles (staff_role_code) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\cre_Drama_Workshop_Groups
CREATE TABLE cre_Drama_Workshop_Groups_Ref_Payment_Methods( payment_method_code VARCHAR NOT NULL, payment_method_description VARCHAR, PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) );
CREATE TABLE cre_Drama_Workshop_Groups_Ref_Service_Types( Service_Type_Code VARCHAR NOT NULL, Parent_Service_Type_Code VARCHAR, Service_Type_Description VARCHAR, PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );
CREATE TABLE cre_Drama_Workshop_Groups_Addresses( Address_ID INTEGER NOT NULL, Line_1 VARCHAR, Line_2 VARCHAR, City_Town VARCHAR, State_County VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Address_ID), UNIQUE (Address_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Products( Product_ID INTEGER NOT NULL, Product_Name VARCHAR, Product_Price DECIMAL(20,4), Product_Description VARCHAR, Other_Product_Service_Details VARCHAR, PRIMARY KEY (Product_ID), UNIQUE (Product_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Marketing_Regions( Marketing_Region_Code VARCHAR NOT NULL, Marketing_Region_Name VARCHAR NOT NULL, Marketing_Region_Descriptrion VARCHAR NOT NULL, Other_Details VARCHAR, PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );
CREATE TABLE cre_Drama_Workshop_Groups_Clients( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR, Customer_Name VARCHAR, Customer_Phone VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES cre_Drama_Workshop_Groups_Addresses (Address_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Drama_Workshop_Groups( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code VARCHAR NOT NULL, Marketing_Region_Code VARCHAR NOT NULL, Store_Name VARCHAR, Store_Phone VARCHAR, Store_Email_Address VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES cre_Drama_Workshop_Groups_Addresses (Address_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Performers( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR, Customer_Phone VARCHAR, Customer_Email_Address VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES cre_Drama_Workshop_Groups_Addresses (Address_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Customers( Customer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR, Customer_Phone VARCHAR, Customer_Email_Address VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES cre_Drama_Workshop_Groups_Addresses (Address_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Stores( Store_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code VARCHAR NOT NULL, Store_Name VARCHAR, Store_Phone VARCHAR, Store_Email_Address VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES cre_Drama_Workshop_Groups_Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES cre_Drama_Workshop_Groups_Marketing_Regions (Marketing_Region_Code) );
CREATE TABLE cre_Drama_Workshop_Groups_Bookings( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID INTEGER NOT NULL, Status_Code VARCHAR NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR, PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES cre_Drama_Workshop_Groups_Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES cre_Drama_Workshop_Groups_Drama_Workshop_Groups (Workshop_Group_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Performers_in_Bookings( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES cre_Drama_Workshop_Groups_Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES cre_Drama_Workshop_Groups_Bookings (Booking_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Customer_Orders( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR, PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES cre_Drama_Workshop_Groups_Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES cre_Drama_Workshop_Groups_Stores (Store_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Order_Items( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR, Other_Item_Details VARCHAR, PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES cre_Drama_Workshop_Groups_Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES cre_Drama_Workshop_Groups_Products (Product_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Invoices( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code VARCHAR, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR, Other_Item_Details VARCHAR, Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES cre_Drama_Workshop_Groups_Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES cre_Drama_Workshop_Groups_Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES cre_Drama_Workshop_Groups_Ref_Payment_Methods (payment_method_code) );
CREATE TABLE cre_Drama_Workshop_Groups_Services( Service_ID INTEGER NOT NULL, Service_Type_Code VARCHAR, Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR, Product_Name VARCHAR, Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR, PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES cre_Drama_Workshop_Groups_Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES cre_Drama_Workshop_Groups_Ref_Service_Types (Service_Type_Code) );
CREATE TABLE cre_Drama_Workshop_Groups_Bookings_Services( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES cre_Drama_Workshop_Groups_Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES cre_Drama_Workshop_Groups_Services (Service_ID) );
CREATE TABLE cre_Drama_Workshop_Groups_Invoice_Items( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR, PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES cre_Drama_Workshop_Groups_Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES cre_Drama_Workshop_Groups_Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES cre_Drama_Workshop_Groups_Bookings_Services (Order_ID,Product_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\cre_Students_Information_Systems
CREATE TABLE cre_Students_Information_Systems_Students( "student_id" INTEGER NOT NULL, "bio_data" VARCHAR NOT NULL, "student_details" VARCHAR NOT NULL, PRIMARY KEY ("student_id") );
CREATE TABLE cre_Students_Information_Systems_Transcripts( "transcript_id" INTEGER NOT NULL, "student_id" INTEGER NOT NULL, "date_of_transcript" DATETIME(3), "transcript_details" VARCHAR NOT NULL, PRIMARY KEY ("transcript_id"), FOREIGN KEY (student_id) REFERENCES cre_Students_Information_Systems_Students (student_id) );
CREATE TABLE cre_Students_Information_Systems_Behaviour_Monitoring( "behaviour_monitoring_id" INTEGER NOT NULL, "student_id" INTEGER NOT NULL, "behaviour_monitoring_details" VARCHAR NOT NULL, PRIMARY KEY ("behaviour_monitoring_id"), FOREIGN KEY (student_id) REFERENCES cre_Students_Information_Systems_Students (student_id) );
CREATE TABLE cre_Students_Information_Systems_Addresses( "address_id" INTEGER NOT NULL, "address_details" VARCHAR NOT NULL, PRIMARY KEY ("address_id") );
CREATE TABLE cre_Students_Information_Systems_Ref_Event_Types( "event_type_code" VARCHAR NOT NULL, "event_type_description" VARCHAR NOT NULL, PRIMARY KEY ("event_type_code") );
CREATE TABLE cre_Students_Information_Systems_Ref_Achievement_Type( "achievement_type_code" VARCHAR NOT NULL, "achievement_type_description" VARCHAR, PRIMARY KEY ("achievement_type_code") );
CREATE TABLE cre_Students_Information_Systems_Ref_Address_Types( "address_type_code" VARCHAR NOT NULL, "address_type_description" VARCHAR NOT NULL, PRIMARY KEY ("address_type_code") );
CREATE TABLE cre_Students_Information_Systems_Ref_Detention_Type( "detention_type_code" VARCHAR NOT NULL, "detention_type_description" VARCHAR, PRIMARY KEY ("detention_type_code") );
CREATE TABLE cre_Students_Information_Systems_Student_Events( "event_id" INTEGER NOT NULL, "event_type_code" VARCHAR NOT NULL, "student_id" INTEGER NOT NULL, "event_date" DATETIME(3), "other_details" VARCHAR NOT NULL, PRIMARY KEY ("event_id"), FOREIGN KEY (student_id) REFERENCES cre_Students_Information_Systems_Students (student_id), FOREIGN KEY (event_type_code) REFERENCES cre_Students_Information_Systems_Ref_Event_Types (event_type_code) );
CREATE TABLE cre_Students_Information_Systems_Teachers( "teacher_id" INTEGER NOT NULL, "teacher_details" VARCHAR, PRIMARY KEY ("teacher_id") );
CREATE TABLE cre_Students_Information_Systems_Student_Loans( "student_loan_id" INTEGER NOT NULL, "student_id" INTEGER NOT NULL, "date_of_loan" DATETIME(3), "amount_of_loan" DECIMAL(15,4), "other_details" VARCHAR, PRIMARY KEY ("student_loan_id"), FOREIGN KEY (student_id) REFERENCES cre_Students_Information_Systems_Students (student_id) );
CREATE TABLE cre_Students_Information_Systems_Classes( "class_id" INTEGER NOT NULL, "student_id" INTEGER NOT NULL, "teacher_id" INTEGER NOT NULL, "class_details" VARCHAR NOT NULL, PRIMARY KEY ("class_id"), FOREIGN KEY (student_id) REFERENCES cre_Students_Information_Systems_Students (student_id), FOREIGN KEY (teacher_id) REFERENCES cre_Students_Information_Systems_Teachers (teacher_id) );
CREATE TABLE cre_Students_Information_Systems_Students_Addresses( "student_address_id" INTEGER NOT NULL, "address_id" INTEGER NOT NULL, "address_type_code" VARCHAR NOT NULL, "student_id" INTEGER NOT NULL, "date_from" DATETIME(3), "date_to" DATETIME(3), PRIMARY KEY ("student_address_id"), FOREIGN KEY (student_id) REFERENCES cre_Students_Information_Systems_Students (student_id), FOREIGN KEY (address_id) REFERENCES cre_Students_Information_Systems_Addresses (address_id), FOREIGN KEY (address_type_code) REFERENCES cre_Students_Information_Systems_Ref_Address_Types (address_type_code) );
CREATE TABLE cre_Students_Information_Systems_Detention( "detention_id" INTEGER NOT NULL, "detention_type_code" VARCHAR NOT NULL, "student_id" INTEGER NOT NULL, "datetime_detention_start" DATETIME(3), "datetime_detention_end" DATETIME(3), "detention_summary" VARCHAR, "other_details" VARCHAR, PRIMARY KEY ("detention_id"), FOREIGN KEY (student_id) REFERENCES cre_Students_Information_Systems_Students (student_id), FOREIGN KEY (detention_type_code) REFERENCES cre_Students_Information_Systems_Ref_Detention_Type (detention_type_code) );
CREATE TABLE cre_Students_Information_Systems_Achievements( "achievement_id" INTEGER NOT NULL, "achievement_type_code" VARCHAR NOT NULL, "student_id" INTEGER NOT NULL, "date_achievement" DATETIME(3), "achievement_details" VARCHAR, "other_details" VARCHAR, PRIMARY KEY ("achievement_id"), FOREIGN KEY (student_id) REFERENCES cre_Students_Information_Systems_Students (student_id), FOREIGN KEY (achievement_type_code) REFERENCES cre_Students_Information_Systems_Ref_Achievement_Type (achievement_type_code) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\cre_Theme_park
CREATE TABLE cre_Theme_park_Ref_Hotel_Star_Ratings( star_rating_code VARCHAR NOT NULL, star_rating_description VARCHAR, PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );
CREATE TABLE cre_Theme_park_Locations( Location_ID INTEGER NOT NULL, Location_Name VARCHAR, Address VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Location_ID) );
CREATE TABLE cre_Theme_park_Ref_Attraction_Types( Attraction_Type_Code VARCHAR NOT NULL, Attraction_Type_Description VARCHAR, PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );
CREATE TABLE cre_Theme_park_Visitors( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR, PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) );
CREATE TABLE cre_Theme_park_Features( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR, PRIMARY KEY (Feature_ID) );
CREATE TABLE cre_Theme_park_Hotels( hotel_id INTEGER NOT NULL, star_rating_code VARCHAR NOT NULL, pets_allowed_yn VARCHAR, price_range real, other_hotel_details VARCHAR, PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES cre_Theme_park_Ref_Hotel_Star_Ratings (star_rating_code) );
CREATE TABLE cre_Theme_park_Tourist_Attractions( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code VARCHAR NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR, Name VARCHAR, Description VARCHAR, Opening_Hours VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES cre_Theme_park_Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES cre_Theme_park_Ref_Attraction_Types (Attraction_Type_Code) );
CREATE TABLE cre_Theme_park_Street_Markets( Market_ID INTEGER NOT NULL, Market_Details VARCHAR, PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES cre_Theme_park_Tourist_Attractions (Tourist_Attraction_ID) );
CREATE TABLE cre_Theme_park_Shops( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR, PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES cre_Theme_park_Tourist_Attractions (Tourist_Attraction_ID) );
CREATE TABLE cre_Theme_park_Museums( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR, PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES cre_Theme_park_Tourist_Attractions (Tourist_Attraction_ID) );
CREATE TABLE cre_Theme_park_Royal_Family( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR, PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES cre_Theme_park_Tourist_Attractions (Tourist_Attraction_ID) );
CREATE TABLE cre_Theme_park_Theme_Parks( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR, PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES cre_Theme_park_Tourist_Attractions (Tourist_Attraction_ID) );
CREATE TABLE cre_Theme_park_Visits( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES cre_Theme_park_Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES cre_Theme_park_Visitors (Tourist_ID) );
CREATE TABLE cre_Theme_park_Photos( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR, Description VARCHAR, Filename VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES cre_Theme_park_Tourist_Attractions (Tourist_Attraction_ID) );
CREATE TABLE cre_Theme_park_Staff( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR, Other_Details VARCHAR, PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES cre_Theme_park_Tourist_Attractions (Tourist_Attraction_ID) );
CREATE TABLE cre_Theme_park_Tourist_Attraction_Features( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES cre_Theme_park_Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES cre_Theme_park_Features (Feature_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\csu_1
CREATE TABLE csu_1_Campuses( "Id" INTEGER PRIMARY KEY, "Campus" TEXT, "Location" TEXT, "County" TEXT, "Year" INTEGER );
CREATE TABLE csu_1_csu_fees( "Campus" INTEGER PRIMARY KEY, "Year" INTEGER, "CampusFee" INTEGER, FOREIGN KEY (Campus) REFERENCES csu_1_Campuses (Id) );
CREATE TABLE csu_1_degrees( "Year" INTEGER, "Campus" INTEGER, "Degrees" INTEGER, PRIMARY KEY (Year, Campus), FOREIGN KEY (Campus) REFERENCES csu_1_Campuses (Id) );
CREATE TABLE csu_1_discipline_enrollments( "Campus" INTEGER, "Discipline" INTEGER, "Year" INTEGER, "Undergraduate" INTEGER, "Graduate" INTEGER, PRIMARY KEY (Campus, Discipline), FOREIGN KEY (Campus) REFERENCES csu_1_Campuses (Id) );
CREATE TABLE csu_1_enrollments( "Campus" INTEGER, "Year" INTEGER, "TotalEnrollment_AY" INTEGER, "FTE_AY" INTEGER, PRIMARY KEY(Campus, Year), FOREIGN KEY (Campus) REFERENCES csu_1_Campuses (Id) );
CREATE TABLE csu_1_faculty( "Campus" INTEGER, "Year" INTEGER, "Faculty" REAL, FOREIGN KEY (Campus) REFERENCES csu_1_Campuses (Id) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\culture_company
CREATE TABLE culture_company_book_club( "book_club_id" int, "Year" int, "Author_or_Editor" text, "Book_Title" text, "Publisher" text, "Category" text, "Result" text, PRIMARY KEY ("book_club_id") );
CREATE TABLE culture_company_movie( "movie_id" int, "Title" text, "Year" int, "Director" text, "Budget_million" real, "Gross_worldwide" int, PRIMARY KEY("movie_id") );
CREATE TABLE culture_company_culture_company( "Company_name" text, "Type" text, "Incorporated_in" text, "Group_Equity_Shareholding" real, "book_club_id" int, "movie_id" int, PRIMARY KEY("Company_name"), FOREIGN KEY ("book_club_id") REFERENCES culture_company_book_club ("book_club_id"), FOREIGN KEY ("movie_id") REFERENCES culture_company_movie ("movie_id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\customers_and_addresses
CREATE TABLE customers_and_addresses_Addresses( "address_id" INTEGER PRIMARY KEY, "address_content" VARCHAR, "city" VARCHAR, "zip_postcode" VARCHAR, "state_province_county" VARCHAR, "country" VARCHAR, "other_address_details" VARCHAR );
CREATE TABLE customers_and_addresses_Products( "product_id" INTEGER PRIMARY KEY, "product_details" VARCHAR );
CREATE TABLE customers_and_addresses_Customers( "customer_id" INTEGER PRIMARY KEY, "payment_method" VARCHAR NOT NULL, "customer_name" VARCHAR, "date_became_customer" DATETIME, "other_customer_details" VARCHAR );
CREATE TABLE customers_and_addresses_Customer_Addresses( "customer_id" INTEGER NOT NULL, "address_id" INTEGER NOT NULL, "date_address_from" DATETIME NOT NULL, "address_type" VARCHAR NOT NULL, "date_address_to" DATETIME, FOREIGN KEY ("address_id" ) REFERENCES customers_and_addresses_Addresses ("address_id" ), FOREIGN KEY ("customer_id" ) REFERENCES customers_and_addresses_Customers ("customer_id" ) );
CREATE TABLE customers_and_addresses_Customer_Contact_Channels( "customer_id" INTEGER NOT NULL, "channel_code" VARCHAR NOT NULL, "active_from_date" DATETIME NOT NULL, "active_to_date" DATETIME, "contact_number" VARCHAR NOT NULL, FOREIGN KEY ("customer_id" ) REFERENCES customers_and_addresses_Customers ("customer_id" ) );
CREATE TABLE customers_and_addresses_Customer_Orders( "order_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "order_status" VARCHAR NOT NULL, "order_date" DATETIME, "order_details" VARCHAR, FOREIGN KEY ("customer_id" ) REFERENCES customers_and_addresses_Customers ("customer_id" ) );
CREATE TABLE customers_and_addresses_Order_Items( "order_id" INTEGER NOT NULL, "product_id" INTEGER NOT NULL, "order_quantity" VARCHAR, FOREIGN KEY ("product_id" ) REFERENCES customers_and_addresses_Products ("product_id" ), FOREIGN KEY ("order_id" ) REFERENCES customers_and_addresses_Customer_Orders ("order_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\customers_and_invoices
CREATE TABLE customers_and_invoices_Customers( "customer_id" INTEGER PRIMARY KEY, "customer_first_name" VARCHAR, "customer_middle_initial" VARCHAR, "customer_last_name" VARCHAR, "gender" VARCHAR, "email_address" VARCHAR, "login_name" VARCHAR, "login_password" VARCHAR, "phone_number" VARCHAR, "town_city" VARCHAR, "state_county_province" VARCHAR, "country" VARCHAR );
CREATE TABLE customers_and_invoices_Orders( "order_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "date_order_placed" DATETIME NOT NULL, "order_details" VARCHAR, FOREIGN KEY ("customer_id" ) REFERENCES customers_and_invoices_Customers ("customer_id" ) );
CREATE TABLE customers_and_invoices_Invoices( "invoice_number" INTEGER PRIMARY KEY, "order_id" INTEGER NOT NULL, "invoice_date" DATETIME, FOREIGN KEY ("order_id" ) REFERENCES customers_and_invoices_Orders ("order_id" ) );
CREATE TABLE customers_and_invoices_Accounts( "account_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "date_account_opened" DATETIME, "account_name" VARCHAR, "other_account_details" VARCHAR, FOREIGN KEY ("customer_id" ) REFERENCES customers_and_invoices_Customers ("customer_id" ) );
CREATE TABLE customers_and_invoices_Product_Categories( "production_type_code" VARCHAR PRIMARY KEY, "product_type_description" VARCHAR, "vat_rating" DECIMAL(19,4) );
CREATE TABLE customers_and_invoices_Products( "product_id" INTEGER PRIMARY KEY, "parent_product_id" INTEGER, "production_type_code" VARCHAR NOT NULL, "unit_price" DECIMAL(19,4), "product_name" VARCHAR, "product_color" VARCHAR, "product_size" VARCHAR, FOREIGN KEY ("production_type_code" ) REFERENCES customers_and_invoices_Product_Categories ("production_type_code" ) );
CREATE TABLE customers_and_invoices_Financial_Transactions( "transaction_id" INTEGER NOT NULL , "account_id" INTEGER NOT NULL, "invoice_number" INTEGER, "transaction_type" VARCHAR NOT NULL, "transaction_date" DATETIME, "transaction_amount" DECIMAL(19,4), "transaction_comment" VARCHAR, "other_transaction_details" VARCHAR, FOREIGN KEY ("invoice_number" ) REFERENCES customers_and_invoices_Invoices ("invoice_number" ), FOREIGN KEY ("account_id" ) REFERENCES customers_and_invoices_Accounts ("account_id" ) );
CREATE TABLE customers_and_invoices_Order_Items( "order_item_id" INTEGER PRIMARY KEY, "order_id" INTEGER NOT NULL, "product_id" INTEGER NOT NULL, "product_quantity" VARCHAR, "other_order_item_details" VARCHAR, FOREIGN KEY ("product_id" ) REFERENCES customers_and_invoices_Products ("product_id" ), FOREIGN KEY ("order_id" ) REFERENCES customers_and_invoices_Orders ("order_id" ) );
CREATE TABLE customers_and_invoices_Invoice_Line_Items( "order_item_id" INTEGER NOT NULL, "invoice_number" INTEGER NOT NULL, "product_id" INTEGER NOT NULL, "product_title" VARCHAR, "product_quantity" VARCHAR, "product_price" DECIMAL(19,4), "derived_product_cost" DECIMAL(19,4), "derived_vat_payable" DECIMAL(19,4), "derived_total_cost" DECIMAL(19,4), FOREIGN KEY ("order_item_id" ) REFERENCES customers_and_invoices_Order_Items ("order_item_id" ), FOREIGN KEY ("invoice_number" ) REFERENCES customers_and_invoices_Invoices ("invoice_number" ), FOREIGN KEY ("product_id" ) REFERENCES customers_and_invoices_Products ("product_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\customers_and_orders
CREATE TABLE customers_and_orders_Products( "product_id" INTEGER PRIMARY KEY, "product_type_code" VARCHAR, "product_name" VARCHAR, "product_price" DOUBLE NULL );
CREATE TABLE customers_and_orders_Addresses( "address_id" INTEGER PRIMARY KEY, "address_details" VARCHAR );
CREATE TABLE customers_and_orders_Customers( "customer_id" INTEGER PRIMARY KEY, "address_id" INTEGER NOT NULL, "payment_method_code" VARCHAR, "customer_number" VARCHAR, "customer_name" VARCHAR, "customer_address" VARCHAR, "customer_phone" VARCHAR, "customer_email" VARCHAR );
CREATE TABLE customers_and_orders_Customer_Orders( "order_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "order_date" DATETIME NOT NULL, "order_status_code" VARCHAR, FOREIGN KEY ("customer_id" ) REFERENCES customers_and_orders_Customers ("customer_id" ) );
CREATE TABLE customers_and_orders_Order_Items( "order_item_id" INTEGER NOT NULL , "order_id" INTEGER NOT NULL, "product_id" INTEGER NOT NULL, "order_quantity" VARCHAR, FOREIGN KEY ("order_id" ) REFERENCES customers_and_orders_Customer_Orders ("order_id" ), FOREIGN KEY ("product_id" ) REFERENCES customers_and_orders_Products ("product_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\customers_and_products_contacts
CREATE TABLE customers_and_products_contacts_Addresses( "address_id" INTEGER PRIMARY KEY, "line_1_number_building" VARCHAR, "city" VARCHAR, "zip_postcode" VARCHAR, "state_province_county" VARCHAR, "country" VARCHAR );
CREATE TABLE customers_and_products_contacts_Products( "product_id" INTEGER PRIMARY KEY, "product_type_code" VARCHAR, "product_name" VARCHAR, "product_price" DOUBLE NULL );
CREATE TABLE customers_and_products_contacts_Customers( "customer_id" INTEGER PRIMARY KEY, "payment_method_code" VARCHAR, "customer_number" VARCHAR, "customer_name" VARCHAR, "customer_address" VARCHAR, "customer_phone" VARCHAR, "customer_email" VARCHAR );
CREATE TABLE customers_and_products_contacts_Contacts( "contact_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "gender" VARCHAR, "first_name" VARCHAR, "last_name" VARCHAR, "contact_phone" VARCHAR );
CREATE TABLE customers_and_products_contacts_Customer_Address_History( "customer_id" INTEGER NOT NULL, "address_id" INTEGER NOT NULL, "date_from" DATETIME NOT NULL, "date_to" DATETIME, FOREIGN KEY ("customer_id" ) REFERENCES customers_and_products_contacts_Customers ("customer_id" ), FOREIGN KEY ("address_id" ) REFERENCES customers_and_products_contacts_Addresses ("address_id" ) );
CREATE TABLE customers_and_products_contacts_Customer_Orders( "order_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "order_date" DATETIME NOT NULL, "order_status_code" VARCHAR, FOREIGN KEY ("customer_id" ) REFERENCES customers_and_products_contacts_Customers ("customer_id" ) );
CREATE TABLE customers_and_products_contacts_Order_Items( "order_item_id" INTEGER NOT NULL , "order_id" INTEGER NOT NULL, "product_id" INTEGER NOT NULL, "order_quantity" VARCHAR, FOREIGN KEY ("product_id" ) REFERENCES customers_and_products_contacts_Products ("product_id" ), FOREIGN KEY ("order_id" ) REFERENCES customers_and_products_contacts_Customer_Orders ("order_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\customers_campaigns_ecommerce
CREATE TABLE customers_campaigns_ecommerce_Premises( "premise_id" INTEGER PRIMARY KEY, "premises_type" VARCHAR NOT NULL, "premise_details" VARCHAR );
CREATE TABLE customers_campaigns_ecommerce_Products( "product_id" INTEGER PRIMARY KEY, "product_category" VARCHAR NOT NULL, "product_name" VARCHAR );
CREATE TABLE customers_campaigns_ecommerce_Customers( "customer_id" INTEGER PRIMARY KEY, "payment_method" VARCHAR NOT NULL, "customer_name" VARCHAR, "customer_phone" VARCHAR, "customer_email" VARCHAR, "customer_address" VARCHAR, "customer_login" VARCHAR, "customer_password" VARCHAR );
CREATE TABLE customers_campaigns_ecommerce_Mailshot_Campaigns( "mailshot_id" INTEGER PRIMARY KEY, "product_category" VARCHAR, "mailshot_name" VARCHAR, "mailshot_start_date" DATETIME, "mailshot_end_date" DATETIME );
CREATE TABLE customers_campaigns_ecommerce_Customer_Addresses( "customer_id" INTEGER NOT NULL, "premise_id" INTEGER NOT NULL, "date_address_from" DATETIME NOT NULL, "address_type_code" VARCHAR NOT NULL, "date_address_to" DATETIME, FOREIGN KEY ("premise_id" ) REFERENCES customers_campaigns_ecommerce_Premises ("premise_id" ), FOREIGN KEY ("customer_id" ) REFERENCES customers_campaigns_ecommerce_Customers ("customer_id" ) );
CREATE TABLE customers_campaigns_ecommerce_Customer_Orders( "order_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "order_status_code" VARCHAR NOT NULL, "shipping_method_code" VARCHAR NOT NULL, "order_placed_datetime" DATETIME NOT NULL, "order_delivered_datetime" DATETIME, "order_shipping_charges" VARCHAR, FOREIGN KEY ("customer_id" ) REFERENCES customers_campaigns_ecommerce_Customers ("customer_id" ) );
CREATE TABLE customers_campaigns_ecommerce_Mailshot_Customers( "mailshot_id" INTEGER NOT NULL, "customer_id" INTEGER NOT NULL, "outcome_code" VARCHAR NOT NULL, "mailshot_customer_date" DATETIME, FOREIGN KEY ("customer_id" ) REFERENCES customers_campaigns_ecommerce_Customers ("customer_id" ), FOREIGN KEY ("mailshot_id" ) REFERENCES customers_campaigns_ecommerce_Mailshot_Campaigns ("mailshot_id" ) );
CREATE TABLE customers_campaigns_ecommerce_Order_Items( "item_id" INTEGER NOT NULL , "order_item_status_code" VARCHAR NOT NULL, "order_id" INTEGER NOT NULL, "product_id" INTEGER NOT NULL, "item_status_code" VARCHAR, "item_delivered_datetime" DATETIME, "item_order_quantity" VARCHAR, FOREIGN KEY ("product_id" ) REFERENCES customers_campaigns_ecommerce_Products ("product_id" ), FOREIGN KEY ("order_id" ) REFERENCES customers_campaigns_ecommerce_Customer_Orders ("order_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\customers_card_transactions
CREATE TABLE customers_card_transactions_Accounts( "account_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "account_name" VARCHAR, "other_account_details" VARCHAR );
CREATE TABLE customers_card_transactions_Customers( "customer_id" INTEGER PRIMARY KEY, "customer_first_name" VARCHAR, "customer_last_name" VARCHAR, "customer_address" VARCHAR, "customer_phone" VARCHAR, "customer_email" VARCHAR, "other_customer_details" VARCHAR );
CREATE TABLE customers_card_transactions_Customers_Cards( "card_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "card_type_code" VARCHAR NOT NULL, "card_number" VARCHAR, "date_valid_from" DATETIME, "date_valid_to" DATETIME, "other_card_details" VARCHAR );
CREATE TABLE customers_card_transactions_Financial_Transactions( "transaction_id" INTEGER NOT NULL , "previous_transaction_id" INTEGER, "account_id" INTEGER NOT NULL, "card_id" INTEGER NOT NULL, "transaction_type" VARCHAR NOT NULL, "transaction_date" DATETIME, "transaction_amount" DOUBLE NULL, "transaction_comment" VARCHAR, "other_transaction_details" VARCHAR, FOREIGN KEY ("card_id" ) REFERENCES customers_card_transactions_Customers_Cards ("card_id" ), FOREIGN KEY ("account_id" ) REFERENCES customers_card_transactions_Accounts ("account_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\customer_complaints
CREATE TABLE customer_complaints_Staff( "staff_id" INTEGER PRIMARY KEY, "gender" VARCHAR, "first_name" VARCHAR, "last_name" VARCHAR, "email_address" VARCHAR, "phone_number" VARCHAR );
CREATE TABLE customer_complaints_Customers( "customer_id" INTEGER PRIMARY KEY, "customer_type_code" VARCHAR NOT NULL, "address_line_1" VARCHAR, "address_line_2" VARCHAR, "town_city" VARCHAR, "state" VARCHAR, "email_address" VARCHAR, "phone_number" VARCHAR );
CREATE TABLE customer_complaints_Products( "product_id" INTEGER PRIMARY KEY, "parent_product_id" INTEGER, "product_category_code" VARCHAR NOT NULL, "date_product_first_available" DATETIME, "date_product_discontinued" DATETIME, "product_name" VARCHAR, "product_description" VARCHAR, "product_price" DECIMAL(19,4) );
CREATE TABLE customer_complaints_Complaints( "complaint_id" INTEGER NOT NULL , "product_id" INTEGER NOT NULL, "customer_id" INTEGER NOT NULL, "complaint_outcome_code" VARCHAR NOT NULL, "complaint_status_code" VARCHAR NOT NULL, "complaint_type_code" VARCHAR NOT NULL, "date_complaint_raised" DATETIME, "date_complaint_closed" DATETIME, "staff_id" INTEGER NOT NULL , FOREIGN KEY ("staff_id" ) REFERENCES customer_complaints_Staff ("staff_id" ), FOREIGN KEY ("product_id" ) REFERENCES customer_complaints_Products ("product_id" ), FOREIGN KEY ("customer_id" ) REFERENCES customer_complaints_Customers ("customer_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\customer_deliveries
CREATE TABLE customer_deliveries_Products( "product_id" INTEGER PRIMARY KEY, "product_name" VARCHAR, "product_price" DECIMAL(19,4), "product_description" VARCHAR );
CREATE TABLE customer_deliveries_Addresses( "address_id" INTEGER PRIMARY KEY, "address_details" VARCHAR, "city" VARCHAR, "zip_postcode" VARCHAR, "state_province_county" VARCHAR, "country" VARCHAR );
CREATE TABLE customer_deliveries_Customers( "customer_id" INTEGER PRIMARY KEY, "payment_method" VARCHAR NOT NULL, "customer_name" VARCHAR, "customer_phone" VARCHAR, "customer_email" VARCHAR, "date_became_customer" DATETIME );
CREATE TABLE customer_deliveries_Regular_Orders( "regular_order_id" INTEGER PRIMARY KEY, "distributer_id" INTEGER NOT NULL, FOREIGN KEY ("distributer_id" ) REFERENCES customer_deliveries_Customers ("customer_id" ) );
CREATE TABLE customer_deliveries_Regular_Order_Products( "regular_order_id" INTEGER NOT NULL, "product_id" INTEGER NOT NULL, FOREIGN KEY ("product_id" ) REFERENCES customer_deliveries_Products ("product_id" ), FOREIGN KEY ("regular_order_id" ) REFERENCES customer_deliveries_Regular_Orders ("regular_order_id" ) );
CREATE TABLE customer_deliveries_Actual_Orders( "actual_order_id" INTEGER PRIMARY KEY, "order_status_code" VARCHAR NOT NULL, "regular_order_id" INTEGER NOT NULL, "actual_order_date" DATETIME, FOREIGN KEY ("regular_order_id" ) REFERENCES customer_deliveries_Regular_Orders ("regular_order_id" ) );
CREATE TABLE customer_deliveries_Actual_Order_Products( "actual_order_id" INTEGER NOT NULL, "product_id" INTEGER NOT NULL, FOREIGN KEY ("product_id" ) REFERENCES customer_deliveries_Products ("product_id" ), FOREIGN KEY ("actual_order_id" ) REFERENCES customer_deliveries_Actual_Orders ("actual_order_id" ) );
CREATE TABLE customer_deliveries_Customer_Addresses( "customer_id" INTEGER NOT NULL, "address_id" INTEGER NOT NULL, "date_from" DATETIME NOT NULL, "address_type" VARCHAR NOT NULL, "date_to" DATETIME, FOREIGN KEY ("customer_id" ) REFERENCES customer_deliveries_Customers ("customer_id" ), FOREIGN KEY ("address_id" ) REFERENCES customer_deliveries_Addresses ("address_id" ) );
CREATE TABLE customer_deliveries_Delivery_Routes( "route_id" INTEGER PRIMARY KEY, "route_name" VARCHAR, "other_route_details" VARCHAR );
CREATE TABLE customer_deliveries_Delivery_Route_Locations( "location_code" VARCHAR PRIMARY KEY, "route_id" INTEGER NOT NULL, "location_address_id" INTEGER NOT NULL, "location_name" VARCHAR, FOREIGN KEY ("location_address_id" ) REFERENCES customer_deliveries_Addresses ("address_id" ), FOREIGN KEY ("route_id" ) REFERENCES customer_deliveries_Delivery_Routes ("route_id" ) );
CREATE TABLE customer_deliveries_Trucks( "truck_id" INTEGER PRIMARY KEY, "truck_licence_number" VARCHAR, "truck_details" VARCHAR );
CREATE TABLE customer_deliveries_Employees( "employee_id" INTEGER PRIMARY KEY, "employee_address_id" INTEGER NOT NULL, "employee_name" VARCHAR, "employee_phone" VARCHAR, FOREIGN KEY ("employee_address_id" ) REFERENCES customer_deliveries_Addresses ("address_id" ) );
CREATE TABLE customer_deliveries_Order_Deliveries( "location_code" VARCHAR NOT NULL, "actual_order_id" INTEGER NOT NULL, "delivery_status_code" VARCHAR NOT NULL, "driver_employee_id" INTEGER NOT NULL, "truck_id" INTEGER NOT NULL, "delivery_date" DATETIME, FOREIGN KEY ("truck_id" ) REFERENCES customer_deliveries_Trucks ("truck_id" ), FOREIGN KEY ("actual_order_id" ) REFERENCES customer_deliveries_Actual_Orders ("actual_order_id" ), FOREIGN KEY ("location_code" ) REFERENCES customer_deliveries_Delivery_Route_Locations ("location_code" ), FOREIGN KEY ("driver_employee_id" ) REFERENCES customer_deliveries_Employees ("employee_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\debate
CREATE TABLE debate_people( "People_ID" int, "District" text, "Name" text, "Party" text, "Age" int, PRIMARY KEY ("People_ID") );
CREATE TABLE debate_debate( "Debate_ID" int, "Date" text, "Venue" text, "Num_of_Audience" int, PRIMARY KEY ("Debate_ID") );
CREATE TABLE debate_debate_people( "Debate_ID" int, "Affirmative" int, "Negative" int, "If_Affirmative_Win" bool, PRIMARY KEY ("Debate_ID","Affirmative","Negative"), FOREIGN KEY ("Debate_ID") REFERENCES debate_debate ("Debate_ID"), FOREIGN KEY ("Affirmative") REFERENCES debate_people ("People_ID"), FOREIGN KEY ("Negative") REFERENCES debate_people ("People_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\decoration_competition
CREATE TABLE decoration_competition_college( "College_ID" int, "Name" text, "Leader_Name" text, "College_Location" text, PRIMARY KEY ("College_ID") );
CREATE TABLE decoration_competition_member( "Member_ID" int, "Name" text, "Country" text, "College_ID" int, PRIMARY KEY ("Member_ID"), FOREIGN KEY ("College_ID") REFERENCES decoration_competition_college ("College_ID") );
CREATE TABLE decoration_competition_round( "Round_ID" int, "Member_ID" int, "Decoration_Theme" text, "Rank_in_Round" int, PRIMARY KEY ("Member_ID","Round_ID"), FOREIGN KEY ("Member_ID") REFERENCES decoration_competition_member ("Member_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\department_management
CREATE TABLE department_management_department( "Department_ID" int, "Name" text, "Creation" text, "Ranking" int, "Budget_in_Billions" real, "Num_Employees" real, PRIMARY KEY ("Department_ID") );
CREATE TABLE department_management_head( "head_ID" int, "name" text, "born_state" text, "age" real, PRIMARY KEY ("head_ID") );
CREATE TABLE department_management_management( "department_ID" int, "head_ID" int, "temporary_acting" text, PRIMARY KEY ("Department_ID","head_ID"), FOREIGN KEY ("Department_ID") REFERENCES department_management_department ("Department_ID"), FOREIGN KEY ("head_ID") REFERENCES department_management_head ("head_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\department_store
CREATE TABLE department_store_Addresses( "address_id" INTEGER PRIMARY KEY, "address_details" VARCHAR );
CREATE TABLE department_store_Staff( "staff_id" INTEGER PRIMARY KEY, "staff_gender" VARCHAR, "staff_name" VARCHAR );
CREATE TABLE department_store_Suppliers( "supplier_id" INTEGER PRIMARY KEY, "supplier_name" VARCHAR, "supplier_phone" VARCHAR );
CREATE TABLE department_store_Department_Store_Chain( "dept_store_chain_id" INTEGER PRIMARY KEY, "dept_store_chain_name" VARCHAR );
CREATE TABLE department_store_Customers( "customer_id" INTEGER PRIMARY KEY, "payment_method_code" VARCHAR NOT NULL, "customer_code" VARCHAR, "customer_name" VARCHAR, "customer_address" VARCHAR, "customer_phone" VARCHAR, "customer_email" VARCHAR );
CREATE TABLE department_store_Products( "product_id" INTEGER PRIMARY KEY, "product_type_code" VARCHAR NOT NULL, "product_name" VARCHAR, "product_price" DECIMAL(19,4) );
CREATE TABLE department_store_Supplier_Addresses( "supplier_id" INTEGER NOT NULL, "address_id" INTEGER NOT NULL, "date_from" DATETIME NOT NULL, "date_to" DATETIME, PRIMARY KEY ("supplier_id", "address_id"), FOREIGN KEY ("address_id" ) REFERENCES department_store_Addresses ("address_id" ), FOREIGN KEY ("supplier_id" ) REFERENCES department_store_Suppliers ("supplier_id" ) );
CREATE TABLE department_store_Customer_Addresses( "customer_id" INTEGER NOT NULL, "address_id" INTEGER NOT NULL, "date_from" DATETIME NOT NULL, "date_to" DATETIME, PRIMARY KEY ("customer_id", "address_id"), FOREIGN KEY ("address_id" ) REFERENCES department_store_Addresses ("address_id" ), FOREIGN KEY ("customer_id" ) REFERENCES department_store_Customers ("customer_id" ) );
CREATE TABLE department_store_Customer_Orders( "order_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "order_status_code" VARCHAR NOT NULL, "order_date" DATETIME NOT NULL, FOREIGN KEY ("customer_id" ) REFERENCES department_store_Customers ("customer_id" ) );
CREATE TABLE department_store_Department_Stores( "dept_store_id" INTEGER PRIMARY KEY, "dept_store_chain_id" INTEGER, "store_name" VARCHAR, "store_address" VARCHAR, "store_phone" VARCHAR, "store_email" VARCHAR, FOREIGN KEY ("dept_store_chain_id" ) REFERENCES department_store_Department_Store_Chain ("dept_store_chain_id" ) );
CREATE TABLE department_store_Departments( "department_id" INTEGER PRIMARY KEY, "dept_store_id" INTEGER NOT NULL, "department_name" VARCHAR, FOREIGN KEY ("dept_store_id" ) REFERENCES department_store_Department_Stores ("dept_store_id" ) );
CREATE TABLE department_store_Order_Items( "order_item_id" INTEGER PRIMARY KEY, "order_id" INTEGER NOT NULL, "product_id" INTEGER NOT NULL, FOREIGN KEY ("order_id" ) REFERENCES department_store_Customer_Orders ("order_id" ), FOREIGN KEY ("product_id" ) REFERENCES department_store_Products ("product_id" ) );
CREATE TABLE department_store_Product_Suppliers( "product_id" INTEGER NOT NULL, "supplier_id" INTEGER NOT NULL, "date_supplied_from" DATETIME NOT NULL, "date_supplied_to" DATETIME, "total_amount_purchased" VARCHAR, "total_value_purchased" DECIMAL(19,4), PRIMARY KEY ("product_id", "supplier_id"), FOREIGN KEY ("supplier_id" ) REFERENCES department_store_Suppliers ("supplier_id" ), FOREIGN KEY ("product_id" ) REFERENCES department_store_Products ("product_id" ) );
CREATE TABLE department_store_Staff_Department_Assignments( "staff_id" INTEGER NOT NULL, "department_id" INTEGER NOT NULL, "date_assigned_from" DATETIME NOT NULL, "job_title_code" VARCHAR NOT NULL, "date_assigned_to" DATETIME, PRIMARY KEY ("staff_id", "department_id"), FOREIGN KEY ("department_id" ) REFERENCES department_store_Departments ("department_id" ), FOREIGN KEY ("staff_id" ) REFERENCES department_store_Staff ("staff_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\device
CREATE TABLE device_device( "Device_ID" int, "Device" text, "Carrier" text, "Package_Version" text, "Applications" text, "Software_Platform" text, PRIMARY KEY ("Device_ID") );
CREATE TABLE device_shop( "Shop_ID" int, "Shop_Name" text, "Location" text, "Open_Date" text, "Open_Year" int, PRIMARY KEY ("Shop_ID") );
CREATE TABLE device_stock( "Shop_ID" int, "Device_ID" int, "Quantity" int, PRIMARY KEY ("Shop_ID","Device_ID"), FOREIGN KEY ("Shop_ID") REFERENCES device_shop ("Shop_ID"), FOREIGN KEY ("Device_ID") REFERENCES device_device ("Device_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\district_spokesman
CREATE TABLE district_spokesman_district( "District_ID" int, "Name" text, "Area_km" real, "Population" real, "Density_km" real, "Government_website" text, PRIMARY KEY ("District_ID") );
CREATE TABLE district_spokesman_spokesman( "Spokesman_ID" int, "Name" text, "Age" int, "Speach_title" text, "Rank_position" real, "Points" real, PRIMARY KEY ("Spokesman_ID") );
CREATE TABLE district_spokesman_spokesman_district( "Spokesman_ID" int, "District_ID" int, "Start_year" text, PRIMARY KEY ("Spokesman_ID"), FOREIGN KEY ("Spokesman_ID") REFERENCES district_spokesman_spokesman ("Spokesman_ID"), FOREIGN KEY ("District_ID") REFERENCES district_spokesman_district ("District_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\document_management
CREATE TABLE document_management_Roles( "role_code" VARCHAR PRIMARY KEY, "role_description" VARCHAR );
CREATE TABLE document_management_Users( "user_id" INTEGER PRIMARY KEY, "role_code" VARCHAR NOT NULL, "user_name" VARCHAR, "user_login" VARCHAR, "password" VARCHAR, FOREIGN KEY ("role_code" ) REFERENCES document_management_Roles ("role_code" ) );
CREATE TABLE document_management_Document_Structures( "document_structure_code" VARCHAR PRIMARY KEY, "parent_document_structure_code" VARCHAR, "document_structure_description" VARCHAR );
CREATE TABLE document_management_Functional_Areas( "functional_area_code" VARCHAR PRIMARY KEY, "parent_functional_area_code" VARCHAR, "functional_area_description" VARCHAR NOT NULL );
CREATE TABLE document_management_Images( "image_id" INTEGER PRIMARY KEY, "image_alt_text" VARCHAR, "image_name" VARCHAR, "image_url" VARCHAR );
CREATE TABLE document_management_Documents( "document_code" VARCHAR PRIMARY KEY, "document_structure_code" VARCHAR NOT NULL, "document_type_code" VARCHAR NOT NULL, "access_count" INTEGER, "document_name" VARCHAR, FOREIGN KEY ("document_structure_code" ) REFERENCES document_management_Document_Structures ("document_structure_code" ) );
CREATE TABLE document_management_Document_Functional_Areas( "document_code" VARCHAR NOT NULL, "functional_area_code" VARCHAR NOT NULL, FOREIGN KEY ("document_code" ) REFERENCES document_management_Documents ("document_code" ), FOREIGN KEY ("functional_area_code" ) REFERENCES document_management_Functional_Areas ("functional_area_code" ) );
CREATE TABLE document_management_Document_Sections( "section_id" INTEGER PRIMARY KEY, "document_code" VARCHAR NOT NULL, "section_sequence" INTEGER, "section_code" VARCHAR, "section_title" VARCHAR, FOREIGN KEY ("document_code" ) REFERENCES document_management_Documents ("document_code" ) );
CREATE TABLE document_management_Document_Sections_Images( "section_id" INTEGER NOT NULL, "image_id" INTEGER NOT NULL, PRIMARY KEY ("section_id","image_id"), FOREIGN KEY ("section_id" ) REFERENCES document_management_Document_Sections ("section_id" ), FOREIGN KEY ("image_id" ) REFERENCES document_management_Images ("image_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\dog_kennels
CREATE TABLE dog_kennels_Breeds( "breed_code" VARCHAR PRIMARY KEY , "breed_name" VARCHAR );
CREATE TABLE dog_kennels_Charges( "charge_id" INTEGER PRIMARY KEY , "charge_type" VARCHAR, "charge_amount" DECIMAL(19,4) );
CREATE TABLE dog_kennels_Sizes( "size_code" VARCHAR PRIMARY KEY , "size_description" VARCHAR );
CREATE TABLE dog_kennels_Treatment_Types( "treatment_type_code" VARCHAR PRIMARY KEY , "treatment_type_description" VARCHAR );
CREATE TABLE dog_kennels_Owners( "owner_id" INTEGER PRIMARY KEY , "first_name" VARCHAR, "last_name" VARCHAR, "street" VARCHAR, "city" VARCHAR, "state" VARCHAR, "zip_code" VARCHAR, "email_address" VARCHAR, "home_phone" VARCHAR, "cell_number" VARCHAR );
CREATE TABLE dog_kennels_Dogs( "dog_id" INTEGER PRIMARY KEY , "owner_id" INTEGER NOT NULL, "abandoned_yn" VARCHAR, "breed_code" VARCHAR NOT NULL, "size_code" VARCHAR NOT NULL, "name" VARCHAR, "age" VARCHAR, "date_of_birth" DATETIME, "gender" VARCHAR, "weight" VARCHAR, "date_arrived" DATETIME, "date_adopted" DATETIME, "date_departed" DATETIME, FOREIGN KEY ("breed_code" ) REFERENCES dog_kennels_Breeds ("breed_code" ), FOREIGN KEY ("size_code" ) REFERENCES dog_kennels_Sizes ("size_code" ), FOREIGN KEY ("owner_id" ) REFERENCES dog_kennels_Owners ("owner_id" ), FOREIGN KEY ("owner_id" ) REFERENCES dog_kennels_Owners ("owner_id" ) );
CREATE TABLE dog_kennels_Professionals( "professional_id" INTEGER PRIMARY KEY , "role_code" VARCHAR NOT NULL, "first_name" VARCHAR, "street" VARCHAR, "city" VARCHAR, "state" VARCHAR, "zip_code" VARCHAR, "last_name" VARCHAR, "email_address" VARCHAR, "home_phone" VARCHAR, "cell_number" VARCHAR );
CREATE TABLE dog_kennels_Treatments( "treatment_id" INTEGER PRIMARY KEY , "dog_id" INTEGER NOT NULL, "professional_id" INTEGER NOT NULL, "treatment_type_code" VARCHAR NOT NULL, "date_of_treatment" DATETIME, "cost_of_treatment" DECIMAL(19,4), FOREIGN KEY ("treatment_type_code" ) REFERENCES dog_kennels_Treatment_Types ("treatment_type_code" ), FOREIGN KEY ("professional_id" ) REFERENCES dog_kennels_Professionals ("professional_id" ), FOREIGN KEY ("dog_id" ) REFERENCES dog_kennels_Dogs ("dog_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\dorm_1
create table dorm_1_Student( StuID INTEGER PRIMARY KEY, LName VARCHAR, Fname VARCHAR, Age INTEGER, Sex VARCHAR, Major INTEGER, Advisor INTEGER, city_code VARCHAR );
create table dorm_1_Dorm( dormid INTEGER UNIQUE, dorm_name VARCHAR, student_capacity INTEGER, gender VARCHAR ) ;
create table dorm_1_Dorm_amenity( amenid INTEGER UNIQUE, amenity_name VARCHAR ) ;
create table dorm_1_Has_amenity( dormid INTEGER, amenid INTEGER, FOREIGN KEY (dormid) REFERENCES dorm_1_Dorm (dormid), FOREIGN KEY (amenid) REFERENCES dorm_1_Dorm_amenity (amenid) );
create table dorm_1_Lives_in( stuid INTEGER, dormid INTEGER, room_number INTEGER, FOREIGN KEY (stuid) REFERENCES dorm_1_Student (StuID), FOREIGN KEY (dormid) REFERENCES dorm_1_Dorm (dormid) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\driving_school
CREATE TABLE driving_school_Addresses( "address_id" INTEGER PRIMARY KEY, "line_1_number_building" VARCHAR, "city" VARCHAR, "zip_postcode" VARCHAR, "state_province_county" VARCHAR, "country" VARCHAR );
CREATE TABLE driving_school_Staff( "staff_id" INTEGER PRIMARY KEY, "staff_address_id" INTEGER NOT NULL, "nickname" VARCHAR, "first_name" VARCHAR, "middle_name" VARCHAR, "last_name" VARCHAR, "date_of_birth" DATETIME, "date_joined_staff" DATETIME, "date_left_staff" DATETIME, FOREIGN KEY ("staff_address_id" ) REFERENCES driving_school_Addresses ("address_id" ) );
CREATE TABLE driving_school_Vehicles( "vehicle_id" INTEGER PRIMARY KEY, "vehicle_details" VARCHAR );
CREATE TABLE driving_school_Customers( "customer_id" INTEGER PRIMARY KEY, "customer_address_id" INTEGER NOT NULL, "customer_status_code" VARCHAR NOT NULL, "date_became_customer" DATETIME, "date_of_birth" DATETIME, "first_name" VARCHAR, "last_name" VARCHAR, "amount_outstanding" DOUBLE NULL, "email_address" VARCHAR, "phone_number" VARCHAR, "cell_mobile_phone_number" VARCHAR, FOREIGN KEY ("customer_address_id" ) REFERENCES driving_school_Addresses ("address_id" ) );
CREATE TABLE driving_school_Customer_Payments( "customer_id" INTEGER NOT NULL, "datetime_payment" DATETIME NOT NULL, "payment_method_code" VARCHAR NOT NULL, "amount_payment" DOUBLE NULL, PRIMARY KEY ("customer_id","datetime_payment"), FOREIGN KEY ("customer_id" ) REFERENCES driving_school_Customers ("customer_id" ) );
CREATE TABLE driving_school_Lessons( "lesson_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "lesson_status_code" VARCHAR NOT NULL, "staff_id" INTEGER, "vehicle_id" INTEGER NOT NULL, "lesson_date" DATETIME, "lesson_time" VARCHAR, "price" DOUBLE NULL, FOREIGN KEY ("vehicle_id" ) REFERENCES driving_school_Vehicles ("vehicle_id" ), FOREIGN KEY ("staff_id" ) REFERENCES driving_school_Staff ("staff_id" ), FOREIGN KEY ("customer_id" ) REFERENCES driving_school_Customers ("customer_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\election
CREATE TABLE election_county( "County_Id" int, "County_name" text, "Population" real, "Zip_code" text, PRIMARY KEY ("County_Id") );
CREATE TABLE election_party( "Party_ID" int, "Year" real, "Party" text, "Governor" text, "Lieutenant_Governor" text, "Comptroller" text, "Attorney_General" text, "US_Senate" text, PRIMARY KEY ("Party_ID") );
CREATE TABLE election_election( "Election_ID" int, "Counties_Represented" text, "District" int, "Delegate" text, "Party" int, "First_Elected" real, "Committee" text, PRIMARY KEY ("Election_ID"), FOREIGN KEY ("Party") REFERENCES election_party ("Party_ID"), FOREIGN KEY ("District") REFERENCES election_county ("County_Id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\election_representative
CREATE TABLE election_representative_representative( "Representative_ID" int, "Name" text, "State" text, "Party" text, "Lifespan" text, PRIMARY KEY ("Representative_ID") );
CREATE TABLE election_representative_election( "Election_ID" int, "Representative_ID" int, "Date" text, "Votes" real, "Vote_Percent" real, "Seats" real, "Place" real, PRIMARY KEY ("Election_ID"), FOREIGN KEY ("Representative_ID") REFERENCES election_representative_representative ("Representative_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\employee_hire_evaluation
CREATE TABLE employee_hire_evaluation_employee( "Employee_ID" int, "Name" text, "Age" int, "City" text, PRIMARY KEY ("Employee_ID") );
CREATE TABLE employee_hire_evaluation_shop( "Shop_ID" int, "Name" text, "Location" text, "District" text, "Number_products" int, "Manager_name" text, PRIMARY KEY ("Shop_ID") );
CREATE TABLE employee_hire_evaluation_hiring( "Shop_ID" int, "Employee_ID" int, "Start_from" text, "Is_full_time" bool, PRIMARY KEY ("Employee_ID"), FOREIGN KEY ("Shop_ID") REFERENCES employee_hire_evaluation_shop ("Shop_ID"), FOREIGN KEY ("Employee_ID") REFERENCES employee_hire_evaluation_employee ("Employee_ID") );
CREATE TABLE employee_hire_evaluation_evaluation( "Employee_ID" int, "Year_awarded" text, "Bonus" real, PRIMARY KEY ("Employee_ID","Year_awarded"), FOREIGN KEY ("Employee_ID") REFERENCES employee_hire_evaluation_employee ("Employee_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\entertainment_awards
CREATE TABLE entertainment_awards_festival_detail( "Festival_ID" int, "Festival_Name" text, "Chair_Name" text, "Location" text, "Year" int, "Num_of_Audience" int, PRIMARY KEY ("Festival_ID") );
CREATE TABLE entertainment_awards_artwork( "Artwork_ID" int, "Type" text, "Name" text, PRIMARY KEY ("Artwork_ID") );
CREATE TABLE entertainment_awards_nomination( "Artwork_ID" int, "Festival_ID" int, "Result" text, PRIMARY KEY ("Artwork_ID","Festival_ID"), FOREIGN KEY ("Artwork_ID") REFERENCES entertainment_awards_artwork ("Artwork_ID"), FOREIGN KEY ("Festival_ID") REFERENCES entertainment_awards_festival_detail ("Festival_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\entrepreneur
CREATE TABLE entrepreneur_people( "People_ID" int, "Name" text, "Height" real, "Weight" real, "Date_of_Birth" text, PRIMARY KEY ("People_ID") );
CREATE TABLE entrepreneur_entrepreneur( "Entrepreneur_ID" int, "People_ID" int, "Company" text, "Money_Requested" real, "Investor" text, PRIMARY KEY ("Entrepreneur_ID"), FOREIGN KEY ("People_ID") REFERENCES entrepreneur_people ("People_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\e_commerce
CREATE TABLE e_commerce_Products( "product_id" INTEGER PRIMARY KEY , "parent_product_id" INTEGER, "product_name" VARCHAR, "product_price" DECIMAL(19,4) DEFAULT 0, "product_color" VARCHAR, "product_size" VARCHAR, "product_description" VARCHAR );
CREATE TABLE e_commerce_Customers( "customer_id" INTEGER PRIMARY KEY, "gender_code" VARCHAR NOT NULL, "customer_first_name" VARCHAR, "customer_middle_initial" VARCHAR, "customer_last_name" VARCHAR, "email_address" VARCHAR, "login_name" VARCHAR, "login_password" VARCHAR, "phone_number" VARCHAR, "address_line_1" VARCHAR, "town_city" VARCHAR, "county" VARCHAR, "country" VARCHAR );
CREATE TABLE e_commerce_Customer_Payment_Methods( "customer_id" INTEGER NOT NULL, "payment_method_code" VARCHAR NOT NULL, FOREIGN KEY ("customer_id" ) REFERENCES e_commerce_Customers ("customer_id" ) );
CREATE TABLE e_commerce_Invoices( "invoice_number" INTEGER PRIMARY KEY, "invoice_status_code" VARCHAR NOT NULL, "invoice_date" DATETIME );
CREATE TABLE e_commerce_Orders( "order_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "order_status_code" VARCHAR NOT NULL, "date_order_placed" DATETIME NOT NULL, FOREIGN KEY ("customer_id" ) REFERENCES e_commerce_Customers ("customer_id" ) );
CREATE TABLE e_commerce_Order_Items( "order_item_id" INTEGER PRIMARY KEY , "product_id" INTEGER NOT NULL, "order_id" INTEGER NOT NULL, "order_item_status_code" VARCHAR NOT NULL, FOREIGN KEY ("product_id" ) REFERENCES e_commerce_Products ("product_id" ), FOREIGN KEY ("order_id" ) REFERENCES e_commerce_Orders ("order_id" ) );
CREATE TABLE e_commerce_Shipments( "shipment_id" INTEGER PRIMARY KEY, "order_id" INTEGER NOT NULL, "invoice_number" INTEGER NOT NULL, "shipment_tracking_number" VARCHAR, "shipment_date" DATETIME, FOREIGN KEY ("invoice_number" ) REFERENCES e_commerce_Invoices ("invoice_number" ), FOREIGN KEY ("order_id" ) REFERENCES e_commerce_Orders ("order_id" ) );
CREATE TABLE e_commerce_Shipment_Items( "shipment_id" INTEGER NOT NULL, "order_item_id" INTEGER NOT NULL, PRIMARY KEY ("shipment_id","order_item_id"), FOREIGN KEY ("shipment_id" ) REFERENCES e_commerce_Shipments ("shipment_id" ), FOREIGN KEY ("order_item_id" ) REFERENCES e_commerce_Order_Items ("order_item_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\e_government
CREATE TABLE e_government_Addresses( "address_id" INTEGER PRIMARY KEY, "line_1_number_building" VARCHAR, "town_city" VARCHAR, "zip_postcode" VARCHAR, "state_province_county" VARCHAR, "country" VARCHAR );
CREATE TABLE e_government_Services( "service_id" INTEGER PRIMARY KEY, "service_type_code" VARCHAR NOT NULL, "service_name" VARCHAR, "service_descriptio" VARCHAR );
CREATE TABLE e_government_Forms( "form_id" INTEGER PRIMARY KEY, "form_type_code" VARCHAR NOT NULL, "service_id" INTEGER, "form_number" VARCHAR, "form_name" VARCHAR, "form_description" VARCHAR, FOREIGN KEY ("service_id" ) REFERENCES e_government_Services ("service_id" ) );
CREATE TABLE e_government_Individuals( "individual_id" INTEGER PRIMARY KEY, "individual_first_name" VARCHAR, "individual_middle_name" VARCHAR, "inidividual_phone" VARCHAR, "individual_email" VARCHAR, "individual_address" VARCHAR, "individual_last_name" VARCHAR );
CREATE TABLE e_government_Organizations( "organization_id" INTEGER PRIMARY KEY, "date_formed" DATETIME, "organization_name" VARCHAR, "uk_vat_number" VARCHAR );
CREATE TABLE e_government_Parties( "party_id" INTEGER PRIMARY KEY, "payment_method_code" VARCHAR NOT NULL, "party_phone" VARCHAR, "party_email" VARCHAR );
CREATE TABLE e_government_Organization_Contact_Individuals( "individual_id" INTEGER NOT NULL, "organization_id" INTEGER NOT NULL, "date_contact_from" DATETIME NOT NULL, "date_contact_to" DATETIME, PRIMARY KEY ("individual_id","organization_id" ), FOREIGN KEY ("organization_id" ) REFERENCES e_government_Organizations ("organization_id" ), FOREIGN KEY ("individual_id" ) REFERENCES e_government_Individuals ("individual_id" ) );
CREATE TABLE e_government_Party_Addresses( "party_id" INTEGER NOT NULL, "address_id" INTEGER NOT NULL, "date_address_from" DATETIME NOT NULL, "address_type_code" VARCHAR NOT NULL, "date_address_to" DATETIME, PRIMARY KEY ("party_id", "address_id"), FOREIGN KEY ("address_id" ) REFERENCES e_government_Addresses ("address_id" ), FOREIGN KEY ("party_id" ) REFERENCES e_government_Parties ("party_id" ) );
CREATE TABLE e_government_Party_Forms( "party_id" INTEGER NOT NULL, "form_id" INTEGER NOT NULL, "date_completion_started" DATETIME NOT NULL, "form_status_code" VARCHAR NOT NULL, "date_fully_completed" DATETIME, PRIMARY KEY ("party_id", "form_id"), FOREIGN KEY ("party_id" ) REFERENCES e_government_Parties ("party_id" ), FOREIGN KEY ("form_id" ) REFERENCES e_government_Forms ("form_id" ) );
CREATE TABLE e_government_Party_Services( "booking_id" INTEGER NOT NULL , "customer_id" INTEGER NOT NULL, "service_id" INTEGER NOT NULL, "service_datetime" DATETIME NOT NULL, "booking_made_date" DATETIME, FOREIGN KEY ("service_id" ) REFERENCES e_government_Services ("service_id" ), FOREIGN KEY ("customer_id" ) REFERENCES e_government_Parties ("party_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\e_learning
CREATE TABLE e_learning_Course_Authors_and_Tutors( "author_id" INTEGER PRIMARY KEY, "author_tutor_ATB" VARCHAR, "login_name" VARCHAR, "password" VARCHAR, "personal_name" VARCHAR, "middle_name" VARCHAR, "family_name" VARCHAR, "gender_mf" VARCHAR, "address_line_1" VARCHAR );
CREATE TABLE e_learning_Students( "student_id" INTEGER PRIMARY KEY, "date_of_registration" DATETIME, "date_of_latest_logon" DATETIME, "login_name" VARCHAR, "password" VARCHAR, "personal_name" VARCHAR, "middle_name" VARCHAR, "family_name" VARCHAR );
CREATE TABLE e_learning_Subjects( "subject_id" INTEGER PRIMARY KEY, "subject_name" VARCHAR );
CREATE TABLE e_learning_Courses( "course_id" INTEGER PRIMARY KEY, "author_id" INTEGER NOT NULL, "subject_id" INTEGER NOT NULL, "course_name" VARCHAR, "course_description" VARCHAR, FOREIGN KEY ("author_id" ) REFERENCES e_learning_Course_Authors_and_Tutors ("author_id" ), FOREIGN KEY ("subject_id" ) REFERENCES e_learning_Subjects ("subject_id" ) );
CREATE TABLE e_learning_Student_Course_Enrolment( "registration_id" INTEGER PRIMARY KEY, "student_id" INTEGER NOT NULL, "course_id" INTEGER NOT NULL, "date_of_enrolment" DATETIME NOT NULL, "date_of_completion" DATETIME NOT NULL, FOREIGN KEY ("course_id" ) REFERENCES e_learning_Courses ("course_id" ), FOREIGN KEY ("student_id" ) REFERENCES e_learning_Students ("student_id" ) );
CREATE TABLE e_learning_Student_Tests_Taken( "registration_id" INTEGER NOT NULL, "date_test_taken" DATETIME NOT NULL, "test_result" VARCHAR, FOREIGN KEY ("registration_id" ) REFERENCES e_learning_Student_Course_Enrolment ("registration_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\farm
CREATE TABLE farm_city( "City_ID" int, "Official_Name" text, "Status" text, "Area_km_2" real, "Population" real, "Census_Ranking" text, PRIMARY KEY ("City_ID") );
CREATE TABLE farm_farm( "Farm_ID" int, "Year" int, "Total_Horses" real, "Working_Horses" real, "Total_Cattle" real, "Oxen" real, "Bulls" real, "Cows" real, "Pigs" real, "Sheep_and_Goats" real, PRIMARY KEY ("Farm_ID") );
CREATE TABLE farm_farm_competition( "Competition_ID" int, "Year" int, "Theme" text, "Host_city_ID" int, "Hosts" text, PRIMARY KEY ("Competition_ID"), FOREIGN KEY ("Host_city_ID") REFERENCES farm_city ("City_ID") );
CREATE TABLE farm_competition_record( "Competition_ID" int, "Farm_ID" int, "Rank" int, PRIMARY KEY ("Competition_ID","Farm_ID"), FOREIGN KEY ("Competition_ID") REFERENCES farm_farm_competition ("Competition_ID"), FOREIGN KEY ("Farm_ID") REFERENCES farm_farm ("Farm_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\film_rank
CREATE TABLE film_rank_film( "Film_ID" int, "Title" text, "Studio" text, "Director" text, "Gross_in_dollar" int, PRIMARY KEY ("Film_ID") );
CREATE TABLE film_rank_market( "Market_ID" int, "Country" text, "Number_cities" int, PRIMARY KEY ("Market_ID") );
CREATE TABLE film_rank_film_market_estimation( "Estimation_ID" int, "Low_Estimate" real, "High_Estimate" real, "Film_ID" int, "Type" text, "Market_ID" int, "Year" int, PRIMARY KEY ("Estimation_ID"), FOREIGN KEY ("Film_ID") REFERENCES film_rank_film ("Film_ID"), FOREIGN KEY ("Market_ID") REFERENCES film_rank_market ("Market_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\flight_1
create table flight_1_aircraft( aid INTEGER primary key, name VARCHAR, distance INTEGER);
create table flight_1_flight( flno INTEGER primary key, origin VARCHAR, destination VARCHAR, distance INTEGER, departure_date date, arrival_date date, price INTEGER, aid INTEGER, foreign key("aid") references flight_1_aircraft ("aid"));
create table flight_1_employee( eid INTEGER primary key, name VARCHAR, salary INTEGER);
create table flight_1_certificate( eid INTEGER, aid INTEGER, primary key(eid,aid), foreign key("eid") references flight_1_employee ("eid"), foreign key("aid") references flight_1_aircraft ("aid"));

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\flight_company
CREATE TABLE flight_company_airport( "id" int, "City" text, "Country" text, "IATA" text, "ICAO" text, "name" text, primary key("id") );
CREATE TABLE flight_company_operate_company( "id" int, "name" text, "Type" text, "Principal_activities" text, "Incorporated_in" text, "Group_Equity_Shareholding" real, primary key ("id") );
CREATE TABLE flight_company_flight( "id" int, "Vehicle_Flight_number" text, "Date" text, "Pilot" text, "Velocity" real, "Altitude" real, "airport_id" int, "company_id" int, primary key ("id"), foreign key ("airport_id") references flight_company_airport ("id"), foreign key ("company_id") references flight_company_operate_company ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\game_1
create table game_1_Student( StuID INTEGER PRIMARY KEY, LName VARCHAR, Fname VARCHAR, Age INTEGER, Sex VARCHAR, Major INTEGER, Advisor INTEGER, city_code VARCHAR );
create table game_1_Video_Games( GameID INTEGER PRIMARY KEY, GName VARCHAR, GType VARCHAR );
create table game_1_Plays_Games( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES game_1_Video_Games (GameID), FOREIGN KEY(StuID) REFERENCES game_1_Student (StuID) );
create table game_1_SportsInfo( StuID INTEGER, SportName VARCHAR, HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR, FOREIGN KEY(StuID) REFERENCES game_1_Student (StuID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\game_injury
CREATE TABLE game_injury_stadium( "id" int, "name" text, "Home_Games" int, "Average_Attendance" real, "Total_Attendance" real, "Capacity_Percentage" real, primary key ("id") );
CREATE TABLE game_injury_game( "stadium_id" int, "id" int, "Season" int, "Date" text, "Home_team" text, "Away_team" text, "Score" text, "Competition" text, primary key ("id"), foreign key ("stadium_id") references game_injury_stadium ("id") );
CREATE TABLE game_injury_injury_accident( "game_id" int, "id" int, "Player" text, "Injury" text, "Number_of_matches" text, "Source" text, primary key ("id"), foreign key ("game_id") references game_injury_game ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\gas_company
CREATE TABLE gas_company_company( "Company_ID" int, "Rank" int, "Company" text, "Headquarters" text, "Main_Industry" text, "Sales_billion" real, "Profits_billion" real, "Assets_billion" real, "Market_Value" real, PRIMARY KEY ("Company_ID") );
CREATE TABLE gas_company_gas_station( "Station_ID" int, "Open_Year" int, "Location" text, "Manager_Name" text, "Vice_Manager_Name" text, "Representative_Name" text, PRIMARY KEY ("Station_ID") );
CREATE TABLE gas_company_station_company( "Station_ID" int, "Company_ID" int, "Rank_of_the_Year" int, PRIMARY KEY ("Station_ID","Company_ID"), FOREIGN KEY ("Station_ID") REFERENCES gas_company_gas_station ("Station_ID"), FOREIGN KEY ("Company_ID") REFERENCES gas_company_company ("Company_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\geo
CREATE TABLE geo_state( "state_name" text , "population" integer , "area" double , "country_name" VARCHAR NOT NULL DEFAULT '' , "capital" text , "density" double , PRIMARY KEY ("state_name") );
CREATE TABLE geo_city( "city_name" text , "population" integer , "country_name" VARCHAR NOT NULL DEFAULT '' , "state_name" text , PRIMARY KEY ("city_name","state_name") , FOREIGN KEY("state_name") REFERENCES geo_state ("state_name") );
CREATE TABLE geo_border_info( "state_name" text , "border" text , PRIMARY KEY ("border","state_name") , FOREIGN KEY("state_name") REFERENCES geo_state ("state_name") , FOREIGN KEY("border") REFERENCES geo_state ("state_name") );
CREATE TABLE geo_highlow( "state_name" text , "highest_elevation" text , "lowest_point" text , "highest_point" text , "lowest_elevation" text , PRIMARY KEY ("state_name") , FOREIGN KEY("state_name") REFERENCES geo_state ("state_name") );
CREATE TABLE geo_lake( "lake_name" text , "area" double , "country_name" VARCHAR NOT NULL DEFAULT '' , "state_name" text );
CREATE TABLE geo_mountain( "mountain_name" text , "mountain_altitude" integer , "country_name" VARCHAR NOT NULL DEFAULT '' , "state_name" text , PRIMARY KEY ("mountain_name", "state_name") , FOREIGN KEY("state_name") REFERENCES geo_state ("state_name") );
CREATE TABLE geo_river( "river_name" text , "length" integer , "country_name" VARCHAR NOT NULL DEFAULT '' , "traverse" text , PRIMARY KEY ("river_name") , FOREIGN KEY("traverse") REFERENCES geo_state ("state_name") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\government_shift
CREATE TABLE government_shift_Services( Service_ID INTEGER NOT NULL, Service_Details VARCHAR, PRIMARY KEY (Service_ID) );
CREATE TABLE government_shift_Customers( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR NOT NULL, PRIMARY KEY (Customer_ID) );
CREATE TABLE government_shift_Channels( Channel_ID INTEGER NOT NULL, Channel_Details VARCHAR NOT NULL, PRIMARY KEY (Channel_ID) );
CREATE TABLE government_shift_Customers_and_Services( Customers_and_Services_ID INTEGER NOT NULL, Customer_ID INTEGER, Service_ID INTEGER, Customers_and_Services_Details VARCHAR NOT NULL, PRIMARY KEY (Customers_and_Services_ID), FOREIGN KEY (Service_ID) REFERENCES government_shift_Services (Service_ID), FOREIGN KEY (Customer_ID) REFERENCES government_shift_Customers (Customer_ID) );
CREATE TABLE government_shift_Customer_Interactions( Customer_Interaction_ID INTEGER NOT NULL, Channel_ID INTEGER, Customer_ID INTEGER, Service_ID INTEGER, Status_Code VARCHAR, Services_and_Channels_Details VARCHAR, PRIMARY KEY (Customer_Interaction_ID), FOREIGN KEY (Service_ID) REFERENCES government_shift_Services (Service_ID), FOREIGN KEY (Channel_ID) REFERENCES government_shift_Channels (Channel_ID), FOREIGN KEY (Customer_ID) REFERENCES government_shift_Customers (Customer_ID) );
CREATE TABLE government_shift_Integration_Platform( Integration_Platform_ID INTEGER NOT NULL, Customer_Interaction_ID INTEGER NOT NULL, Integration_Platform_Details VARCHAR NOT NULL, PRIMARY KEY (Integration_Platform_ID), FOREIGN KEY (Customer_Interaction_ID) REFERENCES government_shift_Customer_Interactions (Customer_Interaction_ID) );
CREATE TABLE government_shift_Analytical_Layer( Analytical_ID INTEGER NOT NULL, Customers_and_Services_ID INTEGER NOT NULL, Pattern_Recognition VARCHAR NOT NULL, Analytical_Layer_Type_Code VARCHAR, PRIMARY KEY (Analytical_ID), FOREIGN KEY (Customers_and_Services_ID) REFERENCES government_shift_Customers_and_Services (Customers_and_Services_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\gymnast
CREATE TABLE gymnast_people( "People_ID" int, "Name" text, "Age" real, "Height" real, "Hometown" text, PRIMARY KEY ("People_ID") );
CREATE TABLE gymnast_gymnast( "Gymnast_ID" int, "Floor_Exercise_Points" real, "Pommel_Horse_Points" real, "Rings_Points" real, "Vault_Points" real, "Parallel_Bars_Points" real, "Horizontal_Bar_Points" real, "Total_Points" real, PRIMARY KEY ("Gymnast_ID"), FOREIGN KEY ("Gymnast_ID") REFERENCES gymnast_people ("People_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\headphone_store
CREATE TABLE headphone_store_headphone( "Headphone_ID" int, "Model" text, "Class" text, "Driver-matched_dB" real, "Construction" text, "Earpads" text, "Price" int, PRIMARY KEY ("Headphone_ID") );
CREATE TABLE headphone_store_store( "Store_ID" int, "Name" text, "Neighborhood" text, "Parking" text, "Date_Opened" text, PRIMARY KEY ("Store_ID") );
CREATE TABLE headphone_store_stock( "Store_ID" int, "Headphone_ID" int, "Quantity" int, PRIMARY KEY ("Store_ID","Headphone_ID"), FOREIGN KEY ("Store_ID") REFERENCES headphone_store_store ("Store_ID"), FOREIGN KEY ("Headphone_ID") REFERENCES headphone_store_headphone ("Headphone_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\hospital_1
CREATE TABLE hospital_1_Physician( EmployeeID INTEGER NOT NULL, Name VARCHAR NOT NULL, Position VARCHAR NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );
CREATE TABLE hospital_1_Department( DepartmentID INTEGER NOT NULL, Name VARCHAR NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES hospital_1_Physician (EmployeeID) );
CREATE TABLE hospital_1_Affiliated_With( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES hospital_1_Physician (EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES hospital_1_Department (DepartmentID), PRIMARY KEY(Physician, Department) );
CREATE TABLE hospital_1_Procedures( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR NOT NULL, Cost REAL NOT NULL );
CREATE TABLE hospital_1_Trained_In( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES hospital_1_Physician (EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES hospital_1_Procedures (Code), PRIMARY KEY(Physician, Treatment) );
CREATE TABLE hospital_1_Patient( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR NOT NULL, Address VARCHAR NOT NULL, Phone VARCHAR NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES hospital_1_Physician (EmployeeID) );
CREATE TABLE hospital_1_Nurse( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR NOT NULL, Position VARCHAR NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL );
CREATE TABLE hospital_1_Appointment( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, StartTime DATETIME NOT NULL, EndTime DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES hospital_1_Patient (SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES hospital_1_Nurse (EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES hospital_1_Physician (EmployeeID) );
CREATE TABLE hospital_1_Medication( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR NOT NULL, Brand VARCHAR NOT NULL, Description VARCHAR NOT NULL );
CREATE TABLE hospital_1_Prescribes( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES hospital_1_Physician (EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES hospital_1_Patient (SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES hospital_1_Medication (Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES hospital_1_Appointment (AppointmentID) );
CREATE TABLE hospital_1_Block( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) );
CREATE TABLE hospital_1_Room( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES hospital_1_Block (BlockFloor, BlockCode) );
CREATE TABLE hospital_1_On_Call( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES hospital_1_Nurse (EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES hospital_1_Block (BlockFloor, BlockCode) );
CREATE TABLE hospital_1_Stay( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES hospital_1_Patient (SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES hospital_1_Room (RoomNumber) );
CREATE TABLE hospital_1_Undergoes( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES hospital_1_Patient (SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES hospital_1_Procedures (Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES hospital_1_Stay (StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES hospital_1_Physician (EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES hospital_1_Nurse (EmployeeID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\hr_1
CREATE TABLE hr_1_regions( "REGION_ID" decimal(10,0) NOT NULL, "REGION_NAME" VARCHAR , PRIMARY KEY ("REGION_ID") );
CREATE TABLE hr_1_countries( "COUNTRY_ID" VARCHAR NOT NULL, "COUNTRY_NAME" VARCHAR , "REGION_ID" decimal(10,0) , PRIMARY KEY ("COUNTRY_ID"), FOREIGN KEY ("REGION_ID") REFERENCES hr_1_regions ("REGION_ID") );
CREATE TABLE hr_1_departments( "DEPARTMENT_ID" decimal(4,0) NOT NULL DEFAULT '0', "DEPARTMENT_NAME" VARCHAR NOT NULL, "MANAGER_ID" decimal(6,0) , "LOCATION_ID" decimal(4,0) , PRIMARY KEY ("DEPARTMENT_ID") );
CREATE TABLE hr_1_jobs( "JOB_ID" VARCHAR NOT NULL DEFAULT '', "JOB_TITLE" VARCHAR NOT NULL, "MIN_SALARY" decimal(6,0) , "MAX_SALARY" decimal(6,0) , PRIMARY KEY ("JOB_ID") );
CREATE TABLE hr_1_employees( "EMPLOYEE_ID" decimal(6,0) NOT NULL DEFAULT '0', "FIRST_NAME" VARCHAR , "LAST_NAME" VARCHAR NOT NULL, "EMAIL" VARCHAR NOT NULL, "PHONE_NUMBER" VARCHAR , "HIRE_DATE" date NOT NULL, "JOB_ID" VARCHAR NOT NULL, "SALARY" decimal(8,2) , "COMMISSION_PCT" decimal(2,2) , "MANAGER_ID" decimal(6,0) , "DEPARTMENT_ID" decimal(4,0) , PRIMARY KEY ("EMPLOYEE_ID"), FOREIGN KEY ("DEPARTMENT_ID") REFERENCES hr_1_departments ("DEPARTMENT_ID"), FOREIGN KEY ("JOB_ID") REFERENCES hr_1_jobs ("JOB_ID") );
CREATE TABLE hr_1_job_history( "EMPLOYEE_ID" decimal(6,0) NOT NULL, "START_DATE" date NOT NULL, "END_DATE" date NOT NULL, "JOB_ID" VARCHAR NOT NULL, "DEPARTMENT_ID" decimal(4,0) , PRIMARY KEY ("EMPLOYEE_ID","START_DATE"), FOREIGN KEY ("EMPLOYEE_ID") REFERENCES hr_1_employees ("EMPLOYEE_ID"), FOREIGN KEY ("DEPARTMENT_ID") REFERENCES hr_1_departments ("DEPARTMENT_ID"), FOREIGN KEY ("JOB_ID") REFERENCES hr_1_jobs ("JOB_ID") );
CREATE TABLE hr_1_locations( "LOCATION_ID" decimal(4,0) NOT NULL DEFAULT '0', "STREET_ADDRESS" VARCHAR , "POSTAL_CODE" VARCHAR , "CITY" VARCHAR NOT NULL, "STATE_PROVINCE" VARCHAR , "COUNTRY_ID" VARCHAR , PRIMARY KEY ("LOCATION_ID"), FOREIGN KEY ("COUNTRY_ID") REFERENCES hr_1_countries ("COUNTRY_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\imdb
CREATE TABLE imdb_actor( "aid" int, "gender" text, "name" text, "nationality" text, "birth_city" text, "birth_year" int, primary key("aid") );
CREATE TABLE imdb_copyright( "id" int, "msid" int UNIQUE, "cid" int, primary key("id") );
CREATE TABLE imdb_cast( "id" int, "msid" int, "aid" int, "role" int, primary key("id"), foreign key("aid") references imdb_actor ("aid"), foreign key("msid") references imdb_copyright ("msid") );
CREATE TABLE imdb_genre( "gid" int, "genre" text, primary key("gid") );
CREATE TABLE imdb_classification( "id" int, "msid" int, "gid" int, primary key("id"), foreign key("gid") references imdb_genre ("gid"), foreign key("msid") references imdb_copyright ("msid") );
CREATE TABLE imdb_company( "id" int, "name" text, "country_code" text, primary key("id") );
CREATE TABLE imdb_director( "did" int, "gender" text, "name" text, "nationality" text, "birth_city" text, "birth_year" int, primary key("did") );
CREATE TABLE imdb_producer( "pid" int, "gender" text, "name" text, "nationality" text, "birth_city" text, "birth_year" int, primary key("pid") );
CREATE TABLE imdb_directed_by( "id" int, "msid" int, "did" int, primary key("id"), foreign key("msid") references imdb_copyright ("msid"), foreign key("did") references imdb_director ("did") );
CREATE TABLE imdb_keyword( "kid" int, "keyword" text, primary key("kid") );
CREATE TABLE imdb_made_by( "id" int, "msid" int, "pid" int, primary key("id"), foreign key("msid") references imdb_copyright ("msid"), foreign key("pid") references imdb_producer ("pid") );
CREATE TABLE imdb_movie( "mid" int, "title" text, "release_year" int, "title_aka" text, "budget" text, primary key("mid") );
CREATE TABLE imdb_tags( "id" int, "msid" int, "kid" int, primary key("id"), foreign key("msid") references imdb_copyright ("msid"), foreign key("kid") references imdb_keyword ("kid") );
CREATE TABLE imdb_tv_series( "sid" int, "title" text, "release_year" int, "num_of_seasons" int, "num_of_episodes" int, "title_aka" text, "budget" text, primary key("sid") );
CREATE TABLE imdb_writer( "wid" int, "gender" text, "name" int, "nationality" int, "num_of_episodes" int, "birth_city" text, "birth_year" int, primary key("wid") );
CREATE TABLE imdb_written_by( "id" int, "msid" int, "wid" int, foreign key("msid") references imdb_copyright ("msid"), foreign key("wid") references imdb_writer ("wid") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\institution_sports
CREATE TABLE institution_sports_institution( "Institution_ID" int, "Name" text, "Team" text, "City" text, "Province" text, "Founded" real, "Affiliation" text, "Enrollment" real, "Endowment" text, "Stadium" text, "Capacity" real, PRIMARY KEY ("Institution_ID") );
CREATE TABLE institution_sports_Championship( "Institution_ID" int, "Nickname" text, "Joined" real, "Number_of_Championships" real, PRIMARY KEY ("Institution_ID"), FOREIGN KEY ("Institution_ID") REFERENCES institution_sports_institution ("Institution_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\insurance_and_eClaims
CREATE TABLE insurance_and_eClaims_Customers( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR NOT NULL, PRIMARY KEY (Customer_ID) );
CREATE TABLE insurance_and_eClaims_Staff( Staff_ID INTEGER NOT NULL, Staff_Details VARCHAR NOT NULL, PRIMARY KEY (Staff_ID) );
CREATE TABLE insurance_and_eClaims_Policies( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code VARCHAR NOT NULL, Start_Date DATETIME, End_Date DATETIME, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES insurance_and_eClaims_Customers (Customer_ID) );
CREATE TABLE insurance_and_eClaims_Claim_Headers( Claim_Header_ID INTEGER NOT NULL, Claim_Status_Code VARCHAR NOT NULL, Claim_Type_Code VARCHAR NOT NULL, Policy_ID INTEGER NOT NULL, Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4), PRIMARY KEY (Claim_Header_ID), FOREIGN KEY (Policy_ID) REFERENCES insurance_and_eClaims_Policies (Policy_ID) );
CREATE TABLE insurance_and_eClaims_Claims_Documents( Claim_ID INTEGER NOT NULL, Document_Type_Code VARCHAR NOT NULL, Created_by_Staff_ID INTEGER, Created_Date INTEGER, PRIMARY KEY (Claim_ID, Document_Type_Code), FOREIGN KEY (Claim_ID) REFERENCES insurance_and_eClaims_Claim_Headers (Claim_Header_ID), FOREIGN KEY (Created_by_Staff_ID) REFERENCES insurance_and_eClaims_Staff (Staff_ID) );
CREATE TABLE insurance_and_eClaims_Claims_Processing_Stages( Claim_Stage_ID INTEGER NOT NULL, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR NOT NULL, Claim_Status_Description VARCHAR NOT NULL, PRIMARY KEY (Claim_Stage_ID) );
CREATE TABLE insurance_and_eClaims_Claims_Processing( Claim_Processing_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Claim_Outcome_Code VARCHAR NOT NULL, Claim_Stage_ID INTEGER NOT NULL, Staff_ID INTEGER, PRIMARY KEY (Claim_Processing_ID), FOREIGN KEY (Claim_ID) REFERENCES insurance_and_eClaims_Claim_Headers (Claim_Header_ID), FOREIGN KEY (Staff_ID) REFERENCES insurance_and_eClaims_Staff (Staff_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\insurance_fnol
CREATE TABLE insurance_fnol_Customers( Customer_ID INTEGER NOT NULL, Customer_name VARCHAR, PRIMARY KEY (Customer_ID) );
CREATE TABLE insurance_fnol_Services( Service_ID INTEGER NOT NULL, Service_name VARCHAR, PRIMARY KEY (Service_ID) );
CREATE TABLE insurance_fnol_Available_Policies( Policy_ID INTEGER NOT NULL, policy_type_code VARCHAR, Customer_Phone VARCHAR, PRIMARY KEY (Policy_ID), UNIQUE (Policy_ID) );
CREATE TABLE insurance_fnol_Customers_Policies( Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Opened DATE, Date_Closed DATE, PRIMARY KEY (Customer_ID, Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES insurance_fnol_Customers (Customer_ID), FOREIGN KEY (Policy_ID) REFERENCES insurance_fnol_Available_Policies (Policy_ID) );
CREATE TABLE insurance_fnol_First_Notification_of_Loss( FNOL_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, PRIMARY KEY (FNOL_ID), UNIQUE (FNOL_ID), FOREIGN KEY (Service_ID) REFERENCES insurance_fnol_Services (Service_ID), FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES insurance_fnol_Customers_Policies (Customer_ID,Policy_ID) );
CREATE TABLE insurance_fnol_Claims( Claim_ID INTEGER NOT NULL, FNOL_ID INTEGER NOT NULL, Effective_Date DATE, PRIMARY KEY (Claim_ID), UNIQUE (Claim_ID), FOREIGN KEY (FNOL_ID) REFERENCES insurance_fnol_First_Notification_of_Loss (FNOL_ID) );
CREATE TABLE insurance_fnol_Settlements( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER, Effective_Date DATE, Settlement_Amount REAL, PRIMARY KEY (Settlement_ID), UNIQUE (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES insurance_fnol_Claims (Claim_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\insurance_policies
CREATE TABLE insurance_policies_Customers( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR NOT NULL, PRIMARY KEY (Customer_ID) );
CREATE TABLE insurance_policies_Customer_Policies( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code VARCHAR NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES insurance_policies_Customers (Customer_ID) );
CREATE TABLE insurance_policies_Claims( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES insurance_policies_Customer_Policies (Policy_ID) );
CREATE TABLE insurance_policies_Settlements( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES insurance_policies_Claims (Claim_ID) );
CREATE TABLE insurance_policies_Payments( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR, Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES insurance_policies_Settlements (Settlement_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\journal_committee
CREATE TABLE journal_committee_journal( "Journal_ID" int, "Date" text, "Theme" text, "Sales" int, PRIMARY KEY ("Journal_ID") );
CREATE TABLE journal_committee_editor( "Editor_ID" int, "Name" text, "Age" real, PRIMARY KEY ("Editor_ID") );
CREATE TABLE journal_committee_journal_committee( "Editor_ID" int, "Journal_ID" int, "Work_Type" text, PRIMARY KEY ("Editor_ID","Journal_ID"), FOREIGN KEY ("Editor_ID") REFERENCES journal_committee_editor ("Editor_ID"), FOREIGN KEY ("Journal_ID") REFERENCES journal_committee_journal ("Journal_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\loan_1
CREATE TABLE loan_1_bank( branch_ID int PRIMARY KEY, bname VARCHAR, no_of_customers int, city VARCHAR, state VARCHAR);
CREATE TABLE loan_1_customer( cust_ID VARCHAR PRIMARY KEY, cust_name VARCHAR, acc_type VARCHAR, acc_bal int, no_of_loans int, credit_score int, branch_ID int, state VARCHAR, FOREIGN KEY(branch_ID) REFERENCES loan_1_bank (branch_ID));
CREATE TABLE loan_1_loan( loan_ID VARCHAR PRIMARY KEY, loan_type VARCHAR, cust_ID VARCHAR, branch_ID int, amount int, FOREIGN KEY(branch_ID) REFERENCES loan_1_bank (branch_ID), FOREIGN KEY(Cust_ID) REFERENCES loan_1_customer (Cust_ID));

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\local_govt_and_lot
CREATE TABLE local_govt_and_lot_Customers( customer_id INTEGER NOT NULL, customer_details VARCHAR, PRIMARY KEY (customer_id) );
CREATE TABLE local_govt_and_lot_Properties( property_id INTEGER NOT NULL, property_type_code VARCHAR NOT NULL, property_address VARCHAR, other_details VARCHAR, PRIMARY KEY (property_id) );
CREATE TABLE local_govt_and_lot_Residents( resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, date_moved_out DATETIME NOT NULL, other_details VARCHAR, PRIMARY KEY (resident_id, property_id, date_moved_in), FOREIGN KEY (property_id) REFERENCES local_govt_and_lot_Properties (property_id) );
CREATE TABLE local_govt_and_lot_Organizations( organization_id INTEGER NOT NULL, parent_organization_id INTEGER, organization_details VARCHAR, PRIMARY KEY (organization_id) );
CREATE TABLE local_govt_and_lot_Services( service_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, service_type_code VARCHAR NOT NULL, service_details VARCHAR, PRIMARY KEY (service_id), FOREIGN KEY (organization_id) REFERENCES local_govt_and_lot_Organizations (organization_id) );
CREATE TABLE local_govt_and_lot_Residents_Services( resident_id INTEGER NOT NULL, service_id INTEGER NOT NULL, date_moved_in DATETIME, property_id INTEGER, date_requested DATETIME, date_provided DATETIME, other_details VARCHAR, PRIMARY KEY (resident_id, service_id), FOREIGN KEY (service_id) REFERENCES local_govt_and_lot_Services (service_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES local_govt_and_lot_Residents (resident_id,property_id,date_moved_in) );
CREATE TABLE local_govt_and_lot_Things( thing_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, Type_of_Thing_Code VARCHAR NOT NULL, service_type_code VARCHAR NOT NULL, service_details VARCHAR, PRIMARY KEY (thing_id), FOREIGN KEY (organization_id) REFERENCES local_govt_and_lot_Organizations (organization_id) );
CREATE TABLE local_govt_and_lot_Customer_Events( Customer_Event_ID INTEGER NOT NULL, customer_id INTEGER, date_moved_in DATETIME, property_id INTEGER, resident_id INTEGER, thing_id INTEGER NOT NULL, PRIMARY KEY (Customer_Event_ID), FOREIGN KEY (thing_id) REFERENCES local_govt_and_lot_Things (thing_id), FOREIGN KEY (customer_id) REFERENCES local_govt_and_lot_Customers (customer_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES local_govt_and_lot_Residents (resident_id,property_id,date_moved_in) );
CREATE TABLE local_govt_and_lot_Customer_Event_Notes( Customer_Event_Note_ID INTEGER NOT NULL, Customer_Event_ID INTEGER NOT NULL, service_type_code VARCHAR NOT NULL, resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, PRIMARY KEY (Customer_Event_Note_ID), FOREIGN KEY (Customer_Event_ID) REFERENCES local_govt_and_lot_Customer_Events (Customer_Event_ID) );
CREATE TABLE local_govt_and_lot_Timed_Status_of_Things( thing_id INTEGER NOT NULL, Date_and_Date DATETIME NOT NULL, Status_of_Thing_Code VARCHAR NOT NULL, PRIMARY KEY (thing_id, Date_and_Date, Status_of_Thing_Code), FOREIGN KEY (thing_id) REFERENCES local_govt_and_lot_Things (thing_id) );
CREATE TABLE local_govt_and_lot_Timed_Locations_of_Things( thing_id INTEGER NOT NULL, Date_and_Time DATETIME NOT NULL, Location_Code VARCHAR NOT NULL, PRIMARY KEY (thing_id, Date_and_Time, Location_Code), FOREIGN KEY (thing_id) REFERENCES local_govt_and_lot_Things (thing_id));

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\local_govt_in_alabama
CREATE TABLE local_govt_in_alabama_Services( Service_ID INTEGER NOT NULL, Service_Type_Code VARCHAR NOT NULL, PRIMARY KEY (Service_ID) );
CREATE TABLE local_govt_in_alabama_Participants( Participant_ID INTEGER NOT NULL, Participant_Type_Code VARCHAR NOT NULL, Participant_Details VARCHAR, PRIMARY KEY (Participant_ID) );
CREATE TABLE local_govt_in_alabama_Events( Event_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, Event_Details VARCHAR, PRIMARY KEY (Event_ID), FOREIGN KEY (Service_ID) REFERENCES local_govt_in_alabama_Services (Service_ID) );
CREATE TABLE local_govt_in_alabama_Participants_in_Events( Event_ID INTEGER NOT NULL, Participant_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID, Participant_ID), FOREIGN KEY (Participant_ID) REFERENCES local_govt_in_alabama_Participants (Participant_ID), FOREIGN KEY (Event_ID) REFERENCES local_govt_in_alabama_Events (Event_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\local_govt_mdm
CREATE TABLE local_govt_mdm_Customer_Master_Index( master_customer_id INTEGER NOT NULL, cmi_details VARCHAR, PRIMARY KEY (master_customer_id) );
CREATE TABLE local_govt_mdm_CMI_Cross_References( cmi_cross_ref_id INTEGER NOT NULL, master_customer_id INTEGER NOT NULL, source_system_code VARCHAR NOT NULL, PRIMARY KEY (cmi_cross_ref_id), FOREIGN KEY (master_customer_id) REFERENCES local_govt_mdm_Customer_Master_Index (master_customer_id) );
CREATE TABLE local_govt_mdm_Council_Tax( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES local_govt_mdm_CMI_Cross_References (cmi_cross_ref_id) );
CREATE TABLE local_govt_mdm_Business_Rates( business_rates_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (business_rates_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES local_govt_mdm_CMI_Cross_References (cmi_cross_ref_id) );
CREATE TABLE local_govt_mdm_Benefits_Overpayments( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES local_govt_mdm_CMI_Cross_References (cmi_cross_ref_id) );
CREATE TABLE local_govt_mdm_Parking_Fines( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES local_govt_mdm_CMI_Cross_References (cmi_cross_ref_id) );
CREATE TABLE local_govt_mdm_Rent_Arrears( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES local_govt_mdm_CMI_Cross_References (cmi_cross_ref_id) );
CREATE TABLE local_govt_mdm_Electoral_Register( electoral_register_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (electoral_register_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES local_govt_mdm_CMI_Cross_References (cmi_cross_ref_id) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\machine_repair
CREATE TABLE machine_repair_repair( "repair_ID" int, "name" text, "Launch_Date" text, "Notes" text, PRIMARY KEY ("repair_ID") );
CREATE TABLE machine_repair_machine( "Machine_ID" int, "Making_Year" int, "Class" text, "Team" text, "Machine_series" text, "value_points" real, "quality_rank" int, PRIMARY KEY ("Machine_ID") );
CREATE TABLE machine_repair_technician( "technician_id" int, "Name" text, "Team" text, "Starting_Year" real, "Age" int, PRIMARY Key ("technician_id") );
CREATE TABLE machine_repair_repair_assignment( "technician_id" int, "repair_ID" int, "Machine_ID" int, PRIMARY Key ("technician_id","repair_ID","Machine_ID"), FOREIGN KEY ("technician_id") REFERENCES machine_repair_technician ("technician_id"), FOREIGN KEY ("repair_ID") REFERENCES machine_repair_repair ("repair_ID"), FOREIGN KEY ("Machine_ID") REFERENCES machine_repair_machine ("Machine_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\manufactory_1
CREATE TABLE manufactory_1_Manufacturers( Code INTEGER, Name VARCHAR NOT NULL, Headquarter VARCHAR NOT NULL, Founder VARCHAR NOT NULL, Revenue REAL, PRIMARY KEY (Code) );
CREATE TABLE manufactory_1_Products( Code INTEGER, Name VARCHAR NOT NULL , Price DECIMAL NOT NULL , Manufacturer INTEGER NOT NULL, PRIMARY KEY (Code), FOREIGN KEY (Manufacturer) REFERENCES manufactory_1_Manufacturers (Code) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\manufacturer
CREATE TABLE manufacturer_manufacturer( "Manufacturer_ID" int, "Open_Year" real, "Name" text, "Num_of_Factories" int, "Num_of_Shops" int, PRIMARY KEY ("Manufacturer_ID") );
CREATE TABLE manufacturer_furniture( "Furniture_ID" int, "Name" text, "Num_of_Component" int, "Market_Rate" real, PRIMARY KEY ("Furniture_ID") );
CREATE TABLE manufacturer_furniture_manufacte( "Manufacturer_ID" int, "Furniture_ID" int, "Price_in_Dollar" real, PRIMARY KEY ("Manufacturer_ID","Furniture_ID"), FOREIGN KEY ("Manufacturer_ID") REFERENCES manufacturer_manufacturer ("Manufacturer_ID"), FOREIGN KEY ("Furniture_ID") REFERENCES manufacturer_furniture ("Furniture_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\match_season
CREATE TABLE match_season_country( "Country_id" int, "Country_name" text, "Capital" text, "Official_native_language" text, PRIMARY KEY ("Country_id") );
CREATE TABLE match_season_team( "Team_id" int, "Name" text, PRIMARY KEY ("Team_id") ) ;
CREATE TABLE match_season_match_season( "Season" real, "Player" text, "Position" text, "Country" int, "Team" int, "Draft_Pick_Number" int, "Draft_Class" text, "College" text, PRIMARY KEY ("Season"), FOREIGN KEY ("Country") REFERENCES match_season_country ("Country_id"), FOREIGN KEY ("Team") REFERENCES match_season_team ("Team_id") );
CREATE TABLE match_season_player( "Player_ID" int, "Player" text, "Years_Played" text, "Total_WL" text, "Singles_WL" text, "Doubles_WL" text, "Team" int, PRIMARY KEY ("Player_ID"), FOREIGN KEY ("Team") REFERENCES match_season_team ("Team_id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\medicine_enzyme_interaction
CREATE TABLE medicine_enzyme_interaction_medicine( "id" int, "name" text, "Trade_Name" text, "FDA_approved" text, primary key ("id") );
CREATE TABLE medicine_enzyme_interaction_enzyme( "id" int, "name" text, "Location" text, "Product" text, "Chromosome" text, "OMIM" int, "Porphyria" text, primary key ("id") );
CREATE TABLE medicine_enzyme_interaction_medicine_enzyme_interaction( "enzyme_id" int, "medicine_id" int, "interaction_type" text, primary key ("enzyme_id", "medicine_id"), foreign key ("enzyme_id") references medicine_enzyme_interaction_enzyme ("id"), foreign key ("medicine_id") references medicine_enzyme_interaction_medicine ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\mountain_photos
CREATE TABLE mountain_photos_mountain( "id" int, "name" text, "Height" real, "Prominence" real, "Range" text, "Country" text, primary key("id") );
CREATE TABLE mountain_photos_camera_lens( "id" int, "brand" text, "name" text, "focal_length_mm" real, "max_aperture" real, primary key("id") );
CREATE TABLE mountain_photos_photos( "id" int, "camera_lens_id" int, "mountain_id" int, "color" text, "name" text, primary key("id"), foreign key("camera_lens_id") references mountain_photos_camera_lens ("id"), foreign key("mountain_id") references mountain_photos_mountain ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\movie_1
create table movie_1_Movie( mID int primary key, title text, year int, director text );
create table movie_1_Reviewer( rID int primary key, name text);
create table movie_1_Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references movie_1_Movie (mID), FOREIGN KEY (rID) references movie_1_Reviewer (rID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\movie_2
CREATE TABLE movie_2_Movies( Code INTEGER PRIMARY KEY, Title VARCHAR NOT NULL, Rating VARCHAR );
CREATE TABLE movie_2_MovieTheaters( Code INTEGER PRIMARY KEY, Name VARCHAR NOT NULL, Movie INTEGER, FOREIGN KEY (Movie) REFERENCES movie_2_Movies (Code) ) ;

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\museum_visit
CREATE TABLE museum_visit_museum( "Museum_ID" int, "Name" text, "Num_of_Staff" int, "Open_Year" text, PRIMARY KEY ("Museum_ID") );
CREATE TABLE museum_visit_visitor( "ID" int, "Name" text, "Level_of_membership" int, "Age" int, PRIMARY KEY ("ID") );
CREATE TABLE museum_visit_visit( "Museum_ID" int, "visitor_ID" int, "Num_of_Ticket" int, "Total_spent" real, PRIMARY KEY ("Museum_ID","visitor_ID"), FOREIGN KEY ("Museum_ID") REFERENCES museum_visit_museum ("Museum_ID"), FOREIGN KEY ("visitor_ID") REFERENCES museum_visit_visitor ("ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\musical
CREATE TABLE musical_musical( "Musical_ID" int, "Name" text, "Year" int, "Award" text, "Category" text, "Nominee" text, "Result" text, PRIMARY KEY ("Musical_ID") );
CREATE TABLE musical_actor( "Actor_ID" int, "Name" text, "Musical_ID" int, "Character" text, "Duration" text, "age" int, PRIMARY KEY ("Actor_ID"), FOREIGN KEY ("Musical_ID") REFERENCES musical_musical ("Musical_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\music_1
create table music_1_genre( g_name VARCHAR not null, rating VARCHAR, most_popular_in VARCHAR, primary key(g_name) );
create table music_1_artist( artist_name VARCHAR not null, country VARCHAR, gender VARCHAR, preferred_genre VARCHAR, constraint a_name primary key(artist_name), foreign key(preferred_genre) references music_1_genre (g_name) );
create table music_1_files( f_id INTEGER not null, artist_name VARCHAR, file_size VARCHAR, duration VARCHAR, formats VARCHAR, primary key(f_id), foreign key(artist_name) references music_1_artist (artist_name) );
create table music_1_song( song_name VARCHAR, artist_name VARCHAR, country VARCHAR, f_id INTEGER, genre_is VARCHAR, rating INTEGER check(rating>0 and rating<11), languages VARCHAR, releasedate Date, resolution INTEGER not null, constraint s_name primary key(song_name), foreign key(artist_name) references music_1_artist (artist_name) , foreign key(f_id) references music_1_files (f_id) , foreign key(genre_is) references music_1_genre (g_name) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\music_2
CREATE TABLE music_2_Songs( "SongId" INTEGER PRIMARY KEY, "Title" TEXT );
CREATE TABLE music_2_Albums( "AId" INTEGER PRIMARY KEY, "Title" TEXT, "Year" INTEGER, "Label" TEXT, "Type" TEXT );
CREATE TABLE music_2_Band( "Id" INTEGER PRIMARY KEY, "Firstname" TEXT, "Lastname" TEXT );
CREATE TABLE music_2_Instruments( "SongId" INTEGER, "BandmateId" INTEGER, "Instrument" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES music_2_Songs (SongId), FOREIGN KEY (BandmateId) REFERENCES music_2_Band (Id) );
CREATE TABLE music_2_Performance( "SongId" INTEGER, "Bandmate" INTEGER, "StagePosition" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES music_2_Songs (SongId), FOREIGN KEY (Bandmate) REFERENCES music_2_Band (Id) );
CREATE TABLE music_2_Tracklists( "AlbumId" INTEGER, "Position" INTEGER, "SongId" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES music_2_Songs (SongId), FOREIGN KEY (AlbumId) REFERENCES music_2_Albums (AId) );
CREATE TABLE music_2_Vocals( "SongId" INTEGER, "Bandmate" INTEGER, "Type" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES music_2_Songs (SongId), FOREIGN KEY (Bandmate) REFERENCES music_2_Band (Id) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\music_4
CREATE TABLE music_4_artist( "Artist_ID" int, "Artist" text, "Age" int, "Famous_Title" text, "Famous_Release_date" text, PRIMARY KEY ("Artist_ID") );
CREATE TABLE music_4_volume( "Volume_ID" int, "Volume_Issue" text, "Issue_Date" text, "Weeks_on_Top" real, "Song" text, "Artist_ID" int, PRIMARY KEY ("Volume_ID"), FOREIGN KEY ("Artist_ID") REFERENCES music_4_artist ("Artist_ID") );
CREATE TABLE music_4_music_festival( "ID" int, "Music_Festival" text, "Date_of_ceremony" text, "Category" text, "Volume" int, "Result" text, PRIMARY KEY ("ID"), FOREIGN KEY ("Volume") REFERENCES music_4_volume ("Volume_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\network_1
create table network_1_Highschooler( ID int primary key, name text, grade int);
create table network_1_Friend( student_id int, friend_id int, primary key (student_id,friend_id), foreign key(student_id) references network_1_Highschooler (ID), foreign key (friend_id) references network_1_Highschooler (ID) );
create table network_1_Likes( student_id int, liked_id int, primary key (student_id, liked_id), foreign key (liked_id) references network_1_Highschooler (ID), foreign key (student_id) references network_1_Highschooler (ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\network_2
CREATE TABLE network_2_Person( name VARCHAR PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT );
CREATE TABLE network_2_PersonFriend( name VARCHAR, friend VARCHAR, year INTEGER, FOREIGN KEY (name) REFERENCES network_2_Person (name), FOREIGN KEY (friend) REFERENCES network_2_Person (name) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\news_report
CREATE TABLE news_report_event( "Event_ID" int, "Date" text, "Venue" text, "Name" text, "Event_Attendance" int, PRIMARY KEY ("Event_ID") );
CREATE TABLE news_report_journalist( "journalist_ID" int, "Name" text, "Nationality" text, "Age" text, "Years_working" int, PRIMARY KEY ("journalist_ID") );
CREATE TABLE news_report_news_report( "journalist_ID" int, "Event_ID" int, "Work_Type" text, PRIMARY KEY ("journalist_ID","Event_ID"), FOREIGN KEY ("journalist_ID") REFERENCES news_report_journalist ("journalist_ID"), FOREIGN KEY ("Event_ID") REFERENCES news_report_event ("Event_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\online_exams
CREATE TABLE online_exams_Students( Student_ID INTEGER NOT NULL, First_Name VARCHAR, Middle_Name VARCHAR, Last_Name VARCHAR, Gender_MFU VARCHAR, Student_Address VARCHAR, Email_Adress VARCHAR, Cell_Mobile_Phone VARCHAR, Home_Phone VARCHAR, PRIMARY KEY (Student_ID) );
CREATE TABLE online_exams_Questions( Question_ID INTEGER NOT NULL, Type_of_Question_Code VARCHAR NOT NULL, Question_Text VARCHAR, PRIMARY KEY (Question_ID) );
CREATE TABLE online_exams_Exams( Exam_ID INTEGER NOT NULL, Subject_Code VARCHAR NOT NULL, Exam_Date DATETIME, Exam_Name VARCHAR, PRIMARY KEY (Exam_ID) );
CREATE TABLE online_exams_Questions_in_Exams( Exam_ID INTEGER NOT NULL, Question_ID INTEGER NOT NULL, PRIMARY KEY (Exam_ID, Question_ID), FOREIGN KEY (Question_ID) REFERENCES online_exams_Questions (Question_ID), FOREIGN KEY (Exam_ID) REFERENCES online_exams_Exams (Exam_ID) );
CREATE TABLE online_exams_Valid_Answers( Valid_Answer_ID INTEGER NOT NULL, Question_ID INTEGER NOT NULL, Valid_Answer_Text VARCHAR, PRIMARY KEY (Valid_Answer_ID), FOREIGN KEY (Question_ID) REFERENCES online_exams_Questions (Question_ID) );
CREATE TABLE online_exams_Student_Answers( Student_Answer_ID INTEGER NOT NULL, Exam_ID INTEGER NOT NULL, Question_ID INTEGER NOT NULL, Student_ID INTEGER NOT NULL, Date_of_Answer DATETIME, Comments VARCHAR, Satisfactory_YN VARCHAR, Student_Answer_Text VARCHAR, PRIMARY KEY (Student_Answer_ID), FOREIGN KEY (Student_ID) REFERENCES online_exams_Students (Student_ID), FOREIGN KEY (Exam_ID, Question_ID) REFERENCES online_exams_Questions_in_Exams (Exam_ID,Question_ID) );
CREATE TABLE online_exams_Student_Assessments( Student_Answer_ID VARCHAR NOT NULL, Valid_Answer_ID INTEGER NOT NULL, Student_Answer_Text VARCHAR, Satisfactory_YN VARCHAR, Assessment VARCHAR, PRIMARY KEY (Student_Answer_ID), FOREIGN KEY (Valid_Answer_ID) REFERENCES online_exams_Valid_Answers (Valid_Answer_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\orchestra
CREATE TABLE orchestra_conductor( "Conductor_ID" int, "Name" text, "Age" int, "Nationality" text, "Year_of_Work" int, PRIMARY KEY ("Conductor_ID") );
CREATE TABLE orchestra_orchestra( "Orchestra_ID" int, "Orchestra" text, "Conductor_ID" int, "Record_Company" text, "Year_of_Founded" real, "Major_Record_Format" text, PRIMARY KEY ("Orchestra_ID"), FOREIGN KEY ("Conductor_ID") REFERENCES orchestra_conductor ("Conductor_ID") );
CREATE TABLE orchestra_performance( "Performance_ID" int, "Orchestra_ID" int, "Type" text, "Date" text, "Official_ratings_(millions)" real, "Weekly_rank" text, "Share" text, PRIMARY KEY ("Performance_ID"), FOREIGN KEY ("Orchestra_ID") REFERENCES orchestra_orchestra ("Orchestra_ID") );
CREATE TABLE orchestra_show( "Show_ID" int, "Performance_ID" int, "If_first_show" bool, "Result" text, "Attendance" real, FOREIGN KEY ("Performance_ID") REFERENCES orchestra_performance ("Performance_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\party_host
CREATE TABLE party_host_party( "Party_ID" int, "Party_Theme" text, "Location" text, "First_year" text, "Last_year" text, "Number_of_hosts" int, PRIMARY KEY ("Party_ID") );
CREATE TABLE party_host_host( "Host_ID" int, "Name" text, "Nationality" text, "Age" text, PRIMARY KEY ("Host_ID") );
CREATE TABLE party_host_party_host( "Party_ID" int, "Host_ID" int, "Is_Main_in_Charge" bool, PRIMARY KEY ("Party_ID","Host_ID"), FOREIGN KEY ("Host_ID") REFERENCES party_host_host ("Host_ID"), FOREIGN KEY ("Party_ID") REFERENCES party_host_party ("Party_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\party_people
CREATE TABLE party_people_region( "Region_ID" int, "Region_name" text, "Date" text, "Label" text, "Format" text, "Catalogue" text, PRIMARY KEY ("Region_ID") );
CREATE TABLE party_people_party( "Party_ID" int, "Minister" text, "Took_office" text, "Left_office" text, "Region_ID" int, "Party_name" text, PRIMARY KEY ("Party_ID"), FOREIGN KEY ("Region_ID") REFERENCES party_people_region ("Region_ID") );
CREATE TABLE party_people_member( "Member_ID" int, "Member_Name" text, "Party_ID" int, "In_office" text, PRIMARY KEY ("Member_ID"), FOREIGN KEY ("Party_ID") REFERENCES party_people_party ("Party_ID") );
CREATE TABLE party_people_party_events( "Event_ID" int, "Event_Name" text, "Party_ID" int, "Member_in_charge_ID" int, PRIMARY KEY ("Event_ID"), FOREIGN KEY ("Party_ID") REFERENCES party_people_party ("Party_ID"), FOREIGN KEY ("Member_in_charge_ID") REFERENCES party_people_member ("Member_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\performance_attendance
CREATE TABLE performance_attendance_member( "Member_ID" int, "Name" text, "Nationality" text, "Role" text, PRIMARY KEY ("Member_ID") );
CREATE TABLE performance_attendance_performance( "Performance_ID" int, "Date" text, "Host" text, "Location" text, "Attendance" int, PRIMARY KEY ("Performance_ID") );
CREATE TABLE performance_attendance_member_attendance( "Member_ID" int, "Performance_ID" int, "Num_of_Pieces" int, PRIMARY KEY ("Member_ID","Performance_ID"), FOREIGN KEY ("Member_ID") REFERENCES performance_attendance_member ("Member_ID"), FOREIGN KEY ("Performance_ID") REFERENCES performance_attendance_performance ("Performance_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\perpetrator
CREATE TABLE perpetrator_people( "People_ID" int, "Name" text, "Height" real, "Weight" real, "Home Town" text, PRIMARY KEY ("People_ID") );
CREATE TABLE perpetrator_perpetrator( "Perpetrator_ID" int, "People_ID" int, "Date" text, "Year" real, "Location" text, "Country" text, "Killed" int, "Injured" int, PRIMARY KEY ("Perpetrator_ID"), FOREIGN KEY ("People_ID") REFERENCES perpetrator_people ("People_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\pets_1
create table pets_1_Student( StuID INTEGER PRIMARY KEY, LName VARCHAR, Fname VARCHAR, Age INTEGER, Sex VARCHAR, Major INTEGER, Advisor INTEGER, city_code VARCHAR );
create table pets_1_Pets( PetID INTEGER PRIMARY KEY, PetType VARCHAR, pet_age INTEGER, weight REAL );
create table pets_1_Has_Pet( StuID INTEGER, PetID INTEGER, FOREIGN KEY(PetID) REFERENCES pets_1_Pets (PetID), FOREIGN KEY(StuID) REFERENCES pets_1_Student (StuID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\phone_1
CREATE TABLE phone_1_chip_model( "Model_name" text, "Launch_year" real, "RAM_MiB" real, "ROM_MiB" real, "Slots" text, "WiFi" text, "Bluetooth" text, PRIMARY KEY ("Model_name") );
CREATE TABLE phone_1_screen_mode( "Graphics_mode" real, "Char_cells" text, "Pixels" text, "Hardware_colours" real, "used_kb" real, "map" text, "Type" text, PRIMARY KEY ("Graphics_mode") );
CREATE TABLE phone_1_phone( "Company_name" text, "Hardware_Model_name" text, "Accreditation_type" text, "Accreditation_level" text, "Date" text, chip_model text, screen_mode real, PRIMARY KEY("Hardware_Model_name"), FOREIGN KEY ("screen_mode") REFERENCES phone_1_screen_mode ("Graphics_mode"), FOREIGN KEY ("chip_model") REFERENCES phone_1_chip_model ("Model_name") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\phone_market
CREATE TABLE phone_market_phone( "Name" text, "Phone_ID" int, "Memory_in_G" int, "Carrier" text, "Price" real, PRIMARY KEY ("Phone_ID") );
CREATE TABLE phone_market_market( "Market_ID" int, "District" text, "Num_of_employees" int, "Num_of_shops" real, "Ranking" int, PRIMARY KEY ("Market_ID") );
CREATE TABLE phone_market_phone_market( "Market_ID" int, "Phone_ID" int, "Num_of_stock" int, PRIMARY KEY ("Market_ID","Phone_ID"), FOREIGN KEY ("Market_ID") REFERENCES phone_market_market ("Market_ID"), FOREIGN KEY ("Phone_ID") REFERENCES phone_market_phone ("Phone_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\pilot_1
CREATE TABLE pilot_1_Hangar(plane_name VARCHAR NOT NULL PRIMARY KEY, location VARCHAR );
CREATE TABLE pilot_1_PilotSkills(pilot_name VARCHAR NOT NULL, plane_name VARCHAR NOT NULL, age INTEGER, PRIMARY KEY (pilot_name, plane_name), FOREIGN KEY (plane_name) REFERENCES pilot_1_Hangar (plane_name) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\pilot_record
CREATE TABLE pilot_record_aircraft( "Aircraft_ID" int, "Order_Year" int, "Manufacturer" text, "Model" text, "Fleet_Series" text, "Powertrain" text, "Fuel_Propulsion" text, PRIMARY KEY ("Aircraft_ID") );
CREATE TABLE pilot_record_pilot( "Pilot_ID" int, "Pilot_name" text, "Rank" int, "Age" int, "Nationality" text, "Position" text, "Join_Year" int, "Team" text, PRIMARY KEY ("Pilot_ID") );
CREATE TABLE pilot_record_pilot_record( "Record_ID" int, "Pilot_ID" int, "Aircraft_ID" int, "Date" text, PRIMARY KEY ("Pilot_ID", "Aircraft_ID", "Date"), FOREIGN KEY ("Pilot_ID") REFERENCES pilot_record_pilot ("Pilot_ID"), FOREIGN KEY ("Aircraft_ID") REFERENCES pilot_record_aircraft ("Aircraft_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\planet_1
CREATE TABLE planet_1_Employee( EmployeeID INTEGER PRIMARY KEY, Name VARCHAR NOT NULL, Position VARCHAR NOT NULL, Salary REAL NOT NULL, Remarks VARCHAR );
CREATE TABLE planet_1_Planet( PlanetID INTEGER PRIMARY KEY, Name VARCHAR NOT NULL, Coordinates REAL NOT NULL );
CREATE TABLE planet_1_Shipment( ShipmentID INTEGER PRIMARY KEY, Date DATE, Manager INTEGER NOT NULL, Planet INTEGER NOT NULL, FOREIGN KEY (Manager) REFERENCES planet_1_Employee (EmployeeID), FOREIGN KEY (Planet) REFERENCES planet_1_Planet (PlanetID) ) ;
CREATE TABLE planet_1_Has_Clearance( Employee INTEGER NOT NULL, Planet INTEGER NOT NULL, Level INTEGER NOT NULL, PRIMARY KEY(Employee, Planet), FOREIGN KEY (Employee) REFERENCES planet_1_Employee (EmployeeID), FOREIGN KEY (Planet) REFERENCES planet_1_Planet (PlanetID) ) ;
CREATE TABLE planet_1_Client( AccountNumber INTEGER PRIMARY KEY, Name VARCHAR NOT NULL ) ;
CREATE TABLE planet_1_Package( Shipment INTEGER NOT NULL, PackageNumber INTEGER NOT NULL, Contents VARCHAR NOT NULL, Weight REAL NOT NULL, Sender INTEGER NOT NULL, Recipient INTEGER NOT NULL, PRIMARY KEY(Shipment, PackageNumber), FOREIGN KEY (Shipment) REFERENCES planet_1_Shipment (ShipmentID), FOREIGN KEY (Sender) REFERENCES planet_1_Client (AccountNumber), FOREIGN KEY (Recipient) REFERENCES planet_1_Client (AccountNumber) ) ;

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\poker_player
CREATE TABLE poker_player_people( "People_ID" int, "Nationality" text, "Name" text, "Birth_Date" text, "Height" real, PRIMARY KEY ("People_ID") );
CREATE TABLE poker_player_poker_player( "Poker_Player_ID" int, "People_ID" int, "Final_Table_Made" real, "Best_Finish" real, "Money_Rank" real, "Earnings" real, PRIMARY KEY ("Poker_Player_ID"), FOREIGN KEY ("People_ID") REFERENCES poker_player_people ("People_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\products_for_hire
CREATE TABLE products_for_hire_Discount_Coupons( "coupon_id" INTEGER PRIMARY KEY, "date_issued" DATETIME, "coupon_amount" DECIMAL(19,4) );
CREATE TABLE products_for_hire_Customers( "customer_id" INTEGER PRIMARY KEY, "coupon_id" INTEGER NOT NULL, "good_or_bad_customer" VARCHAR, "first_name" VARCHAR, "last_name" VARCHAR, "gender_mf" VARCHAR, "date_became_customer" DATETIME, "date_last_hire" DATETIME, FOREIGN KEY ("coupon_id" ) REFERENCES products_for_hire_Discount_Coupons ("coupon_id" ) );
CREATE TABLE products_for_hire_Bookings( "booking_id" INTEGER PRIMARY KEY , "customer_id" INTEGER NOT NULL, "booking_status_code" VARCHAR NOT NULL, "returned_damaged_yn" VARCHAR, "booking_start_date" DATETIME, "booking_end_date" DATETIME, "count_hired" VARCHAR, "amount_payable" DECIMAL(19,4), "amount_of_discount" DECIMAL(19,4), "amount_outstanding" DECIMAL(19,4), "amount_of_refund" DECIMAL(19,4), FOREIGN KEY ("customer_id" ) REFERENCES products_for_hire_Customers ("customer_id" ) );
CREATE TABLE products_for_hire_Products_for_Hire( "product_id" INTEGER PRIMARY KEY, "product_type_code" VARCHAR NOT NULL, "daily_hire_cost" DECIMAL(19,4), "product_name" VARCHAR, "product_description" VARCHAR );
CREATE TABLE products_for_hire_Payments( "payment_id" INTEGER PRIMARY KEY, "booking_id" INTEGER, "customer_id" INTEGER NOT NULL, "payment_type_code" VARCHAR NOT NULL, "amount_paid_in_full_yn" VARCHAR, "payment_date" DATETIME, "amount_due" DECIMAL(19,4), "amount_paid" DECIMAL(19,4), FOREIGN KEY ("booking_id" ) REFERENCES products_for_hire_Bookings ("booking_id" ), FOREIGN KEY ("customer_id" ) REFERENCES products_for_hire_Customers ("customer_id" ) );
CREATE TABLE products_for_hire_Products_Booked( "booking_id" INTEGER NOT NULL, "product_id" INTEGER NOT NULL, "returned_yn" VARCHAR, "returned_late_yn" VARCHAR, "booked_count" INTEGER, "booked_amount" FLOAT NULL, PRIMARY KEY ("booking_id", "product_id"), FOREIGN KEY ("booking_id" ) REFERENCES products_for_hire_Bookings ("booking_id" ), FOREIGN KEY ("product_id" ) REFERENCES products_for_hire_Products_for_Hire ("product_id" ) );
CREATE TABLE products_for_hire_View_Product_Availability( "product_id" INTEGER NOT NULL, "booking_id" INTEGER NOT NULL, "status_date" DATETIME PRIMARY KEY, "available_yn" VARCHAR, FOREIGN KEY ("booking_id" ) REFERENCES products_for_hire_Bookings ("booking_id" ), FOREIGN KEY ("product_id" ) REFERENCES products_for_hire_Products_for_Hire ("product_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\products_gen_characteristics
CREATE TABLE products_gen_characteristics_Ref_Characteristic_Types( "characteristic_type_code" VARCHAR PRIMARY KEY, "characteristic_type_description" VARCHAR );
CREATE TABLE products_gen_characteristics_Ref_Colors( "color_code" VARCHAR PRIMARY KEY, "color_description" VARCHAR );
CREATE TABLE products_gen_characteristics_Ref_Product_Categories( "product_category_code" VARCHAR PRIMARY KEY, "product_category_description" VARCHAR, "unit_of_measure" VARCHAR );
CREATE TABLE products_gen_characteristics_Characteristics( "characteristic_id" INTEGER PRIMARY KEY, "characteristic_type_code" VARCHAR NOT NULL, "characteristic_data_type" VARCHAR, "characteristic_name" VARCHAR, "other_characteristic_details" VARCHAR, FOREIGN KEY ("characteristic_type_code" ) REFERENCES products_gen_characteristics_Ref_Characteristic_Types ("characteristic_type_code" ) );
CREATE TABLE products_gen_characteristics_Products( "product_id" INTEGER PRIMARY KEY, "color_code" VARCHAR NOT NULL, "product_category_code" VARCHAR NOT NULL, "product_name" VARCHAR, "typical_buying_price" VARCHAR, "typical_selling_price" VARCHAR, "product_description" VARCHAR, "other_product_details" VARCHAR, FOREIGN KEY ("product_category_code" ) REFERENCES products_gen_characteristics_Ref_Product_Categories ("product_category_code" ),FOREIGN KEY ("color_code" ) REFERENCES products_gen_characteristics_Ref_Colors ("color_code" ) );
CREATE TABLE products_gen_characteristics_Product_Characteristics( "product_id" INTEGER NOT NULL, "characteristic_id" INTEGER NOT NULL, "product_characteristic_value" VARCHAR, FOREIGN KEY ("characteristic_id" ) REFERENCES products_gen_characteristics_Characteristics ("characteristic_id" ), FOREIGN KEY ("product_id" ) REFERENCES products_gen_characteristics_Products ("product_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\product_catalog
CREATE TABLE product_catalog_Attribute_Definitions( "attribute_id" INTEGER PRIMARY KEY, "attribute_name" VARCHAR, "attribute_data_type" VARCHAR );
CREATE TABLE product_catalog_Catalogs( "catalog_id" INTEGER PRIMARY KEY, "catalog_name" VARCHAR, "catalog_publisher" VARCHAR, "date_of_publication" DATETIME, "date_of_latest_revision" DATETIME );
CREATE TABLE product_catalog_Catalog_Structure( "catalog_level_number" INTEGER PRIMARY KEY, "catalog_id" INTEGER NOT NULL, "catalog_level_name" VARCHAR, FOREIGN KEY ("catalog_id" ) REFERENCES product_catalog_Catalogs ("catalog_id" ) );
CREATE TABLE product_catalog_Catalog_Contents( "catalog_entry_id" INTEGER PRIMARY KEY, "catalog_level_number" INTEGER NOT NULL, "parent_entry_id" INTEGER, "previous_entry_id" INTEGER, "next_entry_id" INTEGER, "catalog_entry_name" VARCHAR, "product_stock_number" VARCHAR, "price_in_dollars" DOUBLE NULL, "price_in_euros" DOUBLE NULL, "price_in_pounds" DOUBLE NULL, "capacity" VARCHAR, "length" VARCHAR, "height" VARCHAR, "width" VARCHAR, FOREIGN KEY ("catalog_level_number" ) REFERENCES product_catalog_Catalog_Structure ("catalog_level_number" ) );
CREATE TABLE product_catalog_Catalog_Contents_Additional_Attributes( "catalog_entry_id" INTEGER NOT NULL, "catalog_level_number" INTEGER NOT NULL, "attribute_id" INTEGER NOT NULL, "attribute_value" VARCHAR NOT NULL, FOREIGN KEY ("catalog_entry_id" ) REFERENCES product_catalog_Catalog_Contents ("catalog_entry_id" ), FOREIGN KEY ("catalog_level_number" ) REFERENCES product_catalog_Catalog_Structure ("catalog_level_number" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\program_share
CREATE TABLE program_share_program( "Program_ID" int, "Name" text, "Origin" text, "Launch" real, "Owner" text, PRIMARY KEY ("Program_ID") );
CREATE TABLE program_share_channel( "Channel_ID" int, "Name" text, "Owner" text, "Share_in_percent" real, "Rating_in_percent" real, PRIMARY KEY ("Channel_ID") );
CREATE TABLE program_share_broadcast( "Channel_ID" int, "Program_ID" int, "Time_of_day" text, PRIMARY KEY ("Channel_ID","Program_ID"), FOREIGN KEY ("Channel_ID") REFERENCES program_share_channel ("Channel_ID"), FOREIGN KEY ("Program_ID") REFERENCES program_share_program ("Program_ID") );
CREATE TABLE program_share_broadcast_share( "Channel_ID" int, "Program_ID" int, "Date" text, "Share_in_percent" real, PRIMARY KEY ("Channel_ID","Program_ID"), FOREIGN KEY ("Channel_ID") REFERENCES program_share_channel ("Channel_ID"), FOREIGN KEY ("Program_ID") REFERENCES program_share_program ("Program_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\protein_institute
CREATE TABLE protein_institute_building( "building_id" text, "Name" text, "Street_address" text, "Years_as_tallest" text, "Height_feet" int, "Floors" int, PRIMARY KEY("building_id") );
CREATE TABLE protein_institute_Institution( "Institution_id" text, "Institution" text, "Location" text, "Founded" real, "Type" text, "Enrollment" int, "Team" text, "Primary_Conference" text, "building_id" text, PRIMARY KEY("Institution_id"), FOREIGN KEY ("building_id") REFERENCES protein_institute_building ("building_id") );
CREATE TABLE protein_institute_protein( "common_name" text, "protein_name" text, "divergence_from_human_lineage" real, "accession_number" text, "sequence_length" real, "sequence_identity_to_human_protein" text, "Institution_id" text, PRIMARY KEY("common_name"), FOREIGN KEY("Institution_id") REFERENCES protein_institute_Institution ("Institution_id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\race_track
CREATE TABLE race_track_track( "Track_ID" int, "Name" text, "Location" text, "Seating" real, "Year_Opened" real, PRIMARY KEY ("Track_ID") );
CREATE TABLE race_track_race( "Race_ID" int, "Name" text, "Class" text, "Date" text, "Track_ID" int, PRIMARY KEY ("Race_ID"), FOREIGN KEY ("Track_ID") REFERENCES race_track_track ("Track_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\railway
CREATE TABLE railway_railway( "Railway_ID" int, "Railway" text, "Builder" text, "Built" text, "Wheels" text, "Location" text, "ObjectNumber" text, PRIMARY KEY ("Railway_ID") );
CREATE TABLE railway_train( "Train_ID" int, "Train_Num" text, "Name" text, "From" text, "Arrival" text, "Railway_ID" int, PRIMARY KEY ("Train_ID"), FOREIGN KEY ("Railway_ID") REFERENCES railway_railway ("Railway_ID") );
CREATE TABLE railway_manager( "Manager_ID" int, "Name" text, "Country" text, "Working_year_starts" text, "Age" int, "Level" int, PRIMARY KEY ("Manager_ID") );
CREATE TABLE railway_railway_manage( "Railway_ID" int, "Manager_ID" int, "From_Year" text, PRIMARY KEY ("Railway_ID","Manager_ID"), FOREIGN KEY ("Manager_ID") REFERENCES railway_manager ("Manager_ID"), FOREIGN KEY ("Railway_ID") REFERENCES railway_railway ("Railway_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\real_estate_properties
CREATE TABLE real_estate_properties_Ref_Feature_Types( "feature_type_code" VARCHAR PRIMARY KEY, "feature_type_name" VARCHAR );
CREATE TABLE real_estate_properties_Ref_Property_Types( "property_type_code" VARCHAR PRIMARY KEY, "property_type_description" VARCHAR );
CREATE TABLE real_estate_properties_Other_Available_Features( "feature_id" INTEGER PRIMARY KEY, "feature_type_code" VARCHAR NOT NULL, "feature_name" VARCHAR, "feature_description" VARCHAR, FOREIGN KEY ("feature_type_code" ) REFERENCES real_estate_properties_Ref_Feature_Types ("feature_type_code" ) );
CREATE TABLE real_estate_properties_Properties( "property_id" INTEGER PRIMARY KEY, "property_type_code" VARCHAR NOT NULL, "date_on_market" DATETIME, "date_sold" DATETIME, "property_name" VARCHAR, "property_address" VARCHAR, "room_count" INTEGER, "vendor_requested_price" DECIMAL(19,4), "buyer_offered_price" DECIMAL(19,4), "agreed_selling_price" DECIMAL(19,4), "apt_feature_1" VARCHAR, "apt_feature_2" VARCHAR, "apt_feature_3" VARCHAR, "fld_feature_1" VARCHAR, "fld_feature_2" VARCHAR, "fld_feature_3" VARCHAR, "hse_feature_1" VARCHAR, "hse_feature_2" VARCHAR, "hse_feature_3" VARCHAR, "oth_feature_1" VARCHAR, "oth_feature_2" VARCHAR, "oth_feature_3" VARCHAR, "shp_feature_1" VARCHAR, "shp_feature_2" VARCHAR, "shp_feature_3" VARCHAR, "other_property_details" VARCHAR, FOREIGN KEY ("property_type_code" ) REFERENCES real_estate_properties_Ref_Property_Types ("property_type_code" ) );
CREATE TABLE real_estate_properties_Other_Property_Features( "property_id" INTEGER NOT NULL, "feature_id" INTEGER NOT NULL, "property_feature_description" VARCHAR, FOREIGN KEY ("feature_id" ) REFERENCES real_estate_properties_Other_Available_Features ("feature_id" ), FOREIGN KEY ("property_id" ) REFERENCES real_estate_properties_Properties ("property_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\real_estate_rentals
CREATE TABLE real_estate_rentals_Ref_Age_Categories( "age_category_code" VARCHAR PRIMARY KEY, "age_category_description" VARCHAR );
CREATE TABLE real_estate_rentals_Ref_Property_Types( "property_type_code" VARCHAR PRIMARY KEY, "property_type_description" VARCHAR );
CREATE TABLE real_estate_rentals_Ref_Room_Types( "room_type_code" VARCHAR PRIMARY KEY, "room_type_description" VARCHAR );
CREATE TABLE real_estate_rentals_Ref_User_Categories( "user_category_code" VARCHAR PRIMARY KEY, "user_category_description" VARCHAR );
CREATE TABLE real_estate_rentals_Addresses( "address_id" INTEGER PRIMARY KEY, "line_1_number_building" VARCHAR, "line_2_number_street" VARCHAR, "line_3_area_locality" VARCHAR, "town_city" VARCHAR, "zip_postcode" VARCHAR, "county_state_province" VARCHAR, "country" VARCHAR, "other_address_details" VARCHAR );
CREATE TABLE real_estate_rentals_Features( "feature_id" INTEGER PRIMARY KEY, "feature_name" VARCHAR, "feature_description" VARCHAR );
CREATE TABLE real_estate_rentals_Users( "user_id" INTEGER PRIMARY KEY, "age_category_code" VARCHAR, "user_category_code" VARCHAR, "user_address_id" INTEGER NOT NULL, "is_buyer" VARCHAR, "is_seller" VARCHAR, "login_name" VARCHAR, "password" VARCHAR, "date_registered" DATETIME, "first_name" VARCHAR, "middle_name" VARCHAR, "last_name" VARCHAR, "other_user_details" VARCHAR );
CREATE TABLE real_estate_rentals_Properties( "property_id" INTEGER PRIMARY KEY, "property_address_id" INTEGER NOT NULL, "owner_user_id" INTEGER NOT NULL, "property_type_code" VARCHAR NOT NULL, "date_on_market" DATETIME, "date_off_market" DATETIME, "property_name" VARCHAR, "property_description" VARCHAR, "garage_yn" VARCHAR, "parking_lots" VARCHAR, "room_count" VARCHAR, "vendor_requested_price" DOUBLE NULL, "price_min" DOUBLE NULL, "price_max" DOUBLE NULL, "other_property_details" VARCHAR, FOREIGN KEY ("owner_user_id" ) REFERENCES real_estate_rentals_Users ("user_id" ), FOREIGN KEY ("property_address_id" ) REFERENCES real_estate_rentals_Addresses ("address_id" ), FOREIGN KEY ("property_type_code" ) REFERENCES real_estate_rentals_Ref_Property_Types ("property_type_code" ) );
CREATE TABLE real_estate_rentals_Property_Features( "property_id" INTEGER NOT NULL, "feature_id" INTEGER NOT NULL, "feature_value" VARCHAR, "property_feature_description" VARCHAR, FOREIGN KEY ("feature_id" ) REFERENCES real_estate_rentals_Features ("feature_id" ), FOREIGN KEY ("property_id" ) REFERENCES real_estate_rentals_Properties ("property_id" ) );
CREATE TABLE real_estate_rentals_Property_Photos( "property_id" INTEGER NOT NULL, "photo_seq" INTEGER NOT NULL, "photo_title" VARCHAR, "photo_description" VARCHAR, "photo_filename" VARCHAR, FOREIGN KEY ("property_id" ) REFERENCES real_estate_rentals_Properties ("property_id" ) );
CREATE TABLE real_estate_rentals_Rooms( "property_id" INTEGER NOT NULL, "room_number" VARCHAR NOT NULL, "room_type_code" VARCHAR NOT NULL, "room_size" VARCHAR, "other_room_details" VARCHAR, FOREIGN KEY ("property_id" ) REFERENCES real_estate_rentals_Properties ("property_id" ), FOREIGN KEY ("room_type_code" ) REFERENCES real_estate_rentals_Ref_Room_Types ("room_type_code" ) );
CREATE TABLE real_estate_rentals_User_Property_History( "user_id" INTEGER NOT NULL, "property_id" INTEGER NOT NULL, "datestamp" DATETIME NOT NULL, FOREIGN KEY ("user_id" ) REFERENCES real_estate_rentals_Users ("user_id" ), FOREIGN KEY ("property_id" ) REFERENCES real_estate_rentals_Properties ("property_id" ) );
CREATE TABLE real_estate_rentals_User_Searches( "user_id" INTEGER NOT NULL, "search_seq" INTEGER NOT NULL, "search_datetime" DATETIME, "search_string" VARCHAR, FOREIGN KEY ("user_id" ) REFERENCES real_estate_rentals_Users ("user_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\region_building
CREATE TABLE region_building_region( "Region_ID" int, "Name" text, "Capital" text, "Area" int, "Population" int, PRIMARY KEY ("Region_ID") );
CREATE TABLE region_building_building( "Building_ID" int, "Region_ID" int, "Name" text, "Address" text, "Number_of_Stories" int, "Completed_Year" int, PRIMARY KEY ("Building_ID"), FOREIGN KEY ("Region_ID") REFERENCES region_building_region ("Region_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\restaurants
CREATE TABLE restaurants_GEOGRAPHIC( "CITY_NAME" text, "COUNTY" text, "REGION" text, primary key("CITY_NAME") );
CREATE TABLE restaurants_RESTAURANT( "ID" int, "NAME" text, "FOOD_TYPE" text, "CITY_NAME" text, "RATING" real, primary key("ID"), foreign key ("CITY_NAME") references restaurants_GEOGRAPHIC ("CITY_NAME") );
CREATE TABLE restaurants_LOCATION( "RESTAURANT_ID" int, "HOUSE_NUMBER" int, "STREET_NAME" text, "CITY_NAME" text, primary key("RESTAURANT_ID"), foreign key ("CITY_NAME") references restaurants_GEOGRAPHIC ("CITY_NAME"), foreign key ("RESTAURANT_ID") references restaurants_RESTAURANT ("ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\restaurant_1
create table restaurant_1_Student( StuID INTEGER PRIMARY KEY, LName VARCHAR, Fname VARCHAR, Age INTEGER, Sex VARCHAR, Major INTEGER, Advisor INTEGER, city_code VARCHAR );
create table restaurant_1_Restaurant( ResID INTEGER PRIMARY KEY, ResName VARCHAR, Address VARCHAR, Rating INTEGER );
create table restaurant_1_Restaurant_Type( ResTypeID INTEGER PRIMARY KEY, ResTypeName VARCHAR, ResTypeDescription VARCHAR );
create table restaurant_1_Type_Of_Restaurant( ResID INTEGER, ResTypeID INTEGER, FOREIGN KEY(ResID) REFERENCES restaurant_1_Restaurant (ResID), FOREIGN KEY(ResTypeID) REFERENCES restaurant_1_Restaurant_Type (ResTypeID) );
create table restaurant_1_Visits_Restaurant( StuID INTEGER, ResID INTEGER, Time TIMESTAMP, Spent FLOAT, FOREIGN KEY(StuID) REFERENCES restaurant_1_Student (StuID), FOREIGN KEY(ResID) REFERENCES restaurant_1_Restaurant (ResID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\restaurant_bills
CREATE TABLE restaurant_bills_customer( "Customer_ID" int, "Name" text, "Nationality" text, "Card_Credit" real, "Level_of_Membership" int, PRIMARY KEY ("Customer_ID") );
CREATE TABLE restaurant_bills_branch( "Branch_ID" int, "Manager" text, "Years_opened" int, "Location_of_office" text, PRIMARY KEY ("Branch_ID") );
CREATE TABLE restaurant_bills_customer_order( "Customer_ID" int, "Branch_ID" int, "Dish_Name" text, "Quantity" int, PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"), FOREIGN KEY ("Customer_ID") REFERENCES restaurant_bills_customer ("Customer_ID"), FOREIGN KEY ("Branch_ID") REFERENCES restaurant_bills_branch ("Branch_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\riding_club
CREATE TABLE riding_club_player( "Player_ID" int, "Sponsor_name" text, "Player_name" text, "Gender" text, "Residence" text, "Occupation" text, "Votes" int, "Rank" text, PRIMARY KEY ("Player_ID") );
CREATE TABLE riding_club_club( "Club_ID" int, "Club_name" text, "Region" text, "Start_year" int, PRIMARY KEY ("Club_ID") );
CREATE TABLE riding_club_coach( "Coach_ID" int, "Coach_name" text, "Gender" text, "Club_ID" int, "Rank" int, PRIMARY KEY ("Coach_ID"), FOREIGN KEY ("Club_ID") REFERENCES riding_club_club ("Club_ID") );
CREATE TABLE riding_club_player_coach( "Player_ID" int, "Coach_ID" int, "Starting_year" int, PRIMARY KEY ("Player_ID","Coach_ID"), FOREIGN KEY ("Player_ID") REFERENCES riding_club_player ("Player_ID"), FOREIGN KEY ("Coach_ID") REFERENCES riding_club_coach ("Coach_ID") );
CREATE TABLE riding_club_match_result( "Rank" int, "Club_ID" int, "Gold" int, "Big_Silver" int, "Small_Silver" int, "Bronze" int, "Points" int, PRIMARY KEY ("Rank","Club_ID"), FOREIGN KEY ("Club_ID") REFERENCES riding_club_club ("Club_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\roller_coaster
CREATE TABLE roller_coaster_country( "Country_ID" int, "Name" text, "Population" int, "Area" int, "Languages" text, PRIMARY KEY ("Country_ID") );
CREATE TABLE roller_coaster_roller_coaster( "Roller_Coaster_ID" int, "Name" text, "Park" text, "Country_ID" int, "Length" real, "Height" real, "Speed" text, "Opened" text, "Status" text, PRIMARY KEY ("Roller_Coaster_ID"), FOREIGN KEY ("Country_ID") REFERENCES roller_coaster_country ("Country_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\sakila_1
CREATE TABLE sakila_1_actor( actor_id INTEGER NOT NULL, first_name VARCHAR NOT NULL, last_name VARCHAR NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id) );
CREATE TABLE sakila_1_language( language_id INTEGER NOT NULL, name VARCHAR NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (language_id) );
CREATE TABLE sakila_1_country( country_id INTEGER NOT NULL, country VARCHAR NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (country_id) );
CREATE TABLE sakila_1_city( city_id INTEGER NOT NULL, city VARCHAR NOT NULL, country_id INTEGER NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (city_id), FOREIGN KEY (country_id) REFERENCES sakila_1_country (country_id) );
CREATE TABLE sakila_1_address( address_id INTEGER NOT NULL, address VARCHAR NOT NULL, address2 VARCHAR , district VARCHAR NOT NULL, city_id INTEGER NOT NULL, postal_code VARCHAR , phone VARCHAR NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (address_id), FOREIGN KEY (city_id) REFERENCES sakila_1_city (city_id) );
CREATE TABLE sakila_1_category( category_id INTEGER NOT NULL, name VARCHAR NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (category_id) );
CREATE TABLE sakila_1_staff( staff_id INTEGER NOT NULL, first_name VARCHAR NOT NULL, last_name VARCHAR NOT NULL, address_id INTEGER NOT NULL, picture BLOB , email VARCHAR , store_id INTEGER NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, username VARCHAR NOT NULL, password VARCHAR , last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (staff_id), FOREIGN KEY (address_id) REFERENCES sakila_1_address (address_id) );
CREATE TABLE sakila_1_store( store_id INTEGER NOT NULL, manager_staff_id INTEGER NOT NULL, address_id INTEGER NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (store_id), FOREIGN KEY (manager_staff_id) REFERENCES sakila_1_staff (staff_id), FOREIGN KEY (address_id) REFERENCES sakila_1_address (address_id) );
CREATE TABLE sakila_1_customer( customer_id INTEGER NOT NULL, store_id INTEGER NOT NULL, first_name VARCHAR NOT NULL, last_name VARCHAR NOT NULL, email VARCHAR , address_id INTEGER NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, create_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (customer_id), FOREIGN KEY (address_id) REFERENCES sakila_1_address (address_id), FOREIGN KEY (store_id) REFERENCES sakila_1_store (store_id) );
CREATE TABLE sakila_1_film( film_id INTEGER NOT NULL, title VARCHAR NOT NULL, description TEXT , release_year DATE , language_id INTEGER NOT NULL, original_language_id INTEGER , rental_duration INTEGER NOT NULL, rental_rate DECIMAL(4,2) NOT NULL, length INTEGER , replacement_cost DECIMAL(5,2) NOT NULL, rating integer DEFAULT 'G', special_features text , last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id), FOREIGN KEY (language_id) REFERENCES sakila_1_language (language_id), FOREIGN KEY (original_language_id) REFERENCES sakila_1_language (language_id) );
CREATE TABLE sakila_1_film_actor( actor_id INTEGER NOT NULL, film_id INTEGER NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id,film_id), FOREIGN KEY (actor_id) REFERENCES sakila_1_actor (actor_id), FOREIGN KEY (film_id) REFERENCES sakila_1_film (film_id) );
CREATE TABLE sakila_1_film_category( film_id INTEGER NOT NULL, category_id INTEGER NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id, category_id), FOREIGN KEY (film_id) REFERENCES sakila_1_film (film_id), FOREIGN KEY (category_id) REFERENCES sakila_1_category (category_id) );
CREATE TABLE sakila_1_film_text( film_id INTEGER NOT NULL, title VARCHAR NOT NULL, description TEXT, PRIMARY KEY (film_id) );
CREATE TABLE sakila_1_inventory( inventory_id INTEGER NOT NULL, film_id INTEGER NOT NULL, store_id INTEGER NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (inventory_id), FOREIGN KEY (store_id) REFERENCES sakila_1_store (store_id), FOREIGN KEY (film_id) REFERENCES sakila_1_film (film_id) );
CREATE TABLE sakila_1_rental( rental_id INT NOT NULL, rental_date DATETIME NOT NULL, inventory_id INTEGER NOT NULL, customer_id INTEGER NOT NULL, return_date DATETIME , staff_id INTEGER NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (rental_id), FOREIGN KEY (staff_id) REFERENCES sakila_1_staff (staff_id), FOREIGN KEY (inventory_id) REFERENCES sakila_1_inventory (inventory_id), FOREIGN KEY (customer_id) REFERENCES sakila_1_customer (customer_id) );
CREATE TABLE sakila_1_payment( payment_id INTEGER NOT NULL, customer_id INTEGER NOT NULL, staff_id INTEGER NOT NULL, rental_id INT , amount DECIMAL(5,2) NOT NULL, payment_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (payment_id), FOREIGN KEY (rental_id) REFERENCES sakila_1_rental (rental_id), FOREIGN KEY (customer_id) REFERENCES sakila_1_customer (customer_id), FOREIGN KEY (staff_id) REFERENCES sakila_1_staff (staff_id) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\scholar
CREATE TABLE scholar_venue( "venueId" integer NOT NULL , "venueName" VARCHAR , PRIMARY KEY ("venueId") );
CREATE TABLE scholar_author( "authorId" integer NOT NULL , "authorName" VARCHAR , PRIMARY KEY ("authorId") );
CREATE TABLE scholar_dataset( "datasetId" integer NOT NULL , "datasetName" VARCHAR , PRIMARY KEY ("datasetId") );
CREATE TABLE scholar_journal( "journalId" integer NOT NULL , "journalName" VARCHAR , PRIMARY KEY ("journalId") );
CREATE TABLE scholar_keyphrase( "keyphraseId" integer NOT NULL , "keyphraseName" VARCHAR , PRIMARY KEY ("keyphraseId") );
CREATE TABLE scholar_paper( "paperId" integer NOT NULL , "title" VARCHAR , "venueId" integer , "year" integer , "numCiting" integer , "numCitedBy" integer , "journalId" integer , PRIMARY KEY ("paperId") , FOREIGN KEY("journalId") REFERENCES scholar_journal ("journalId") , FOREIGN KEY("venueId") REFERENCES scholar_venue ("venueId") );
CREATE TABLE scholar_cite( "citingPaperId" integer NOT NULL , "citedPaperId" integer NOT NULL , PRIMARY KEY ("citingPaperId","citedPaperId") , FOREIGN KEY("citedpaperId") REFERENCES scholar_paper ("paperId") , FOREIGN KEY("citingpaperId") REFERENCES scholar_paper ("paperId") );
CREATE TABLE scholar_paperDataset( "paperId" integer , "datasetId" integer , PRIMARY KEY ("datasetId", "paperId") );
CREATE TABLE scholar_paperKeyphrase( "paperId" integer , "keyphraseId" integer , PRIMARY KEY ("keyphraseId","paperId") , FOREIGN KEY("paperId") REFERENCES scholar_paper ("paperId") , FOREIGN KEY("keyphraseId") REFERENCES scholar_keyphrase ("keyphraseId") );
CREATE TABLE scholar_writes( "paperId" integer , "authorId" integer , PRIMARY KEY ("paperId","authorId") , FOREIGN KEY("paperId") REFERENCES scholar_paper ("paperId") , FOREIGN KEY("authorId") REFERENCES scholar_author ("authorId") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\school_bus
CREATE TABLE school_bus_driver( "Driver_ID" int, "Name" text, "Party" text, "Home_city" text, "Age" int, PRIMARY KEY ("Driver_ID") );
CREATE TABLE school_bus_school( "School_ID" int, "Grade" text, "School" text, "Location" text, "Type" text, PRIMARY KEY ("School_ID") );
CREATE TABLE school_bus_school_bus( "School_ID" int, "Driver_ID" int, "Years_Working" int, "If_full_time" bool, PRIMARY KEY ("School_ID","Driver_ID"), FOREIGN KEY ("School_ID") REFERENCES school_bus_school ("School_ID"), FOREIGN KEY ("Driver_ID") REFERENCES school_bus_driver ("Driver_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\school_finance
CREATE TABLE school_finance_School( "School_id" int, "School_name" text, "Location" text, "Mascot" text, "Enrollment" int, "IHSAA_Class" text, "IHSAA_Football_Class" text, "County" text, PRIMARY KEY ("School_id") );
CREATE TABLE school_finance_budget( "School_id" int, "Year" int, "Budgeted" int, "total_budget_percent_budgeted" real, "Invested" int, "total_budget_percent_invested" real, "Budget_invested_percent" text, PRIMARY KEY("School_id","YEAR"), FOREIGN KEY("School_id") REFERENCES school_finance_School ("School_id") );
CREATE TABLE school_finance_endowment( "endowment_id" int, "School_id" int, "donator_name" text, "amount" real, PRIMARY KEY("endowment_id"), FOREIGN KEY("School_id") REFERENCES school_finance_School ("School_id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\school_player
CREATE TABLE school_player_school( "School_ID" int, "School" text, "Location" text, "Enrollment" real, "Founded" real, "Denomination" text, "Boys_or_Girls" text, "Day_or_Boarding" text, "Year_Entered_Competition" real, "School_Colors" text, PRIMARY KEY ("School_Id") );
CREATE TABLE school_player_school_details( "School_ID" int, "Nickname" text, "Colors" text, "League" text, "Class" text, "Division" text, PRIMARY KEY ("School_Id"), FOREIGN KEY ("School_ID") REFERENCES school_player_school ("School_ID") );
CREATE TABLE school_player_school_performance( "School_Id" int, "School_Year" text, "Class_A" text, "Class_AA" text, PRIMARY KEY ("School_Id","School_Year"), FOREIGN KEY ("School_ID") REFERENCES school_player_school ("School_ID") );
CREATE TABLE school_player_player( "Player_ID" int, "Player" text, "Team" text, "Age" int, "Position" text, "School_ID" int, PRIMARY KEY ("Player_ID"), FOREIGN KEY ("School_ID") REFERENCES school_player_school ("School_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\scientist_1
create table scientist_1_Scientists( SSN int, Name VARCHAR not null, Primary Key (SSN) );
Create table scientist_1_Projects( Code VARCHAR, Name VARCHAR not null, Hours int, Primary Key (Code) );
create table scientist_1_AssignedTo( Scientist int not null, Project VARCHAR not null, Primary Key (Scientist, Project), Foreign Key (Scientist) references scientist_1_Scientists (SSN), Foreign Key (Project) references scientist_1_Projects (Code) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\ship_1
CREATE TABLE ship_1_Ship( "Ship_ID" int, "Name" text, "Type" text, "Built_Year" real, "Class" text, "Flag" text, PRIMARY KEY ("Ship_ID") );
CREATE TABLE ship_1_captain( "Captain_ID" int, "Name" text, "Ship_ID" int, "age" text, "Class" text, "Rank" text, PRIMARY KEY ("Captain_ID"), FOREIGN KEY ("Ship_ID") REFERENCES ship_1_Ship ("Ship_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\ship_mission
CREATE TABLE ship_mission_ship( "Ship_ID" int, "Name" text, "Type" text, "Nationality" text, "Tonnage" int, PRIMARY KEY ("Ship_ID") );
CREATE TABLE ship_mission_mission( "Mission_ID" int, "Ship_ID" int, "Code" text, "Launched_Year" int, "Location" text, "Speed_knots" int, "Fate" text, PRIMARY KEY ("Mission_ID"), FOREIGN KEY ("Ship_ID") REFERENCES ship_mission_ship ("Ship_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\shop_membership
CREATE TABLE shop_membership_member( "Member_ID" int, "Card_Number" text, "Name" text, "Hometown" text, "Level" int, PRIMARY KEY ("Member_ID") );
CREATE TABLE shop_membership_branch( "Branch_ID" int, "Name" text, "Open_year" text, "Address_road" text, "City" text, "membership_amount" text, PRIMARY KEY ("Branch_ID") );
CREATE TABLE shop_membership_membership_register_branch( "Member_ID" int, "Branch_ID" int, "Register_Year" text, PRIMARY KEY ("Member_ID"), FOREIGN KEY ("Member_ID") REFERENCES shop_membership_member ("Member_ID"), FOREIGN KEY ("Branch_ID") REFERENCES shop_membership_branch ("Branch_ID") );
CREATE TABLE shop_membership_purchase( "Member_ID" int, "Branch_ID" int, "Year" text, "Total_pounds" real, PRIMARY KEY ("Member_ID","Branch_ID","Year"), FOREIGN KEY ("Member_ID") REFERENCES shop_membership_member ("Member_ID"), FOREIGN KEY ("Branch_ID") REFERENCES shop_membership_branch ("Branch_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\singer
CREATE TABLE singer_singer( "Singer_ID" int, "Name" text, "Birth_Year" real, "Net_Worth_Millions" real, "Citizenship" text, PRIMARY KEY ("Singer_ID") );
CREATE TABLE singer_song( "Song_ID" int, "Title" text, "Singer_ID" int, "Sales" real, "Highest_Position" real, PRIMARY KEY ("Song_ID"), FOREIGN KEY ("Singer_ID") REFERENCES singer_singer ("Singer_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\sing_contest
CREATE TABLE sing_contest_participants( "id" int, "name" text, "popularity" real, primary key ("id") );
CREATE TABLE sing_contest_songs( "id" int, "language" text, "original_artist" text, "name" text, "english_translation" text, primary key ("id") );
CREATE TABLE sing_contest_performance_score( "participant_id" int, "songs_id" int, "voice_sound_quality" real, "rhythm_tempo" real, "stage_presence" real, primary key ("participant_id", "songs_id"), foreign key("participant_id") references sing_contest_participants ("id"), foreign key("songs_id") references sing_contest_songs ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\soccer_1
CREATE TABLE soccer_1_Player( "id" INTEGER PRIMARY KEY , "player_api_id" INTEGER UNIQUE, "player_name" TEXT, "player_fifa_api_id" INTEGER UNIQUE, "birthday" TEXT, "height" INTEGER, "weight" INTEGER );
CREATE TABLE soccer_1_Country( "id" INTEGER PRIMARY KEY , "name" TEXT UNIQUE );
CREATE TABLE soccer_1_League( "id" INTEGER PRIMARY KEY , "country_id" INTEGER, "name" TEXT UNIQUE, FOREIGN KEY("country_id") REFERENCES soccer_1_Country ("id") );
CREATE TABLE soccer_1_Team( "id" INTEGER PRIMARY KEY , "team_api_id" INTEGER UNIQUE, "team_fifa_api_id" INTEGER UNIQUE, "team_long_name" TEXT, "team_short_name" TEXT );
CREATE TABLE soccer_1_Player_Attributes( "id" INTEGER PRIMARY KEY , "player_fifa_api_id" INTEGER, "player_api_id" INTEGER, "date" TEXT, "overall_rating" INTEGER, "potential" INTEGER, "preferred_foot" TEXT, "attacking_work_rate" TEXT, "defensive_work_rate" TEXT, "crossing" INTEGER, "finishing" INTEGER, "heading_accuracy" INTEGER, "short_passing" INTEGER, "volleys" INTEGER, "dribbling" INTEGER, "curve" INTEGER, "free_kick_accuracy" INTEGER, "long_passing" INTEGER, "ball_control" INTEGER, "acceleration" INTEGER, "sprint_speed" INTEGER, "agility" INTEGER, "reactions" INTEGER, "balance" INTEGER, "shot_power" INTEGER, "jumping" INTEGER, "stamina" INTEGER, "strength" INTEGER, "long_shots" INTEGER, "aggression" INTEGER, "interceptions" INTEGER, "positioning" INTEGER, "vision" INTEGER, "penalties" INTEGER, "marking" INTEGER, "standing_tackle" INTEGER, "sliding_tackle" INTEGER, "gk_diving" INTEGER, "gk_handling" INTEGER, "gk_kicking" INTEGER, "gk_positioning" INTEGER, "gk_reflexes" INTEGER, FOREIGN KEY("player_fifa_api_id") REFERENCES soccer_1_Player ("player_fifa_api_id"), FOREIGN KEY("player_api_id") REFERENCES soccer_1_Player ("player_api_id") );
CREATE TABLE soccer_1_Match( "id" INTEGER PRIMARY KEY , "country_id" INTEGER, "league_id" INTEGER, "season" TEXT, "stage" INTEGER, "date" TEXT, "match_api_id" INTEGER UNIQUE, "home_team_api_id" INTEGER, "away_team_api_id" INTEGER, "home_team_goal" INTEGER, "away_team_goal" INTEGER, "home_player_X1" INTEGER, "home_player_X2" INTEGER, "home_player_X3" INTEGER, "home_player_X4" INTEGER, "home_player_X5" INTEGER, "home_player_X6" INTEGER, "home_player_X7" INTEGER, "home_player_X8" INTEGER, "home_player_X9" INTEGER, "home_player_X10" INTEGER, "home_player_X11" INTEGER, "away_player_X1" INTEGER, "away_player_X2" INTEGER, "away_player_X3" INTEGER, "away_player_X4" INTEGER, "away_player_X5" INTEGER, "away_player_X6" INTEGER, "away_player_X7" INTEGER, "away_player_X8" INTEGER, "away_player_X9" INTEGER, "away_player_X10" INTEGER, "away_player_X11" INTEGER, "home_player_Y1" INTEGER, "home_player_Y2" INTEGER, "home_player_Y3" INTEGER, "home_player_Y4" INTEGER, "home_player_Y5" INTEGER, "home_player_Y6" INTEGER, "home_player_Y7" INTEGER, "home_player_Y8" INTEGER, "home_player_Y9" INTEGER, "home_player_Y10" INTEGER, "home_player_Y11" INTEGER, "away_player_Y1" INTEGER, "away_player_Y2" INTEGER, "away_player_Y3" INTEGER, "away_player_Y4" INTEGER, "away_player_Y5" INTEGER, "away_player_Y6" INTEGER, "away_player_Y7" INTEGER, "away_player_Y8" INTEGER, "away_player_Y9" INTEGER, "away_player_Y10" INTEGER, "away_player_Y11" INTEGER, "home_player_1" INTEGER, "home_player_2" INTEGER, "home_player_3" INTEGER, "home_player_4" INTEGER, "home_player_5" INTEGER, "home_player_6" INTEGER, "home_player_7" INTEGER, "home_player_8" INTEGER, "home_player_9" INTEGER, "home_player_10" INTEGER, "home_player_11" INTEGER, "away_player_1" INTEGER, "away_player_2" INTEGER, "away_player_3" INTEGER, "away_player_4" INTEGER, "away_player_5" INTEGER, "away_player_6" INTEGER, "away_player_7" INTEGER, "away_player_8" INTEGER, "away_player_9" INTEGER, "away_player_10" INTEGER, "away_player_11" INTEGER, "goal" TEXT, "shoton" TEXT, "shotoff" TEXT, "foulcommit" TEXT, "card" TEXT, "cross" TEXT, "corner" TEXT, "possession" TEXT, "B365H" NUMERIC, "B365D" NUMERIC, "B365A" NUMERIC, "BWH" NUMERIC, "BWD" NUMERIC, "BWA" NUMERIC, "IWH" NUMERIC, "IWD" NUMERIC, "IWA" NUMERIC, "LBH" NUMERIC, "LBD" NUMERIC, "LBA" NUMERIC, "PSH" NUMERIC, "PSD" NUMERIC, "PSA" NUMERIC, "WHH" NUMERIC, "WHD" NUMERIC, "WHA" NUMERIC, "SJH" NUMERIC, "SJD" NUMERIC, "SJA" NUMERIC, "VCH" NUMERIC, "VCD" NUMERIC, "VCA" NUMERIC, "GBH" NUMERIC, "GBD" NUMERIC, "GBA" NUMERIC, "BSH" NUMERIC, "BSD" NUMERIC, "BSA" NUMERIC, FOREIGN KEY("country_id") REFERENCES soccer_1_Country ("id"), FOREIGN KEY("league_id") REFERENCES soccer_1_League ("id"), FOREIGN KEY("home_team_api_id") REFERENCES soccer_1_Team ("team_api_id"), FOREIGN KEY("away_team_api_id") REFERENCES soccer_1_Team ("team_api_id"), FOREIGN KEY("home_player_1") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("home_player_2") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("home_player_3") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("home_player_4") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("home_player_5") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("home_player_6") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("home_player_7") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("home_player_8") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("home_player_9") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("home_player_10") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("home_player_11") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_1") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_2") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_3") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_4") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_5") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_6") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_7") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_8") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_9") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_10") REFERENCES soccer_1_Player ("player_api_id"), FOREIGN KEY("away_player_11") REFERENCES soccer_1_Player ("player_api_id") );
CREATE TABLE soccer_1_Team_Attributes( "id" INTEGER PRIMARY KEY , "team_fifa_api_id" INTEGER, "team_api_id" INTEGER, "date" TEXT, "buildUpPlaySpeed" INTEGER, "buildUpPlaySpeedClass" TEXT, "buildUpPlayDribbling" INTEGER, "buildUpPlayDribblingClass" TEXT, "buildUpPlayPassing" INTEGER, "buildUpPlayPassingClass" TEXT, "buildUpPlayPositioningClass" TEXT, "chanceCreationPassing" INTEGER, "chanceCreationPassingClass" TEXT, "chanceCreationCrossing" INTEGER, "chanceCreationCrossingClass" TEXT, "chanceCreationShooting" INTEGER, "chanceCreationShootingClass" TEXT, "chanceCreationPositioningClass" TEXT, "defencePressure" INTEGER, "defencePressureClass" TEXT, "defenceAggression" INTEGER, "defenceAggressionClass" TEXT, "defenceTeamWidth" INTEGER, "defenceTeamWidthClass" TEXT, "defenceDefenderLineClass" TEXT, FOREIGN KEY("team_fifa_api_id") REFERENCES soccer_1_Team ("team_fifa_api_id"), FOREIGN KEY("team_api_id") REFERENCES soccer_1_Team ("team_api_id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\soccer_2
CREATE TABLE soccer_2_College( cName VARCHAR NOT NULL, state VARCHAR, enr numeric(5,0), PRIMARY KEY (cName) );
CREATE TABLE soccer_2_Player( pID numeric(5,0) NOT NULL, pName VARCHAR, yCard VARCHAR, HS numeric(5,0), PRIMARY KEY (pID) );
CREATE TABLE soccer_2_Tryout( pID numeric(5,0), cName VARCHAR, pPos VARCHAR, decision VARCHAR, PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES soccer_2_Player (pID), FOREIGN KEY (cName) REFERENCES soccer_2_College (cName) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\soccer_3
CREATE TABLE soccer_3_club( "Club_ID" int, "Name" text, "Manager" text, "Captain" text, "Manufacturer" text, "Sponsor" text, PRIMARY KEY ("Club_ID") );
CREATE TABLE soccer_3_player( "Player_ID" real, "Name" text, "Country" text, "Earnings" real, "Events_number" int, "Wins_count" int, "Club_ID" int, PRIMARY KEY ("Player_ID"), FOREIGN KEY ("Club_ID") REFERENCES soccer_3_club ("Club_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\solvency_ii
CREATE TABLE solvency_ii_Addresses( Address_ID INTEGER NOT NULL , address_details VARCHAR, PRIMARY KEY (Address_ID), UNIQUE (Address_ID) );
CREATE TABLE solvency_ii_Locations( Location_ID INTEGER NOT NULL , Other_Details VARCHAR, PRIMARY KEY (Location_ID) );
CREATE TABLE solvency_ii_Products( Product_ID INTEGER NOT NULL, Product_Type_Code VARCHAR, Product_Name VARCHAR, Product_Price DECIMAL(20,4), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) );
CREATE TABLE solvency_ii_Parties( Party_ID INTEGER NOT NULL, Party_Details VARCHAR, PRIMARY KEY (Party_ID) );
CREATE TABLE solvency_ii_Assets( Asset_ID INTEGER NOT NULL , Other_Details VARCHAR, PRIMARY KEY (Asset_ID) );
CREATE TABLE solvency_ii_Channels( Channel_ID INTEGER NOT NULL , Other_Details VARCHAR, PRIMARY KEY (Channel_ID) );
CREATE TABLE solvency_ii_Finances( Finance_ID INTEGER NOT NULL , Other_Details VARCHAR, PRIMARY KEY (Finance_ID) );
CREATE TABLE solvency_ii_Events( Event_ID INTEGER NOT NULL , Address_ID INTEGER, Channel_ID INTEGER NOT NULL, Event_Type_Code VARCHAR, Finance_ID INTEGER NOT NULL, Location_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID), UNIQUE (Event_ID), FOREIGN KEY (Location_ID) REFERENCES solvency_ii_Locations (Location_ID), FOREIGN KEY (Address_ID) REFERENCES solvency_ii_Addresses (Address_ID), FOREIGN KEY (Finance_ID) REFERENCES solvency_ii_Finances (Finance_ID) );
CREATE TABLE solvency_ii_Products_in_Events( Product_in_Event_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Product_in_Event_ID), FOREIGN KEY (Event_ID) REFERENCES solvency_ii_Events (Event_ID), FOREIGN KEY (Product_ID) REFERENCES solvency_ii_Products (Product_ID) );
CREATE TABLE solvency_ii_Parties_in_Events( Party_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, Role_Code VARCHAR, PRIMARY KEY (Party_ID, Event_ID), FOREIGN KEY (Party_ID) REFERENCES solvency_ii_Parties (Party_ID), FOREIGN KEY (Event_ID) REFERENCES solvency_ii_Events (Event_ID) );
CREATE TABLE solvency_ii_Agreements( Document_ID INTEGER NOT NULL , Event_ID INTEGER NOT NULL, PRIMARY KEY (Document_ID), FOREIGN KEY (Event_ID) REFERENCES solvency_ii_Events (Event_ID) );
CREATE TABLE solvency_ii_Assets_in_Events( Asset_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, PRIMARY KEY (Asset_ID, Event_ID), FOREIGN KEY (Event_ID) REFERENCES solvency_ii_Events (Event_ID), FOREIGN KEY (Event_ID) REFERENCES solvency_ii_Events (Event_ID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\sports_competition
CREATE TABLE sports_competition_club( "Club_ID" int, "name" text, "Region" text, "Start_year" text, PRIMARY KEY ("Club_ID") );
CREATE TABLE sports_competition_club_rank( "Rank" real, "Club_ID" int, "Gold" real, "Silver" real, "Bronze" real, "Total" real, PRIMARY KEY ("Rank","Club_ID"), FOREIGN KEY ("Club_ID") REFERENCES sports_competition_club ("Club_ID") );
CREATE TABLE sports_competition_player( "Player_ID" int, "name" text, "Position" text, "Club_ID" int, "Apps" real, "Tries" real, "Goals" text, "Points" real, PRIMARY KEY ("Player_ID"), FOREIGN KEY ("Club_ID") REFERENCES sports_competition_club ("Club_ID") );
CREATE TABLE sports_competition_competition( "Competition_ID" int, "Year" real, "Competition_type" text, "Country" text, PRIMARY KEY ("Competition_ID") );
CREATE TABLE sports_competition_competition_result( "Competition_ID" int, "Club_ID_1" int, "Club_ID_2" int, "Score" text, PRIMARY KEY ("Competition_ID","Club_ID_1","Club_ID_2"), FOREIGN KEY ("Club_ID_1") REFERENCES sports_competition_club ("Club_ID"), FOREIGN KEY ("Club_ID_2") REFERENCES sports_competition_club ("Club_ID"), FOREIGN KEY ("Competition_ID") REFERENCES sports_competition_competition ("Competition_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\station_weather
CREATE TABLE station_weather_train( "id" int, "train_number" int, "name" text, "origin" text, "destination" text, "time" text, "interval" text, primary key ("id") );
CREATE TABLE station_weather_station( "id" int, "network_name" text, "services" text, "local_authority" text, primary key ("id") );
CREATE TABLE station_weather_route( "train_id" int, "station_id" int, primary key ("train_id", "station_id"), foreign key ("train_id") references station_weather_train ("id"), foreign key ("station_id") references station_weather_station ("id") );
CREATE TABLE station_weather_weekly_weather( "station_id" int, "day_of_week" text, "high_temperature" int, "low_temperature" int, "precipitation" real, "wind_speed_mph" int, primary key ("station_id", "day_of_week"), foreign key ("station_id") references station_weather_station ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\store_1
CREATE TABLE store_1_artists( id INTEGER PRIMARY KEY , name VARCHAR );
CREATE TABLE store_1_albums( id INTEGER PRIMARY KEY , title VARCHAR NOT NULL, artist_id INTEGER NOT NULL, FOREIGN KEY (artist_id) REFERENCES store_1_artists (id) ON DELETE NO ACTION ON UPDATE NO ACTION );
CREATE TABLE store_1_employees( id INTEGER PRIMARY KEY , last_name VARCHAR NOT NULL, first_name VARCHAR NOT NULL, title VARCHAR, reports_to INTEGER, birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR, city VARCHAR, state VARCHAR, country VARCHAR, postal_code VARCHAR, phone VARCHAR, fax VARCHAR, email VARCHAR, FOREIGN KEY (reports_to) REFERENCES store_1_employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION );
CREATE TABLE store_1_customers( id INTEGER PRIMARY KEY , first_name VARCHAR NOT NULL, last_name VARCHAR NOT NULL, company VARCHAR, address VARCHAR, city VARCHAR, state VARCHAR, country VARCHAR, postal_code VARCHAR, phone VARCHAR, fax VARCHAR, email VARCHAR NOT NULL, support_rep_id INTEGER, FOREIGN KEY (support_rep_id) REFERENCES store_1_employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION );
CREATE TABLE store_1_genres( id INTEGER PRIMARY KEY , name VARCHAR );
CREATE TABLE store_1_invoices( id INTEGER PRIMARY KEY , customer_id INTEGER NOT NULL, invoice_date TIMESTAMP NOT NULL, billing_address VARCHAR, billing_city VARCHAR, billing_state VARCHAR, billing_country VARCHAR, billing_postal_code VARCHAR, total NUMERIC(10,2) NOT NULL, FOREIGN KEY (customer_id) REFERENCES store_1_customers (id) ON DELETE NO ACTION ON UPDATE NO ACTION );
CREATE TABLE store_1_media_types( id INTEGER PRIMARY KEY , name VARCHAR );
CREATE TABLE store_1_tracks( id INTEGER PRIMARY KEY , name VARCHAR NOT NULL, album_id INTEGER, media_type_id INTEGER NOT NULL, genre_id INTEGER, composer VARCHAR, milliseconds INTEGER NOT NULL, bytes INTEGER, unit_price NUMERIC(10,2) NOT NULL, FOREIGN KEY (album_id) REFERENCES store_1_albums (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (genre_id) REFERENCES store_1_genres (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (media_type_id) REFERENCES store_1_media_types (id) ON DELETE NO ACTION ON UPDATE NO ACTION );
CREATE TABLE store_1_invoice_lines( id INTEGER PRIMARY KEY , invoice_id INTEGER NOT NULL, track_id INTEGER NOT NULL, unit_price NUMERIC(10,2) NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (invoice_id) REFERENCES store_1_invoices (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES store_1_tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION );
CREATE TABLE store_1_playlists( id INTEGER PRIMARY KEY , name VARCHAR );
CREATE TABLE store_1_playlist_tracks( playlist_id INTEGER NOT NULL, track_id INTEGER NOT NULL, CONSTRAINT PK_PlaylistTrack PRIMARY KEY (playlist_id, track_id), FOREIGN KEY (playlist_id) REFERENCES store_1_playlists (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES store_1_tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\store_product
CREATE TABLE store_product_product( "product_id" int, "product" text, "dimensions" text, "dpi" real, "pages_per_minute_color" real, "max_page_size" text, "interface" text, PRIMARY KEY ("product_id") );
CREATE TABLE store_product_store( "Store_ID" int, "Store_Name" text, "Type" text, "Area_size" real, "Number_of_product_category" real, "Ranking" int, PRIMARY KEY ("Store_ID") );
CREATE TABLE store_product_district( "District_ID" int, "District_name" text, "Headquartered_City" text, "City_Population" real, "City_Area" real, PRIMARY KEY ("District_ID") );
CREATE TABLE store_product_store_product( "Store_ID" int, "Product_ID" int, PRIMARY KEY ("Store_ID","Product_ID"), FOREIGN KEY ("Store_ID") REFERENCES store_product_store ("Store_ID"), FOREIGN KEY ("Product_ID") REFERENCES store_product_product ("Product_ID") );
CREATE TABLE store_product_store_district( "Store_ID" int, "District_ID" int, PRIMARY KEY ("Store_ID"), FOREIGN KEY ("Store_ID") REFERENCES store_product_store ("Store_ID"), FOREIGN KEY ("District_ID") REFERENCES store_product_district ("District_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\storm_record
CREATE TABLE storm_record_storm( "Storm_ID" int, "Name" text, "Dates_active" text, "Max_speed" int, "Damage_millions_USD" real, "Number_Deaths" int, PRIMARY KEY ("Storm_ID") );
CREATE TABLE storm_record_region( "Region_id" int, "Region_code" text, "Region_name" text, PRIMARY KEY ("Region_id") );
CREATE TABLE storm_record_affected_region( "Region_id" int, "Storm_ID" int, "Number_city_affected" real, PRIMARY KEY ("Region_id","Storm_ID"), FOREIGN KEY ("Region_id") REFERENCES storm_record_region ("Region_id"), FOREIGN KEY ("Storm_ID") REFERENCES storm_record_storm ("Storm_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\student_assessment
CREATE TABLE student_assessment_Addresses( address_id INTEGER NOT NULL, line_1 VARCHAR, line_2 VARCHAR, city VARCHAR, zip_postcode VARCHAR, state_province_county VARCHAR, country VARCHAR, PRIMARY KEY (address_id) );
CREATE TABLE student_assessment_People( person_id INTEGER NOT NULL, first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, cell_mobile_number VARCHAR, email_address VARCHAR, login_name VARCHAR, password VARCHAR, PRIMARY KEY (person_id) );
CREATE TABLE student_assessment_Students( student_id INTEGER NOT NULL, student_details VARCHAR, PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES student_assessment_People (person_id) );
CREATE TABLE student_assessment_Courses( course_id INTEGER NOT NULL, course_name VARCHAR, course_description VARCHAR, other_details VARCHAR, PRIMARY KEY (course_id) );
CREATE TABLE student_assessment_People_Addresses( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES student_assessment_People (person_id), FOREIGN KEY (address_id) REFERENCES student_assessment_Addresses (address_id) );
CREATE TABLE student_assessment_Student_Course_Registrations( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES student_assessment_Students (student_id), FOREIGN KEY (course_id) REFERENCES student_assessment_Courses (course_id) );
CREATE TABLE student_assessment_Student_Course_Attendance( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES student_assessment_Student_Course_Registrations (student_id,course_id) );
CREATE TABLE student_assessment_Candidates( candidate_id INTEGER NOT NULL , candidate_details VARCHAR, PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES student_assessment_People (person_id) );
CREATE TABLE student_assessment_Candidate_Assessments( candidate_id INTEGER NOT NULL, qualification VARCHAR NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code VARCHAR NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES student_assessment_Candidates (candidate_id) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\student_transcripts_tracking
CREATE TABLE student_transcripts_tracking_Addresses( "address_id" INTEGER PRIMARY KEY, "line_1" VARCHAR, "line_2" VARCHAR, "line_3" VARCHAR, "city" VARCHAR, "zip_postcode" VARCHAR, "state_province_county" VARCHAR, "country" VARCHAR, "other_address_details" VARCHAR );
CREATE TABLE student_transcripts_tracking_Courses( "course_id" INTEGER PRIMARY KEY, "course_name" VARCHAR, "course_description" VARCHAR, "other_details" VARCHAR );
CREATE TABLE student_transcripts_tracking_Departments( "department_id" INTEGER PRIMARY KEY, "department_name" VARCHAR, "department_description" VARCHAR, "other_details" VARCHAR );
CREATE TABLE student_transcripts_tracking_Degree_Programs( "degree_program_id" INTEGER PRIMARY KEY, "department_id" INTEGER NOT NULL, "degree_summary_name" VARCHAR, "degree_summary_description" VARCHAR, "other_details" VARCHAR, FOREIGN KEY ("department_id" ) REFERENCES student_transcripts_tracking_Departments ("department_id" ) );
CREATE TABLE student_transcripts_tracking_Sections( "section_id" INTEGER PRIMARY KEY, "course_id" INTEGER NOT NULL, "section_name" VARCHAR, "section_description" VARCHAR, "other_details" VARCHAR, FOREIGN KEY ("course_id" ) REFERENCES student_transcripts_tracking_Courses ("course_id" ) );
CREATE TABLE student_transcripts_tracking_Semesters( "semester_id" INTEGER PRIMARY KEY, "semester_name" VARCHAR, "semester_description" VARCHAR, "other_details" VARCHAR );
CREATE TABLE student_transcripts_tracking_Students( "student_id" INTEGER PRIMARY KEY, "current_address_id" INTEGER NOT NULL, "permanent_address_id" INTEGER NOT NULL, "first_name" VARCHAR, "middle_name" VARCHAR, "last_name" VARCHAR, "cell_mobile_number" VARCHAR, "email_address" VARCHAR, "ssn" VARCHAR, "date_first_registered" DATETIME, "date_left" DATETIME, "other_student_details" VARCHAR, FOREIGN KEY ("current_address_id" ) REFERENCES student_transcripts_tracking_Addresses ("address_id" ), FOREIGN KEY ("permanent_address_id" ) REFERENCES student_transcripts_tracking_Addresses ("address_id" ) );
CREATE TABLE student_transcripts_tracking_Student_Enrolment( "student_enrolment_id" INTEGER PRIMARY KEY, "degree_program_id" INTEGER NOT NULL, "semester_id" INTEGER NOT NULL, "student_id" INTEGER NOT NULL, "other_details" VARCHAR, FOREIGN KEY ("degree_program_id" ) REFERENCES student_transcripts_tracking_Degree_Programs ("degree_program_id" ), FOREIGN KEY ("semester_id" ) REFERENCES student_transcripts_tracking_Semesters ("semester_id" ), FOREIGN KEY ("student_id" ) REFERENCES student_transcripts_tracking_Students ("student_id" ) );
CREATE TABLE student_transcripts_tracking_Student_Enrolment_Courses( "student_course_id" INTEGER PRIMARY KEY, "course_id" INTEGER NOT NULL, "student_enrolment_id" INTEGER NOT NULL, FOREIGN KEY ("course_id" ) REFERENCES student_transcripts_tracking_Courses ("course_id" ), FOREIGN KEY ("student_enrolment_id" ) REFERENCES student_transcripts_tracking_Student_Enrolment ("student_enrolment_id" ) );
CREATE TABLE student_transcripts_tracking_Transcripts( "transcript_id" INTEGER PRIMARY KEY, "transcript_date" DATETIME, "other_details" VARCHAR );
CREATE TABLE student_transcripts_tracking_Transcript_Contents( "student_course_id" INTEGER NOT NULL, "transcript_id" INTEGER NOT NULL, FOREIGN KEY ("student_course_id" ) REFERENCES student_transcripts_tracking_Student_Enrolment_Courses ("student_course_id" ), FOREIGN KEY ("transcript_id" ) REFERENCES student_transcripts_tracking_Transcripts ("transcript_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\swimming
CREATE TABLE swimming_swimmer( "ID" int, "name" text, "Nationality" text, "meter_100" real, "meter_200" text, "meter_300" text, "meter_400" text, "meter_500" text, "meter_600" text, "meter_700" text, "Time" text, PRIMARY KEY ("ID") );
CREATE TABLE swimming_stadium( "ID" int, "name" text, "Capacity" int, "City" text, "Country" text, "Opening_year" int, PRIMARY KEY ("ID") );
CREATE TABLE swimming_event( "ID" int, "Name" text, "Stadium_ID" int, "Year" text, PRIMARY KEY ("ID"), FOREIGN KEY ("Stadium_ID") REFERENCES swimming_stadium ("ID") );
CREATE TABLE swimming_record( "ID" int, "Result" text, "Swimmer_ID" int, "Event_ID" int, PRIMARY KEY ("Swimmer_ID","Event_ID"), FOREIGN KEY ("Event_ID") REFERENCES swimming_event ("ID"), FOREIGN KEY ("Swimmer_ID") REFERENCES swimming_swimmer ("ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\theme_gallery
CREATE TABLE theme_gallery_artist( "Artist_ID" int, "Name" text, "Country" text, "Year_Join" int, "Age" int, PRIMARY KEY ("Artist_ID") );
CREATE TABLE theme_gallery_exhibition( "Exhibition_ID" int, "Year" int, "Theme" text, "Artist_ID" int, "Ticket_Price" real, PRIMARY KEY ("Exhibition_ID"), FOREIGN KEY ("Artist_ID") REFERENCES theme_gallery_artist ("Artist_ID") );
CREATE TABLE theme_gallery_exhibition_record( "Exhibition_ID" int, "Date" text, "Attendance" int, PRIMARY KEY ("Exhibition_ID","Date"), FOREIGN KEY ("Exhibition_ID") REFERENCES theme_gallery_exhibition ("Exhibition_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\tracking_grants_for_research
CREATE TABLE tracking_grants_for_research_Document_Types( "document_type_code" VARCHAR PRIMARY KEY, "document_description" VARCHAR NOT NULL );
CREATE TABLE tracking_grants_for_research_Organisation_Types( "organisation_type" VARCHAR PRIMARY KEY, "organisation_type_description" VARCHAR NOT NULL );
CREATE TABLE tracking_grants_for_research_Organisations( "organisation_id" INTEGER PRIMARY KEY, "organisation_type" VARCHAR NOT NULL, "organisation_details" VARCHAR NOT NULL, FOREIGN KEY ("organisation_type" ) REFERENCES tracking_grants_for_research_Organisation_Types ("organisation_type" ) );
CREATE TABLE tracking_grants_for_research_Grants( "grant_id" INTEGER PRIMARY KEY, "organisation_id" INTEGER NOT NULL, "grant_amount" DECIMAL(19,4) NOT NULL DEFAULT 0, "grant_start_date" DATETIME NOT NULL, "grant_end_date" DATETIME NOT NULL, "other_details" VARCHAR NOT NULL, FOREIGN KEY ("organisation_id" ) REFERENCES tracking_grants_for_research_Organisations ("organisation_id" ) );
CREATE TABLE tracking_grants_for_research_Documents( "document_id" INTEGER PRIMARY KEY, "document_type_code" VARCHAR, "grant_id" INTEGER NOT NULL, "sent_date" DATETIME NOT NULL, "response_received_date" DATETIME NOT NULL, "other_details" VARCHAR NOT NULL, FOREIGN KEY ("document_type_code" ) REFERENCES tracking_grants_for_research_Document_Types ("document_type_code" ), FOREIGN KEY ("grant_id" ) REFERENCES tracking_grants_for_research_Grants ("grant_id" ) );
CREATE TABLE tracking_grants_for_research_Projects( "project_id" INTEGER PRIMARY KEY, "organisation_id" INTEGER NOT NULL, "project_details" VARCHAR NOT NULL, FOREIGN KEY ("organisation_id" ) REFERENCES tracking_grants_for_research_Organisations ("organisation_id" ) );
CREATE TABLE tracking_grants_for_research_Research_Outcomes( "outcome_code" VARCHAR PRIMARY KEY, "outcome_description" VARCHAR NOT NULL );
CREATE TABLE tracking_grants_for_research_Project_Outcomes( "project_id" INTEGER NOT NULL, "outcome_code" VARCHAR NOT NULL, "outcome_details" VARCHAR, FOREIGN KEY ("project_id" ) REFERENCES tracking_grants_for_research_Projects ("project_id" ),FOREIGN KEY ("outcome_code" ) REFERENCES tracking_grants_for_research_Research_Outcomes ("outcome_code" ) );
CREATE TABLE tracking_grants_for_research_Staff_Roles( "role_code" VARCHAR PRIMARY KEY, "role_description" VARCHAR NOT NULL );
CREATE TABLE tracking_grants_for_research_Project_Staff( "staff_id" DOUBLE PRIMARY KEY, "project_id" INTEGER NOT NULL, "role_code" VARCHAR NOT NULL, "date_from" DATETIME, "date_to" DATETIME, "other_details" VARCHAR, FOREIGN KEY ("project_id" ) REFERENCES tracking_grants_for_research_Projects ("project_id" ),FOREIGN KEY ("role_code" ) REFERENCES tracking_grants_for_research_Staff_Roles ("role_code" ) );
CREATE TABLE tracking_grants_for_research_Research_Staff( "staff_id" INTEGER PRIMARY KEY, "employer_organisation_id" INTEGER NOT NULL, "staff_details" VARCHAR NOT NULL, FOREIGN KEY ("employer_organisation_id" ) REFERENCES tracking_grants_for_research_Organisations ("organisation_id" ) );
CREATE TABLE tracking_grants_for_research_Tasks( "task_id" INTEGER PRIMARY KEY, "project_id" INTEGER NOT NULL, "task_details" VARCHAR NOT NULL, "eg Agree Objectives" VARCHAR, FOREIGN KEY ("project_id" ) REFERENCES tracking_grants_for_research_Projects ("project_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\tracking_orders
CREATE TABLE tracking_orders_Customers( "customer_id" INTEGER PRIMARY KEY, "customer_name" VARCHAR, "customer_details" VARCHAR );
CREATE TABLE tracking_orders_Invoices( "invoice_number" INTEGER PRIMARY KEY, "invoice_date" DATETIME, "invoice_details" VARCHAR );
CREATE TABLE tracking_orders_Orders( "order_id" INTEGER PRIMARY KEY, "customer_id" INTEGER NOT NULL, "order_status" VARCHAR NOT NULL, "date_order_placed" DATETIME NOT NULL, "order_details" VARCHAR, FOREIGN KEY ("customer_id" ) REFERENCES tracking_orders_Customers ("customer_id" ) );
CREATE TABLE tracking_orders_Products( "product_id" INTEGER PRIMARY KEY, "product_name" VARCHAR, "product_details" VARCHAR );
CREATE TABLE tracking_orders_Order_Items( "order_item_id" INTEGER PRIMARY KEY, "product_id" INTEGER NOT NULL, "order_id" INTEGER NOT NULL, "order_item_status" VARCHAR NOT NULL, "order_item_details" VARCHAR, FOREIGN KEY ("order_id" ) REFERENCES tracking_orders_Orders ("order_id" ), FOREIGN KEY ("product_id" ) REFERENCES tracking_orders_Products ("product_id" ) );
CREATE TABLE tracking_orders_Shipments( "shipment_id" INTEGER PRIMARY KEY, "order_id" INTEGER NOT NULL, "invoice_number" INTEGER NOT NULL, "shipment_tracking_number" VARCHAR, "shipment_date" DATETIME, "other_shipment_details" VARCHAR, FOREIGN KEY ("order_id" ) REFERENCES tracking_orders_Orders ("order_id" ), FOREIGN KEY ("invoice_number" ) REFERENCES tracking_orders_Invoices ("invoice_number" ) );
CREATE TABLE tracking_orders_Shipment_Items( "shipment_id" INTEGER NOT NULL, "order_item_id" INTEGER NOT NULL, FOREIGN KEY ("order_item_id" ) REFERENCES tracking_orders_Order_Items ("order_item_id" ), FOREIGN KEY ("shipment_id" ) REFERENCES tracking_orders_Shipments ("shipment_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\tracking_share_transactions
CREATE TABLE tracking_share_transactions_Investors( "investor_id" INTEGER PRIMARY KEY, "Investor_details" VARCHAR );
CREATE TABLE tracking_share_transactions_Lots( "lot_id" INTEGER PRIMARY KEY, "investor_id" INTEGER NOT NULL, "lot_details" VARCHAR, FOREIGN KEY ("investor_id" ) REFERENCES tracking_share_transactions_Investors ("investor_id" ) );
CREATE TABLE tracking_share_transactions_Ref_Transaction_Types( "transaction_type_code" VARCHAR PRIMARY KEY, "transaction_type_description" VARCHAR NOT NULL );
CREATE TABLE tracking_share_transactions_Transactions( "transaction_id" INTEGER PRIMARY KEY, "investor_id" INTEGER NOT NULL, "transaction_type_code" VARCHAR NOT NULL, "date_of_transaction" DATETIME, "amount_of_transaction" DECIMAL(19,4), "share_count" VARCHAR, "other_details" VARCHAR, FOREIGN KEY ("investor_id" ) REFERENCES tracking_share_transactions_Investors ("investor_id" ),FOREIGN KEY ("transaction_type_code" ) REFERENCES tracking_share_transactions_Ref_Transaction_Types ("transaction_type_code" ) );
CREATE TABLE tracking_share_transactions_Sales( "sales_transaction_id" INTEGER PRIMARY KEY, "sales_details" VARCHAR, FOREIGN KEY ("sales_transaction_id" ) REFERENCES tracking_share_transactions_Transactions ("transaction_id" ) );
CREATE TABLE tracking_share_transactions_Purchases( "purchase_transaction_id" INTEGER NOT NULL, "purchase_details" VARCHAR NOT NULL, FOREIGN KEY ("purchase_transaction_id" ) REFERENCES tracking_share_transactions_Transactions ("transaction_id" ) );
CREATE TABLE tracking_share_transactions_Transactions_Lots( "transaction_id" INTEGER NOT NULL, "lot_id" INTEGER NOT NULL, FOREIGN KEY ("lot_id" ) REFERENCES tracking_share_transactions_Lots ("lot_id" ), FOREIGN KEY ("transaction_id" ) REFERENCES tracking_share_transactions_Transactions ("transaction_id" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\tracking_software_problems
CREATE TABLE tracking_software_problems_Problem_Category_Codes( "problem_category_code" VARCHAR PRIMARY KEY, "problem_category_description" VARCHAR );
CREATE TABLE tracking_software_problems_Problem_Status_Codes( "problem_status_code" VARCHAR PRIMARY KEY, "problem_status_description" VARCHAR );
CREATE TABLE tracking_software_problems_Product( "product_id" INTEGER PRIMARY KEY, "product_name" VARCHAR, "product_details" VARCHAR );
CREATE TABLE tracking_software_problems_Staff( "staff_id" INTEGER PRIMARY KEY, "staff_first_name" VARCHAR, "staff_last_name" VARCHAR, "other_staff_details" VARCHAR );
CREATE TABLE tracking_software_problems_Problems( "problem_id" INTEGER PRIMARY KEY, "product_id" INTEGER NOT NULL, "closure_authorised_by_staff_id" INTEGER NOT NULL, "reported_by_staff_id" INTEGER NOT NULL, "date_problem_reported" DATETIME NOT NULL, "date_problem_closed" DATETIME, "problem_description" VARCHAR, "other_problem_details" VARCHAR, FOREIGN KEY ("closure_authorised_by_staff_id" ) REFERENCES tracking_software_problems_Staff ("staff_id" ), FOREIGN KEY ("product_id" ) REFERENCES tracking_software_problems_Product ("product_id" ), FOREIGN KEY ("reported_by_staff_id" ) REFERENCES tracking_software_problems_Staff ("staff_id" ) );
CREATE TABLE tracking_software_problems_Problem_Log( "problem_log_id" INTEGER PRIMARY KEY, "assigned_to_staff_id" INTEGER NOT NULL, "problem_id" INTEGER NOT NULL, "problem_category_code" VARCHAR NOT NULL, "problem_status_code" VARCHAR NOT NULL, "log_entry_date" DATETIME, "log_entry_description" VARCHAR, "log_entry_fix" VARCHAR, "other_log_details" VARCHAR, FOREIGN KEY ("problem_category_code" ) REFERENCES tracking_software_problems_Problem_Category_Codes ("problem_category_code" ),FOREIGN KEY ("assigned_to_staff_id" ) REFERENCES tracking_software_problems_Staff ("staff_id" ),FOREIGN KEY ("problem_id" ) REFERENCES tracking_software_problems_Problems ("problem_id" ),FOREIGN KEY ("problem_status_code" ) REFERENCES tracking_software_problems_Problem_Status_Codes ("problem_status_code" ) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\train_station
CREATE TABLE train_station_station( "Station_ID" int, "Name" text, "Annual_entry_exit" real, "Annual_interchanges" real, "Total_Passengers" real, "Location" text, "Main_Services" text, "Number_of_Platforms" int, PRIMARY KEY ("Station_ID") );
CREATE TABLE train_station_train( "Train_ID" int, "Name" text, "Time" text, "Service" text, PRIMARY KEY ("Train_ID") );
CREATE TABLE train_station_train_station( "Train_ID" int, "Station_ID" int, PRIMARY KEY ("Train_ID","Station_ID"), FOREIGN KEY ("Train_ID") REFERENCES train_station_train ("Train_ID"), FOREIGN KEY ("Station_ID") REFERENCES train_station_station ("Station_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\tvshow
CREATE TABLE tvshow_TV_Channel( "id" text, "series_name" text, "Country" text, "Language" text, "Content" text, "Pixel_aspect_ratio_PAR" text, "Hight_definition_TV" text, "Pay_per_view_PPV" text, "Package_Option" text, PRIMARY KEY ("id") );
CREATE TABLE tvshow_TV_series( "id" real, "Episode" text, "Air_Date" text, "Rating" text, "Share" real, "18_49_Rating_Share" text, "Viewers_m" text, "Weekly_Rank" real, "Channel" text, PRIMARY KEY ("id"), FOREIGN KEY ("Channel") REFERENCES tvshow_TV_Channel ("id") );
CREATE TABLE tvshow_Cartoon( "id" real, "Title" text, "Directed_by" text, "Written_by" text, "Original_air_date" text, "Production_code" real, "Channel" text, PRIMARY KEY ("id"), FOREIGN KEY ("Channel") REFERENCES tvshow_TV_Channel ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\tv_shows
CREATE TABLE tv_shows_city_channel( "ID" int, "City" text, "Station_name" text, "Owned_Since" real, "Affiliation" text, PRIMARY KEY ("ID") );
CREATE TABLE tv_shows_radio( "Radio_ID" int, "Transmitter" text, "Radio_MHz" text, "2FM_MHz" text, "RnaG_MHz" text, "Lyric_FM_MHz" text, "ERP_kW" text, PRIMARY KEY ("Radio_ID") );
CREATE TABLE tv_shows_tv_show( "tv_show_ID" int, "tv_show_name" text, "Sub_tittle" text, "Next_show_name" text, "Original_Airdate" text, PRIMARY KEY ("tv_show_ID") );
CREATE TABLE tv_shows_city_channel_radio( "City_channel_ID" int, "Radio_ID" int, "Is_online" bool, PRIMARY KEY ("City_channel_ID","Radio_ID"), FOREIGN KEY ("City_channel_ID") REFERENCES tv_shows_city_channel ("ID"), FOREIGN KEY ("Radio_ID") REFERENCES tv_shows_radio ("Radio_ID") );
CREATE TABLE tv_shows_city_channel_tv_show( "City_channel_ID" int, "tv_show_ID" int, "Is_online" bool, "Is_free" bool, PRIMARY KEY ("City_channel_ID","tv_show_ID"), FOREIGN KEY ("City_channel_ID") REFERENCES tv_shows_city_channel ("ID"), FOREIGN KEY ("tv_show_ID") REFERENCES tv_shows_tv_show ("tv_show_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\university_basketball
CREATE TABLE university_basketball_university( "School_ID" int, "School" text, "Location" text, "Founded" real, "Affiliation" text, "Enrollment" real, "Nickname" text, "Primary_conference" text, PRIMARY KEY ("School_ID") );
CREATE TABLE university_basketball_basketball_match( "Team_ID" int, "School_ID" int, "Team_Name" text, "ACC_Regular_Season" text, "ACC_Percent" text, "ACC_Home" text, "ACC_Road" text, "All_Games" text, "All_Games_Percent" int, "All_Home" text, "All_Road" text, "All_Neutral" text, PRIMARY KEY ("Team_ID"), FOREIGN KEY ("School_ID") REFERENCES university_basketball_university ("School_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\university_rank
CREATE TABLE university_rank_university( "University_ID" int, "University_Name" text, "City" text, "State" text, "Team_Name" text, "Affiliation" text, "Enrollment" int, "Home_Conference" text, PRIMARY KEY ("University_ID") );
CREATE TABLE university_rank_overall_ranking( "Rank" int, "University_ID" int, "Reputation_point" int, "Research_point" int, "Citation_point" int, "Total" int, PRIMARY KEY ("University_ID"), FOREIGN KEY ("University_ID") REFERENCES university_rank_university ("University_ID") );
CREATE TABLE university_rank_major( "Major_ID" int, "Major_Name" text, "Major_Code" int, PRIMARY KEY ("Major_ID") );
CREATE TABLE university_rank_major_ranking( "Rank" int, "University_ID" int, "Major_ID" int, PRIMARY KEY ("Rank","Major_ID","University_ID"), FOREIGN KEY ("University_ID") REFERENCES university_rank_university ("University_ID"), FOREIGN KEY ("Major_ID") REFERENCES university_rank_major ("Major_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\vehicle_driver
CREATE TABLE vehicle_driver_vehicle( "Vehicle_ID" int, "Model" text, "Build_Year" text, "Top_Speed" int, "Power" int, "Builder" text, "Total_Production" text, PRIMARY KEY ("Vehicle_ID") );
CREATE TABLE vehicle_driver_driver( "Driver_ID" int, "Name" text, "Citizenship" text, "Racing_Series" text, PRIMARY KEY ("Driver_ID") );
CREATE TABLE vehicle_driver_vehicle_driver( "Driver_ID" int, "Vehicle_ID" int, PRIMARY KEY ("Driver_ID","Vehicle_ID"), FOREIGN KEY ("Driver_ID") REFERENCES vehicle_driver_driver ("Driver_ID"), FOREIGN KEY ("Vehicle_ID") REFERENCES vehicle_driver_vehicle ("Vehicle_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\vehicle_rent
CREATE TABLE vehicle_rent_Customers( "id" int, "name" text, "age" int, "membership_credit" int, PRIMARY KEY ("id") );
CREATE TABLE vehicle_rent_Discount( "id" int, "name" text, "membership_credit" int, PRIMARY KEY ("id") );
CREATE TABLE vehicle_rent_Vehicles( "id" int, "name" text, "Model_year" int, "Type_of_powertrain" text, "Combined_fuel_economy_rate" int, "City_fuel_economy_rate" int, "Highway_fuel_economy_rate" int, "Cost_per_25_miles" real, "Annual_fuel_cost" real, "Notes" text, PRIMARY KEY ("id") );
CREATE TABLE vehicle_rent_Renting_history( "id" int, "customer_id" int, "discount_id" int, "vehicles_id" int, "total_hours" int, PRIMARY KEY ("id"), FOREIGN KEY ("customer_id") REFERENCES vehicle_rent_Customers ("id"), FOREIGN KEY ("vehicles_id") REFERENCES vehicle_rent_Vehicles ("id"), FOREIGN KEY ("discount_id") REFERENCES vehicle_rent_Discount ("id") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\video_game
CREATE TABLE video_game_platform( "Platform_ID" int, "Platform_name" text, "Market_district" text, "Download_rank" int, PRIMARY KEY ("Platform_ID") );
CREATE TABLE video_game_game( "Game_ID" int, "Title" text, "Release_Date" text, "Franchise" text, "Developers" text, "Platform_ID" int, "Units_sold_Millions" int, PRIMARY KEY ("Game_ID"), FOREIGN KEY ("Platform_ID") REFERENCES video_game_platform ("Platform_ID") );
CREATE TABLE video_game_player( "Player_ID" int, "Rank_of_the_year" int, "Player_name" text, "Position" text, "College" text, PRIMARY KEY ("Player_ID") );
CREATE TABLE video_game_game_player( "Player_ID" int, "Game_ID" int, "If_active" bool, PRIMARY KEY ("Player_ID","Game_ID"), FOREIGN KEY ("Player_ID") REFERENCES video_game_player ("Player_ID"), FOREIGN KEY ("Game_ID") REFERENCES video_game_game ("Game_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\voter_2
create table voter_2_Student( StuID INTEGER PRIMARY KEY, LName VARCHAR, Fname VARCHAR, Age INTEGER, Sex VARCHAR, Major INTEGER, Advisor INTEGER, city_code VARCHAR );
create table voter_2_Voting_record( StuID INTEGER, Registration_Date VARCHAR, Election_Cycle VARCHAR, President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER, FOREIGN KEY(StuID) REFERENCES voter_2_Student (StuID), FOREIGN KEY(President_Vote) REFERENCES voter_2_Student (StuID), FOREIGN KEY(Vice_President_Vote) REFERENCES voter_2_Student (StuID), FOREIGN KEY(Secretary_Vote) REFERENCES voter_2_Student (StuID), FOREIGN KEY(Treasurer_Vote) REFERENCES voter_2_Student (StuID), FOREIGN KEY(Class_President_Vote) REFERENCES voter_2_Student (StuID), FOREIGN KEY(Class_Senator_Vote) REFERENCES voter_2_Student (StuID) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\warehouse_1
CREATE TABLE warehouse_1_Warehouses( Code INTEGER NOT NULL, Location VARCHAR NOT NULL , Capacity INTEGER NOT NULL, PRIMARY KEY (Code) );
CREATE TABLE warehouse_1_Boxes( Code VARCHAR NOT NULL, Contents VARCHAR NOT NULL , Value REAL NOT NULL , Warehouse INTEGER NOT NULL, PRIMARY KEY (Code), FOREIGN KEY (Warehouse) REFERENCES warehouse_1_Warehouses (Code) );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\wedding
CREATE TABLE wedding_people( "People_ID" int, "Name" text, "Country" text, "Is_Male" text, "Age" int, PRIMARY KEY ("People_ID") );
CREATE TABLE wedding_church( "Church_ID" int, "Name" text, "Organized_by" text, "Open_Date" int, "Continuation_of" text, PRIMARY KEY ("Church_ID") );
CREATE TABLE wedding_wedding( "Church_ID" int, "Male_ID" int, "Female_ID" int, "Year" int, PRIMARY KEY ("Church_ID","Male_ID","Female_ID"), FOREIGN KEY ("Church_ID") REFERENCES wedding_church ("Church_ID"), FOREIGN KEY ("Male_ID") REFERENCES wedding_people ("People_ID"), FOREIGN KEY ("Female_ID") REFERENCES wedding_people ("People_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\workshop_paper
CREATE TABLE workshop_paper_workshop( "Workshop_ID" int, "Date" text, "Venue" text, "Name" text, PRIMARY KEY ("Workshop_ID") );
CREATE TABLE workshop_paper_submission( "Submission_ID" int, "Scores" real, "Author" text, "College" text, PRIMARY KEY ("Submission_ID") );
CREATE TABLE workshop_paper_Acceptance( "Submission_ID" int, "Workshop_ID" int, "Result" text, PRIMARY KEY ("Submission_ID","Workshop_ID"), FOREIGN KEY ("Submission_ID") REFERENCES workshop_paper_submission ("Submission_ID"), FOREIGN KEY ("Workshop_ID") REFERENCES workshop_paper_workshop ("Workshop_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\wrestler
CREATE TABLE wrestler_wrestler( "Wrestler_ID" int, "Name" text, "Reign" text, "Days_held" text, "Location" text, "Event" text, PRIMARY KEY ("Wrestler_ID") );
CREATE TABLE wrestler_Elimination( "Elimination_ID" text, "Wrestler_ID" int, "Team" text, "Eliminated_By" text, "Elimination_Move" text, "Time" text, PRIMARY KEY ("Elimination_ID"), FOREIGN KEY ("Wrestler_ID") REFERENCES wrestler_wrestler ("Wrestler_ID") );

Tables from file: C:\Users\Gianna\Documents\DatabaseDumps\spider_test_database_for_prefixes\yelp
CREATE TABLE yelp_business( "bid" int, "business_id" text UNIQUE, "name" text, "full_address" text, "city" text, "latitude" text, "longitude" text, "review_count" int, "is_open" int, "rating" real, "state" text, primary key("bid") );
CREATE TABLE yelp_category( "id" int, "business_id" text, "category_name" text, primary key("id"), foreign key("business_id") references yelp_business ("business_id") );
CREATE TABLE yelp_user( "uid" int, "user_id" text UNIQUE, "name" text, primary key("uid") );
CREATE TABLE yelp_checkin( "cid" int, "business_id" text, "count" int, "day" text, primary key("cid"), foreign key("business_id") references yelp_business ("business_id") );
CREATE TABLE yelp_neighbourhood( "id" int, "business_id" text, "neighbourhood_name" text, primary key("id"), foreign key("business_id") references yelp_business ("business_id") );
CREATE TABLE yelp_review( "rid" int, "business_id" text, "user_id" text, "rating" real, "text" text, "year" int, "month" text, primary key("rid"), foreign key("business_id") references yelp_business ("business_id"), foreign key("user_id") references yelp_user ("user_id") );
CREATE TABLE yelp_tip( "tip_id" int, "business_id" text, "text" text, "user_id" text, "likes" int, "year" int, "month" text, primary key("tip_id"), foreign key("business_id") references yelp_business ("business_id"), foreign key("user_id") references yelp_user ("user_id") );

